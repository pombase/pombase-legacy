#!/usr/bin/perl  -wT
#########
# Author: maa
# taint/strict/SangerWeb fixed rmp 2002-01-21
#
# For changes see CVS


#package yeastpub::motif_search;

use strict;
use English;
use CGI;

my $sources = "/var/pomcur/sources";

my %id_map = ();

# create map file with:
# select uniquename, name as gene_name, (select t.name from feature f2, feature_cvterm fc, cvterm t, cv where cv.name = 'PomBase gene products' and fc.feature_id = f2.feature_id and f2.uniquename = f.uniquename || '.1:pep' and fc.cvterm_id = t.cvterm_id and t.cv_id = cv.cv_id) as product from feature f where type_id in (select cvterm_id from cvterm where name = 'gene') and f.organism_id = (select organism_id from organism where common_name = 'pombe');
open my $id_map_fh, '<', "$sources/gene_sysid_name_map.tsv" or die;
while (defined (my $line = <$id_map_fh>)) {
  my ($systematic_id, $gene_name, $product) = split /\|/, $line;
  $id_map{$systematic_id} = {name => $gene_name,
                             product => $product};
}
close $id_map_fh;

print "Content-type: text/html\n\n";

my $cgi = new CGI;

my $ids_only = $cgi->param('ids_only');

if (!$ids_only) {
  print qq(<p><a href="http://www.pombase.org"><img src="http://www.pombase.org/sites/pombase.org/themes/custom/pombase/logo.png"></a></p>\n);
}

$ENV{'PATH'} = "";
$| = 1;
my $org;
my $numResults = 0;

my %mappings = (
  B => '[AGS]', # tiny
  b => '[AGS]', # tiny
  Z  => '[ACDEGHKNQRST]', #turnlike
  z  => '[ACDEGHKNQRST]', #turnlike
  0 => '[DE]', #acidic
  1 => '[ST]', #alcohol
  2 => '[AGILV]', #aliphatic
  3 => '[FHWY]', #aromatic
  4 => '[KRH]', #basic
  5 => '[DEHKR]' , #charged
  6 => '[AVILMFYW]' , #hydrophobic
  7 => '[KRHDENQ]' , #hydrophilic
  8 => '[CDEHKNQRST]' , #polar
  9 => '[ACDGNPSTV]', #small
  J => '[ARNDCEQGILKMPSTV]', # All except aromatic, for Hiro Yamano
  j => '[ARNDCEQGILKMPSTV]', # All except aromatic, for Hiro Yamano
  X => '[ARNDCEQGILKMPSTVHF]', # All except WY, for Hiro Yamano
  x => '[ARNDCEQGILKMPSTVHF]', # All except WY, for Hiro Yamano
);

my $GAP_SIZE = 25;

#########
# what stage
#
my @params = $cgi->param();

if (scalar @params < 2) {

  &display_form($cgi);

  print qq(
		      <P>Search examples:
		      <UL>
		      <TABLE BORDER="0" WIDTH="100%">
		    <TR>
		         <TD><TT>CADR</TT></TD>
		         <TD>will find</TD>
		         <TD>CADR</TD>
		       </TR>
		       <TR>
		         <TD><TT>CA[DE]R</TT></TD>
		         <TD>will find</TD>
		         <TD>CADR/CAER</TD>
		       </TR>
		       <TR>
		         <TD><TT>CA...R</TT></TD>
		         <TD> will find</TD>
		         <TD>CAXXXR</TD>
		       </TR>
		       <TR>
		         <TD><TT>CA.+R </TT></TD>
		         <TD>will find </TD>
		         <TD>CA(any number of one or more amino acids)R</TD>
		       </TR>
		       <TR>
		         <TD><TT>SPR.|SP.R</TT></TD>
		         <TD>will find </TD>
		         <TD>SPRX or SPXR</TD>
		       </TR>
		       <TR>
		         <TD><TT>^ME </TT></TD>
		         <TD>will find </TD>
		         <TD>proteins beginning with ME</TD>
		       </TR>
		       <TR>
		         <TD><TT>LAA\$</TT></TD>
		         <TD>will find </TD>
		         <TD>proteins terminating LAA</TD>
		       </TR>
		       <TR>
		         <TD><TT>^.{1,20}MCA</TT></TD>
		         <TD>will find </TD>
		         <TD>proteins with MCA in the first 20 amino acids</TD>
		       </TR>
		     </TABLE>
		   </ul>
		 </p>
		 <P>Amino acid group codes (<b>Please note these options do not work in combination with square brackets</b>):
		 <UL>
		 <TABLE BORDER="0" WIDTH="100%">
		 <TR>
		    <TH align="left">AA group</TH>
		    <TH align="left">Code</TH>
		    <TH align="left">Amino acids</TH>
		 </TR>
		 <TR>
		         <TD>acidic </TD>
		         <TD><B>0</B> </TD>
		         <TD><TT>DE</TT></TD>
		 </TR>
		 <TR>
		         <TD>alcohol </TD>
		         <TD><B>1</B> </TD>
		         <TD><TT>ST</TT></TD>
		 </TR>
		 <TR>
		         <TD>aliphatic </TD>
		         <TD><B>2</B> </TD>
		         <TD><TT>AGILV</TT></TD>
		 </TR>
		 <TR>
		         <TD>aromatic </TD>
		         <TD><B>3</B> </TD>
		         <TD><TT>FHWY</TT></TD>
		 </TR>
		 <TR>
		         <TD>basic </TD>
		         <TD><B>4</B> </TD>
		         <TD><TT>KRH</TT></TD>
		 </TR>
		 <TR>
		         <TD>charged </TD>
		         <TD><B>5</B> </TD>
		         <TD><TT>DEHKR</TT></TD>
		 </TR>
		 <TR>
		         <TD>hydrophobic </TD>
		         <TD><B>6</B> </TD>
		         <TD><TT>AVILMFYW</TT></TD>
		 </TR>
		 <TR>
		         <TD>hydrophilic </TD>
		         <TD><B>7</B> </TD>
		         <TD><TT>KRHDENQ</TT></TD>
		 </TR>
		 <TR>
		         <TD>polar </TD>
		         <TD><B>8</B> </TD>
		         <TD><TT>CDEHKNQRST</TT></TD>
		 </TR>
		 <TR>
		         <TD>small </TD>
		         <TD><B>9</B> </TD>
		         <TD><TT>ACDGNPSTV</TT></TD>
		 </TR>
		 <TR>
		         <TD>tiny </TD>
		         <TD><B>B</B> </TD>
		         <TD><TT>AGS</TT></TD>
		 </TR>
		 <TR>
		         <TD>turnlike </TD>
		         <TD><B>Z</B> </TD>
		         <TD><TT>ACDEGHKNQRST</TT></TD>
		 </TR>
		 </TABLE>
		 </UL>
		 </P>
		 );
} else {
  my $syn = $cgi->param('test');

  if (!$ids_only) {
    print "<h1>Search for $syn</h1>";
    print "<p><a href='/cgi-bin/sanger_motif_search'>New search</a>&nbsp;&nbsp;&nbsp;";

    my $ids_only_url = $cgi->url(-query => 1) . ';ids_only=1';
    print "<a href='$ids_only_url'>View only the IDs</a></p>\n";
  }

  my $db = "$sources/Schizosaccharomyces_pombe.ASM294v1.18.pep.all.fa";

  # Check search
  if ($syn !~ /^[A-Za-z0-9\.\+\?\{\}\,\[\]\*\^\$]+$/) {
    print qq(Your query contained invalid characters. Please alter your query and try again.);

    &display_form($cgi);

    return;
  }

  eval {
    "foo" =~ /$syn/;
  };

  if (defined $@ && length $@) {
    my $message = $@;

    $message =~ s/ at.*//;

    print qq(illegal search pattern: $message\n);
    &display_form($cgi);

    return;
  }

  $syn =~ s|\{|_\{|g;
  $syn =~ s|\}|\}_|g;

  my $newExp = "";
  my @parts  = split("_",$syn);
  foreach my $cur (@parts) {
    if ($cur !~ "^\{") {
      foreach my $lup (keys %mappings) {
        $cur =~ s/$lup/$mappings{$lup}/g;
      }
    }
    $newExp .= $cur;
  }

  #	$syn =~ m/(.*)/s;
  $syn = $newExp;

  if (!$ids_only) {
    print qq(<TABLE BORDER="0" COLUMNS="8%,92%" WIDTH="100%" cellspacing="0" cellpadding="0">\n);
  }

  doSearch($syn, $db);

  if (!$ids_only) {
    print qq(</TABLE>);
  }

  if ($numResults==0) {
    print qq(<p>No results. Please try again);
    &display_form($cgi);
  }

}

1;

sub display_form {
  my($cgi) = @_;
  print $cgi->start_form('GET'), "Query: ";
  print $cgi->textfield('test'), "<P>";
  print $cgi->hidden('org', $org);
  print $cgi->submit('Submit'), "&nbsp;&nbsp;&nbsp;";
  print $cgi->reset('Reset');
  print $cgi->end_form(), "</p>";
}


sub display_results {
  my ($acc, $name, $product, $num_lines, $display) = @_;

  my $bgcolour = "BGCOLOR=\"FAFAD2\"";
  $bgcolour    = "BGCOLOR=\"#FFFFFF\"" if $num_lines % 2 == 1;

  my $index = $num_lines+1;
  print qq(<TR $bgcolour><TD COLSPAN="2">$index\) <A HREF="http://www.pombase.org/spombe/result/$acc">$acc</A> &nbsp; <b>$name</b> &nbsp; $product</TD></TR>\n);

  print qq(<TR $bgcolour>);
  print qq(<TD><br>$display<br></TD></TR>\n);
}

#
# returns a <TABLE> with one row per motif match
#
# It cycles though the sequence working on one match at a time, storing the
# coords of the sequence being displayed and the actual match.
#
# Once all matches have been stored the HTML is built and returned
#
sub matches {
  my ($sequence, $syn) = @_;

  #print STDERR $sequence;

  # Loop for each match, create an array of matching strings with GAP_SIZE bases each size
  #print "<tr><td>Yes</td></tr>\n";
  my @matches   = ();
  my @positions = ();
  my $counter   = 0;

  while ($sequence =~ /($syn)/gi) {
    my ($prematch, $match, $postmatch) = ($PREMATCH, $1, $POSTMATCH);

    my $chopped_prematch  = substr($prematch,  -$GAP_SIZE, $GAP_SIZE);
    my $chopped_postmatch = substr($postmatch, 0, $GAP_SIZE);

    $positions[$counter][0] = length($prematch) - length($chopped_prematch) + 1; #length($prematch) + 1;
    $positions[$counter][1] = length($prematch . $match . $chopped_postmatch);

    $match = qq(<FONT COLOR=\"red\">$match</FONT>);
    push @matches, $chopped_prematch . $match . $chopped_postmatch;

    ++$counter;
  }

  if ($counter== 0) {
    return undef;
  }

  my $markedup;

  foreach my $x (0 .. $counter - 1) {
    my $start_dots = "...";
    my $end_dots   = "...";

    if ( $positions[$x][0] == 1 ) {
      $start_dots = "";
    }

    if ( $positions[$x][1] == length($sequence) ) {
      $end_dots = "";
    }

    my $first = $start_dots .$positions[$x][0];
    $first = rjust($first, 10);
    my $third = "&nbsp;&nbsp;".$positions[$x][1]. $end_dots;

    $markedup .="<tt>". $first . "&nbsp;&nbsp;" . $matches[$x] . $third. "</tt></br>\n";

  }
  return $markedup;
}

sub rjust {
  my ($string, $want) = @_;
  if ( length($string) < $want ) {
    $string = ("&nbsp;" x ( $want - length($string))) . $string;
  }
  return $string;
}


sub doSearch {
  my ($search_re, $fastaFile) = @_;

  my $num_lines = 0;

  my $header;

  my $body_no_linebreak;

  if (!open (INFILE, "<".$fastaFile)) {
    print "internal error: failed to open $fastaFile: $!";
    return;
  }

  while (<INFILE>) {
    if (/^>/) {
      if (check_record ($header, $body_no_linebreak, $num_lines, $search_re)) {
        $num_lines++;
      }

      undef $body_no_linebreak;

      $header = $_;
    } else {
      if (defined $header) {
        chomp $_;
        $body_no_linebreak .= $_;
      } else {
        #      warn "input file seems to contain a record without a header at line $.\n";
      }
    }
  }
  check_record ($header, $body_no_linebreak, $num_lines, $search_re);
  close INFILE;
}


sub check_record {
  my ($header, $body_no_linebreak, $num_lines, $search_re) = @_;

  my $display = matches($body_no_linebreak, $search_re);

  if (defined $display) {
    my ($acc) = $header =~ /^>(\S+)/;
    $acc =~ s/:pep$//;

    my $name = $id_map{$acc}->{name} // '';
    my $product = $id_map{$acc}->{product} // '';

    if ($ids_only) {
      print "<p>$acc";
    } else {
      #print "<tr><td>".$display."</td></tr>\n";
      my $sequence  = "";
      display_results($acc, $name, $product, $num_lines, $display);
    }
    $numResults++;
    return 1;
  }
  return 0;
}

