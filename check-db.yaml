'PomBase::Check::FeatureCount':
  min_count: 10000
query_checks:
  - name: pombe_genes
    expected: '>= 6980'
    # if true, show the result set content on failure:
    verbose_fail: false
    query: |
      select * from feature f, cvterm cvt, organism o where
      f.type_id = cvt.cvterm_id and f.organism_id = o.organism_id and
      o.common_name = 'pombe' and cvt.name = 'gene'
  - name: no_duplicate_pombe_gene_names
    expected: 0
    # if true, show the result set content on failure:
    verbose_fail: true
    query: |
      select count(feature_id), name from feature where
      name is not null and type_id = (select cvterm_id from cvterm where cv_id
      = (select cv_id from cv where name = 'sequence') and name = 'gene') and
      organism_id = (select organism_id from organism where abbreviation =
      'Spombe') group by name having count(feature_id) > 1
  - name: alleles_instance_of_gene
    description: all alleles should be instance_of gene
    expected: 0
    verbose_fail: true
    query: |
      SELECT f.uniquename, f.name, pt.name from feature f
        JOIN feature_relationship r ON r.subject_id = f.feature_id
        JOIN feature p ON r.object_id = p.feature_id
        JOIN cvterm rt ON rt.cvterm_id = r.type_id
        JOIN cvterm pt ON pt.cvterm_id = p.type_id
        WHERE rt.name = 'instance_of' AND pt.name <> 'gene'
          AND pt.name <> 'pseudogene'
  - name: no_population_terms_with_penetrance
    description: no population term should have a has_penetrance relation
    expected: 0
    verbose_fail: true
    query: |
      SELECT f.name, f.uniquename, res_fc.cvterm_name, pub.uniquename
        FROM pombase_feature_cvterm_ext_resolved_terms res_fc
             JOIN pub on res_fc.pub_id = pub.pub_id
             JOIN feature f on f.feature_id = res_fc.feature_id
             JOIN cvtermpath path on path.subject_id = res_fc.base_cvterm_id
        WHERE object_id in
          (SELECT cvterm_id
             FROM cvterm t join cv on t.cv_id = cv.cv_id
            WHERE t.name = 'cell population phenotype' and cv.name = 'fission_yeast_phenotype')
          AND pathdistance > 0
          AND cvterm_id in
            (SELECT subject_id
               FROM cvterm_relationship r
                    JOIN cvterm type on r.type_id = type.cvterm_id
                    AND type.name = 'has_penetrance')
  - name: canto_annotations
    description: check for annotations from Canto
    expected: '>= 13000'
    verbose_fail: false
    query: |
      SELECT fc.feature_cvterm_id
        FROM feature_cvterm fc
        JOIN feature_cvtermprop p ON p.feature_cvterm_id = fc.feature_cvterm_id
        JOIN cvterm type ON p.type_id = type.cvterm_id
       WHERE type.name = 'canto_session'
  - name: missing_assayed_using
    description: check that protein binding annotations have two assayed_using extensions
    expected: 0
    verbose_fail: true
    query: |
      WITH extension_relations_ids AS
        (SELECT cvterm_id FROM cvterm WHERE name LIKE 'annotation_extension_relation-%')
      SELECT f.uniquename || ' <-> ' || cvterm_name || '  ',
               (SELECT value
                  FROM feature_cvtermprop p
                 WHERE p.feature_cvterm_id = fc.feature_cvterm_id
                   AND p.type_id IN (SELECT cvterm_id FROM cvterm WHERE name = 'canto_session') LIMIT 1)
        FROM pombase_feature_cvterm_ext_resolved_terms t
        JOIN feature_cvterm fc ON fc.cvterm_id = t.cvterm_id
        JOIN feature f ON f.feature_id = fc.feature_id
       WHERE
         base_cvterm_id IN
           (SELECT cvterm_id FROM cvterm WHERE dbxref_id IN
             (SELECT dbxref_id FROM dbxref WHERE db_id IN
               (SELECT db_id FROM db WHERE name = 'FYPO')
                   AND accession IN
                     ('0000702', '0000703', '0000704', '0000705', '0001275', '0001571', '0001645', '0002365', '0003206', '0003207', '0003215')))
         AND t.cvterm_id NOT IN
           (SELECT p1.cvterm_id
              FROM cvtermprop p1
              JOIN cvtermprop p2 ON p1.cvterm_id = p2.cvterm_id
               AND p1.value <> p2.value
               AND p1.type_id IN (SELECT cvterm_id FROM extension_relations_ids)
               AND p2.type_id IN (SELECT cvterm_id FROM extension_relations_ids))
