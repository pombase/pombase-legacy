#!/bin/sh -

# A script to make a PomBase Chado db from scratch

if [ ! $# = 4 ]
then
  echo "$0: needs 4 arguments: db_name_suffix host username password" 1>&2
  exit 1
fi

export PERL5LIB=lib

DB_NAME_SUFFIX=$1
HOST=$2
USER=$3
PASSWORD=$4

DB=pombase-chado-base-$DB_NAME_SUFFIX

echo "building database: $DB on $HOST"

createdb $DB

echo Loading template
psql -q $DB < pombase-chado-base.dump

SOURCES_DIR=/var/pomcur/sources

rm --verbose -rf tmp

(cd $SOURCES_DIR/pombe-embl/; svn update || exit 1)

echo update SO from SVN
(cd $SOURCES_DIR/song-svn; svn update)
echo update GO from CVS
(cd $SOURCES_DIR/go; cvs up)
echo update GO from SVN
(cd $SOURCES_DIR/go-svn; svn --ignore-externals update)
echo update FYPO from GitHub
(cd $SOURCES_DIR/pombase_fypo_github/; git pull)

for obo_file in \
    relationship/ro.obo \
    gmod-schema-latest/chado/load/etc/feature_property.obo \
    song-svn/so-xp-simple.obo \
    go-svn/ontology/go-basic.obo \
    PSI-MOD.obo \
    pombe-embl/mini-ontologies/iao.obo \
    pombe-embl/mini-ontologies/quiescence.obo \
    pombase_fypo_github/release/fypo-simple.obo \
    pombase_fypo_github/supplemental_files/fypo_extension_relations.obo \
    go-svn/ontology/extensions/gorel.obo \
    pombase_fypo_github/peco.obo \
    pombe-embl/mini-ontologies/fypo_extension.obo \
    pombe-embl/mini-ontologies/chebi.obo \
    pombe-embl/mini-ontologies/cl.obo \
    pombe-embl/mini-ontologies/pato.obo \
    pombe-embl/mini-ontologies/pombe_mini_PR.obo \
    pombe-embl/mini-ontologies/gene_ex_extension_relations.obo \
    pombe-embl/mini-ontologies/PSI-MOD_extension_relations.obo \
    pombe-embl/mini-ontologies/SO_feature_relations.obo \
    pombase/pombase_terms-v57.obo
do
  echo loading: $obo_file
  PROP_FILTERED_OBO=/tmp/prop_filtered.obo
  grep -v '^property_value: ' $SOURCES_DIR/$obo_file > $PROP_FILTERED_OBO
  go2fmt.pl -p obo_text -w xml $PROP_FILTERED_OBO | go-apply-xslt oboxml_to_chadoxml - > /tmp/prop_filtered.xml && stag-storenode.pl -cache 1 -d "dbi:Pg:dbname=$DB;host=$HOST" --user $USER --password $PASSWORD /tmp/prop_filtered.xml || exit 1
done

CURRENT_BUILD_DIR=$SOURCES_DIR/current_build_files/pombase-build-$DB_NAME_SUFFIX

mkdir -p $CURRENT_BUILD_DIR/ontologies

# Save ontology versions
(
  cd $CURRENT_BUILD_DIR/ontologies

  svn info $SOURCES_DIR/go-svn > go-svn-info.txt
  cp $SOURCES_DIR/go-svn/ontology/go-basic.obo .
  cp $SOURCES_DIR/go-svn/ontology/go.obo .

  (cd $SOURCES_DIR/pombase_fypo_github; git describe) > fypo-git-info.txt
  cp $SOURCES_DIR/pombase_fypo_github/release/fypo-simple.obo .
)

date
echo populate cvtermpath using owltools
$OWLTOOLS_CHADO_CLOSURE $HOST $DB $USER $PASSWORD $SOURCES_DIR/go-svn/ontology/go-basic.obo $SOURCES_DIR/pombase_fypo_github/release/fypo-simple.obo
date; echo finished

# prevent duplicate feature uniquenames
psql -q $DB -c 'CREATE UNIQUE INDEX pombase_feature_uniquename_unique_idx ON feature(uniquename);'

# view definitions for extension terms
psql -q $DB -c "CREATE VIEW pombase_feature_cvterm_with_ext_parents AS SELECT fc.feature_cvterm_id, fc.feature_id, pub_id, parent_t.name AS base_cvterm_name, parent_t.cvterm_id AS base_cvterm_id, parent_cv.name AS base_cv_name, child_t.name as cvterm_name, child_t.cvterm_id as cvterm_id FROM feature_cvterm fc JOIN cvterm child_t ON child_t.cvterm_id = fc.cvterm_id JOIN cvterm_relationship r ON child_t.cvterm_id = r.subject_id JOIN cvterm parent_t ON r.object_id = parent_t.cvterm_id JOIN cv parent_cv ON parent_cv.cv_id = parent_t.cv_id JOIN cv child_cv ON child_cv.cv_id = child_t.cv_id JOIN cvterm r_type ON r.type_id = r_type.cvterm_id WHERE r_type.name = 'is_a' AND child_cv.name = 'PomBase annotation extension terms';"
psql -q $DB -c "CREATE VIEW pombase_feature_cvterm_no_ext_terms AS SELECT fc.feature_cvterm_id, fc.feature_id, pub_id, t.name AS base_cvterm_name, t.cvterm_id AS base_cvterm_id, cv.name AS base_cv_name, t.name as cvterm_name, t.cvterm_id FROM feature_cvterm fc JOIN cvterm t ON t.cvterm_id = fc.cvterm_id JOIN cv ON cv.cv_id = t.cv_id WHERE cv.name <> 'PomBase annotation extension terms';"
psql -q $DB -c "CREATE VIEW pombase_feature_cvterm_ext_resolved_terms AS SELECT * from pombase_feature_cvterm_no_ext_terms UNION SELECT * from pombase_feature_cvterm_with_ext_parents;"

# 
psql -q $DB -c "CREATE VIEW pombase_extension_rels_and_values AS SELECT t.cvterm_id AS cvterm_id,
 substring(pt.name FROM 'annotation_extension_relation-(.*)') AS rel_name, p.value AS value FROM
 cvtermprop p JOIN cvterm pt ON p.type_id = pt.cvterm_id JOIN cvterm t ON
 p.cvterm_id = t.cvterm_id
 WHERE pt.name LIKE 'annotation_extension_relation-%' AND t.cvterm_id IN
 (SELECT subject_id FROM cvterm_relationship WHERE object_id IN (SELECT
 cvterm_id FROM cvterm WHERE cv_id = (SELECT cv_id FROM cv WHERE name =
 'fission_yeast_phenotype'))) UNION ALL SELECT rel.subject_id as cvterm_id,
 rel_type.name as rel_name, object.name as value from cvterm_relationship rel join cvterm rel_type on
 rel.type_id = rel_type.cvterm_id join cvterm object on rel.object_id = object.cvterm_id
 where rel.subject_id in (select subject_id from
 cvterm_relationship where object_id in (select cvterm_id from cvterm where
 cv_id = (select cv_id from cv where name = 'fission_yeast_phenotype'))) and
 rel_type.cv_id = (select cv_id from cv where name = 'fypo_extension_relations');"

# create a view of annotateed 
psql -q $DB -c "CREATE VIEW annotated_gene_feature_per_publications AS
WITH gene_pubs AS
  (SELECT gene.uniquename AS gene_uniquename,
          pub.uniquename AS pmid
   FROM feature gene
   JOIN cvterm gene_type on gene_type.cvterm_id = gene.type_id
   JOIN feature_relationship r ON r.object_id = gene.feature_id
   JOIN cvterm t ON r.type_id = t.cvterm_id
   JOIN feature mrna ON mrna.feature_id = subject_id
   JOIN cvterm mrna_type on mrna_type.cvterm_id = mrna.type_id
   JOIN feature_cvterm fc ON mrna.feature_id = fc.feature_id
   JOIN pub ON fc.pub_id = pub.pub_id
   WHERE t.name = 'part_of' and gene_type.name = 'gene' and mrna_type.name = 'mRNA'
   UNION SELECT gene.uniquename AS gene_uniquename,
   pub.uniquename AS pmid
   FROM feature gene
   JOIN cvterm gene_type on gene_type.cvterm_id = gene.type_id
   JOIN feature_relationship allele_gene_rel ON allele_gene_rel.object_id = gene.feature_id
   JOIN feature allele ON allele.feature_id = allele_gene_rel.subject_id
   JOIN cvterm allele_gene_rel_type ON allele_gene_rel.type_id = allele_gene_rel_type.cvterm_id
   JOIN feature_relationship allele_genotype_rel ON allele_genotype_rel.subject_id = allele.feature_id
   JOIN feature genotype ON allele_genotype_rel.object_id = genotype.feature_id
   JOIN cvterm allele_genotype_rel_type ON allele_genotype_rel.type_id = allele_genotype_rel_type.cvterm_id
   JOIN feature_cvterm fc ON genotype.feature_id = fc.feature_id
   JOIN pub ON fc.pub_id = pub.pub_id
   WHERE allele_gene_rel_type.name = 'instance_of'
   AND allele_genotype_rel_type.name = 'part_of'and gene_type.name = 'gene' 
   UNION SELECT sub.uniquename AS gene_uniquename,
   pub.uniquename AS pmid
   FROM feature_relationship r
   JOIN cvterm rel_type on r.type_id = rel_type.cvterm_id
   JOIN feature sub ON r.subject_id = sub.feature_id
   JOIN cvterm ft ON sub.type_id = ft.cvterm_id
   JOIN feature_relationship_pub frp ON frp.feature_relationship_id = r.feature_relationship_id
   JOIN pub ON frp.pub_id = pub.pub_id
   WHERE ft.name = 'gene' and (rel_type.name = 'interacts_genetically' OR rel_type.name = 'interacts_physically')
   UNION SELECT obj.uniquename AS gene_uniquename,
   pub.uniquename AS pmid
   FROM feature_relationship r
   JOIN cvterm rel_type on r.type_id = rel_type.cvterm_id
   JOIN feature obj ON r.object_id = obj.feature_id
   JOIN cvterm ft ON obj.type_id = ft.cvterm_id
   JOIN feature_relationship_pub frp ON frp.feature_relationship_id = r.feature_relationship_id
   JOIN pub ON frp.pub_id = pub.pub_id
   WHERE ft.name = 'gene' and (rel_type.name = 'interacts_genetically' OR rel_type.name = 'interacts_physically')),
genes_per_pub as
(SELECT count(gene_uniquename), pmid
FROM gene_pubs
WHERE gene_uniquename IN
    (SELECT uniquename
     FROM feature
     WHERE organism_id IN
         (SELECT organism_id
          FROM organism
          WHERE common_name = 'pombe'))
group by pmid) SELECT * FROM gene_pubs;"


echo make copies

for i in `seq 1 3`
do
  NEW_DB=pombase-build-$DB_NAME_SUFFIX-v$i
  echo $NEW_DB
  createdb -T $DB $NEW_DB
done
