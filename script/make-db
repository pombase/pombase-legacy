#!/bin/sh -

# A script to make a Chado db from scratch using GMOD tools.  Must be
# run in the gmod-schema/chado directory.

FAST=''

if [ $1 = '-f' ]
then
  shift
  FAST=fast
fi

if [ ! $# = 4 ]
then
  echo "$0: needs 4 arguments: db_name_suffix host username password" 1>&2
  exit 1
fi

export PERL5LIB=lib

replace() {
  var=$1
  new_val=$2
  file=$3
  perl -pne "s/$var=.*/$var=$new_val/" $file > $file.new
  mv $file.new $file
}

DB_NAME_SUFFIX=$1
HOST=$2
USER=$3
PASSWORD=$4

DB=pombase-chado-base-$DB_NAME_SUFFIX

echo "building database: $DB on $HOST"

replace CHADO_DB_NAME $DB $HOME/.gmod_profile
replace CHADO_DB_HOST $HOST $HOME/.gmod_profile
replace CHADO_DB_USER $USER $HOME/.gmod_profile
replace CHADO_DB_PASS $PASSWORD $HOME/.gmod_profile

replace DBNAME $DB build.conf
replace DBHOSE $HOST build.conf
replace DBUSER $USER build.conf
replace DBPASS $PASSWORD build.conf

SOURCES_DIR=/var/pomcur/sources

#dropdb $DB; createdb $DB || exit 1

rm --verbose -rf tmp


(cd $SOURCES_DIR/pombe-embl/; svn update || exit 1)


echo update SO from SVN
(cd $SOURCES_DIR/song-svn; svn update)
echo update GO from CVS
(cd $SOURCES_DIR/go; cvs up)
echo update GO from SVN
(cd $SOURCES_DIR/go-svn; svn --ignore-externals update)

if [ x$FAST = x'' ]
then
  perl Makefile.PL
  make
  make load_schema
  make prepdb
  make ontologies
fi

(cd $SOURCES_DIR/phenotype_ontology_for_chado/; up)

for obo_file in \
    song-svn/so-xp-simple.obo \
    go-svn/ontology/go-basic.obo \
    PSI-MOD.obo \
    pombe-embl/mini-ontologies/iao.obo \
    pombe-embl/mini-ontologies/quiescence.obo \
    phenotype_ontology_for_chado/releases/latest/fypo-simple.obo \
    phenotype_ontology_for_chado/supplemental_files/fypo_extension_relations.obo \
    go-svn/ontology/extensions/gorel.obo \
    phenotype_ontology_for_chado/peco.obo \
    pro_small.obo \
    pombe-embl/mini-ontologies/fypo_extension.obo \
    pombe-embl/mini-ontologies/chebi.obo \
    pombe-embl/mini-ontologies/cl.obo \
    pombe-embl/mini-ontologies/pato.obo \
    pombe-embl/mini-ontologies/pombe_mini_PR.obo \
    pombe-embl/mini-ontologies/gene_ex_extension_relations.obo \
    pombe-embl/mini-ontologies/PSI-MOD_extension_relations.obo \
    pombe-embl/mini-ontologies/SO_feature_relations.obo \
    pombase/pombase_terms-v53.obo \
    pombe-embl/mini-ontologies/SO_feature_relations.obo
do
  echo loading: $obo_file
  PROP_FILTERED_OBO=/tmp/prop_filtered.obo
  grep -v '^property_value: ' $SOURCES_DIR/$obo_file > $PROP_FILTERED_OBO
  go2fmt.pl -p obo_text -w xml $PROP_FILTERED_OBO | go-apply-xslt oboxml_to_chadoxml - > /tmp/prop_filtered.xml && stag-storenode.pl -cache 1 -d "dbi:Pg:dbname=$DB;host=$HOST" --user $USER --password $PASSWORD /tmp/prop_filtered.xml || exit 1
done

CURRENT_BUILD_DIR=$SOURCES_DIR/current_build_files/pombase-build-$DB_NAME_SUFFIX

mkdir -p $CURRENT_BUILD_DIR/ontologies

# Save ontology versions
(
  cd $CURRENT_BUILD_DIR/ontologies

  svn info $SOURCES_DIR/go-svn > go-svn-info.txt
  cp $SOURCES_DIR/go-svn/ontology/go-basic.obo .

  svn info $SOURCES_DIR/phenotype_ontology_for_chado > fypo-svn-info.txt
  cp $SOURCES_DIR/phenotype_ontology_for_chado/releases/latest/fypo-simple.obo .
)

date
echo populate cvtermpath using owltools
$OWLTOOLS_CHADO_CLOSURE $HOST $DB $USER $PASSWORD $SOURCES_DIR/go-svn/ontology/go-basic.obo $SOURCES_DIR/phenotype_ontology_for_chado/releases/latest/fypo-simple.obo
date; echo finished

# prevent duplicate feature uniquenames
psql $DB -c 'CREATE UNIQUE INDEX pombase_feature_uniquename_unique_idx ON feature(uniquename);'

# view definitions for extension terms
psql $DB -c "CREATE VIEW pombase_feature_cvterm_with_ext_parents AS SELECT fc.feature_cvterm_id, fc.feature_id, pub_id, parent_t.name AS base_cvterm_name, parent_t.cvterm_id AS base_cvterm_id, parent_cv.name AS base_cv_name, child_t.name as cvterm_name, child_t.cvterm_id as cvterm_id FROM feature_cvterm fc JOIN cvterm child_t ON child_t.cvterm_id = fc.cvterm_id JOIN cvterm_relationship r ON child_t.cvterm_id = r.subject_id JOIN cvterm parent_t ON r.object_id = parent_t.cvterm_id JOIN cv parent_cv ON parent_cv.cv_id = parent_t.cv_id JOIN cv child_cv ON child_cv.cv_id = child_t.cv_id JOIN cvterm r_type ON r.type_id = r_type.cvterm_id WHERE r_type.name = 'is_a' AND child_cv.name = 'PomBase annotation extension terms';"
psql $DB -c "CREATE VIEW pombase_feature_cvterm_no_ext_terms AS SELECT fc.feature_cvterm_id, fc.feature_id, pub_id, t.name AS base_cvterm_name, t.cvterm_id AS base_cvterm_id, cv.name AS base_cv_name, t.name as cvterm_name, t.cvterm_id FROM feature_cvterm fc JOIN cvterm t ON t.cvterm_id = fc.cvterm_id JOIN cv ON cv.cv_id = t.cv_id WHERE cv.name <> 'PomBase annotation extension terms';"
psql $DB -c "CREATE VIEW pombase_feature_cvterm_ext_resolved_terms AS SELECT * from pombase_feature_cvterm_no_ext_terms UNION SELECT * from pombase_feature_cvterm_with_ext_parents;"

# 
psql $DB -c "CREATE VIEW pombase_extension_rels_and_values AS SELECT t.cvterm_id AS cvterm_id,
 substring(pt.name FROM 'annotation_extension_relation-(.*)') AS rel_name, p.value AS value FROM
 cvtermprop p JOIN cvterm pt ON p.type_id = pt.cvterm_id JOIN cvterm t ON
 p.cvterm_id = t.cvterm_id
 WHERE pt.name LIKE 'annotation_extension_relation-%' AND t.cvterm_id IN
 (SELECT subject_id FROM cvterm_relationship WHERE object_id IN (SELECT
 cvterm_id FROM cvterm WHERE cv_id = (SELECT cv_id FROM cv WHERE name =
 'fission_yeast_phenotype'))) UNION ALL SELECT rel.subject_id as cvterm_id,
 rel_type.name as rel_name, object.name as value from cvterm_relationship rel join cvterm rel_type on
 rel.type_id = rel_type.cvterm_id join cvterm object on rel.object_id = object.cvterm_id
 where rel.subject_id in (select subject_id from
 cvterm_relationship where object_id in (select cvterm_id from cvterm where
 cv_id = (select cv_id from cv where name = 'fission_yeast_phenotype'))) and
 rel_type.cv_id = (select cv_id from cv where name = 'fypo_extension_relations');"

echo make copies

for i in `seq 1 3`
do
  NEW_DB=pombase-build-$DB_NAME_SUFFIX-v$i
  echo $NEW_DB
  createdb -T $DB $NEW_DB
done
