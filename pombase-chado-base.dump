--
-- PostgreSQL database dump
--

-- Dumped from database version 14.2 (Ubuntu 14.2-1.pgdg21.10+1)
-- Dumped by pg_dump version 14.2 (Ubuntu 14.2-1.pgdg21.10+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION btree_gist;

--
-- Name: frange; Type: SCHEMA; Schema: -; Owner: kmr44
--

CREATE SCHEMA frange;


ALTER SCHEMA frange OWNER TO kmr44;

--
-- Name: genetic_code; Type: SCHEMA; Schema: -; Owner: kmr44
--

CREATE SCHEMA genetic_code;


ALTER SCHEMA genetic_code OWNER TO kmr44;

--
-- Name: so; Type: SCHEMA; Schema: -; Owner: kmr44
--

CREATE SCHEMA so;


ALTER SCHEMA so OWNER TO kmr44;

--
-- Name: feature_by_fx_type; Type: TYPE; Schema: public; Owner: kmr44
--

CREATE TYPE public.feature_by_fx_type AS (
	feature_id integer,
	depth integer
);


ALTER TYPE public.feature_by_fx_type OWNER TO kmr44;

--
-- Name: soi_type; Type: TYPE; Schema: public; Owner: kmr44
--

CREATE TYPE public.soi_type AS (
	type_id integer,
	subject_id integer,
	object_id integer
);


ALTER TYPE public.soi_type OWNER TO kmr44;

--
-- Name: _fill_featuregroup(integer, integer); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange._fill_featuregroup(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    groupid alias for $1;
    parentid alias for $2;
    g featuregroup%ROWTYPE;
BEGIN
    FOR g IN
        SELECT DISTINCT 0, fr.subject_id, fr.object_id, groupid, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand, 0
        FROM  feature_relationship AS fr,
              featureloc AS fl
        WHERE fr.object_id = parentid
          AND fr.subject_id = fl.feature_id
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (g.subject_id, g.object_id, g.group_id, g.srcfeature_id, g.fmin, g.fmax, g.strand, 0);
        PERFORM _fill_featuregroup(groupid,g.subject_id);
    END LOOP;
    RETURN 1;
END;
$_$;


ALTER FUNCTION frange._fill_featuregroup(integer, integer) OWNER TO kmr44;

--
-- Name: fill_featuregroup(); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.fill_featuregroup() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    p featuregroup%ROWTYPE;
    l featureloc%ROWTYPE;
    isa int;
    c int;
BEGIN
    TRUNCATE featuregroup;
    SELECT INTO isa cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');

    -- Recursion is the biggest performance killer for this function.
    -- We can dodge the first round of recursion using the "fr1 / GROUP BY" approach.
    -- Luckily, most feature graphs are only 2 levels deep, so most recursion is
    -- avoidable.

    RAISE NOTICE 'Loading root and singleton features.';
    FOR p IN
        SELECT DISTINCT 0, f.feature_id, f.feature_id, f.feature_id, srcfeature_id, fmin, fmax, strand, 1
        FROM feature AS f
        LEFT JOIN feature_relationship ON (f.feature_id = object_id)
        LEFT JOIN featureloc           ON (f.feature_id = featureloc.feature_id)
        WHERE f.feature_id NOT IN ( SELECT subject_id FROM feature_relationship )
          AND srcfeature_id IS NOT NULL
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (p.object_id, p.object_id, p.object_id, p.srcfeature_id, p.fmin, p.fmax, p.strand, 1);
    END LOOP;

    RAISE NOTICE 'Loading child features.  If your database contains grandchild';
    RAISE NOTICE 'features, they will be loaded recursively and may take a long time.';

    FOR p IN
        SELECT DISTINCT 0, fr0.subject_id, fr0.object_id, fr0.object_id, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand, count(fr1.subject_id)
        FROM  feature_relationship AS fr0
        LEFT JOIN feature_relationship AS fr1 ON ( fr0.subject_id = fr1.object_id),
        featureloc AS fl
        WHERE fr0.subject_id = fl.feature_id
          AND fr0.object_id IN (
                  SELECT f.feature_id
                  FROM feature AS f
                  LEFT JOIN feature_relationship ON (f.feature_id = object_id)
                  LEFT JOIN featureloc           ON (f.feature_id = featureloc.feature_id)
                  WHERE f.feature_id NOT IN ( SELECT subject_id FROM feature_relationship )
                    AND f.feature_id     IN ( SELECT object_id  FROM feature_relationship )
                    AND srcfeature_id IS NOT NULL
              )
        GROUP BY fr0.subject_id, fr0.object_id, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (p.subject_id, p.object_id, p.object_id, p.srcfeature_id, p.fmin, p.fmax, p.strand, 0);
        IF ( p.is_root > 0 ) THEN
            PERFORM _fill_featuregroup(p.subject_id,p.subject_id);
        END IF;
    END LOOP;

    RETURN 1;
END;   
$$;


ALTER FUNCTION frange.fill_featuregroup() OWNER TO kmr44;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: featuregroup; Type: TABLE; Schema: frange; Owner: kmr44
--

CREATE TABLE frange.featuregroup (
    featuregroup_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    group_id integer NOT NULL,
    srcfeature_id integer,
    fmin integer,
    fmax integer,
    strand integer,
    is_root integer DEFAULT 0 NOT NULL
);


ALTER TABLE frange.featuregroup OWNER TO kmr44;

--
-- Name: groupcontains(integer[], integer[], character varying[]); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupcontains(integer[], integer[], character varying[]) RETURNS SETOF frange.featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin <= mins[i]
                  AND fmax >= maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION frange.groupcontains(integer[], integer[], character varying[]) OWNER TO kmr44;

--
-- Name: groupcontains(integer, integer, character varying); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupcontains(integer, integer, character varying) RETURNS SETOF frange.featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin <= $1 AND fmax >= $2
$_$;


ALTER FUNCTION frange.groupcontains(integer, integer, character varying) OWNER TO kmr44;

--
-- Name: groupidentical(integer[], integer[], character varying[]); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupidentical(integer[], integer[], character varying[]) RETURNS SETOF frange.featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin = mins[i]
                  AND fmax = maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION frange.groupidentical(integer[], integer[], character varying[]) OWNER TO kmr44;

--
-- Name: groupidentical(integer, integer, character varying); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupidentical(integer, integer, character varying) RETURNS SETOF frange.featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin = $1 AND fmax = $2
$_$;


ALTER FUNCTION frange.groupidentical(integer, integer, character varying) OWNER TO kmr44;

--
-- Name: groupinside(integer[], integer[], character varying[]); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupinside(integer[], integer[], character varying[]) RETURNS SETOF frange.featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin >= mins[i]
                  AND fmax <= maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION frange.groupinside(integer[], integer[], character varying[]) OWNER TO kmr44;

--
-- Name: groupinside(integer, integer, character varying); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupinside(integer, integer, character varying) RETURNS SETOF frange.featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin >= $1 AND fmax <= $2
$_$;


ALTER FUNCTION frange.groupinside(integer, integer, character varying) OWNER TO kmr44;

--
-- Name: groupoverlaps(integer, integer); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupoverlaps(integer, integer) RETURNS SETOF frange.featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM featuregroup
  WHERE is_root = 1
    AND boxquery($1, $2) @ boxrange(fmin,fmax)
$_$;


ALTER FUNCTION frange.groupoverlaps(integer, integer) OWNER TO kmr44;

--
-- Name: groupoverlaps(integer[], integer[], character varying[]); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupoverlaps(integer[], integer[], character varying[]) RETURNS SETOF frange.featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION frange.groupoverlaps(integer[], integer[], character varying[]) OWNER TO kmr44;

--
-- Name: groupoverlaps(integer, integer, character varying); Type: FUNCTION; Schema: frange; Owner: kmr44
--

CREATE FUNCTION frange.groupoverlaps(integer, integer, character varying) RETURNS SETOF frange.featuregroup
    LANGUAGE sql
    AS $_$
  SELECT g2.*
  FROM  featuregroup g1,
        featuregroup g2
  WHERE g1.is_root = 1
    AND ( g1.srcfeature_id = g2.srcfeature_id OR g2.srcfeature_id IS NULL )
    AND g1.group_id = g2.group_id
    AND g1.srcfeature_id = (SELECT feature_id FROM feature WHERE uniquename = $3)
    AND boxquery($1, $2) @ boxrange(g1.fmin,g2.fmax)
$_$;


ALTER FUNCTION frange.groupoverlaps(integer, integer, character varying) OWNER TO kmr44;

--
-- Name: _fill_cvtermpath4node(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public._fill_cvtermpath4node(integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm cvterm_relationship%ROWTYPE;
    exist_c int;

BEGIN

    --- RAISE NOTICE 'depth=% root=%', depth,child_id;
    --- not check type_id as it may be null and not very meaningful in cvtermpath when pathdistance > 1
    SELECT INTO exist_c count(*) FROM cvtermpath WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id AND pathdistance = depth;

    IF (exist_c = 0) THEN
        INSERT INTO cvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(origin, child_id, cvid, typeid, depth);
    END IF;
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = child_id LOOP
        PERFORM _fill_cvtermpath4node(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
    END LOOP;
    RETURN 1;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4node(integer, integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: _fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public._fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm cvterm_relationship%ROWTYPE;
    exist_c int;
    ccount  int;
    ecount  int;
    rtn     int;
BEGIN

    EXECUTE 'SELECT * FROM tmpcvtermpath p1, tmpcvtermpath p2 WHERE p1.subject_id=p2.object_id AND p1.object_id=p2.subject_id AND p1.object_id = '|| origin || ' AND p2.subject_id = ' || child_id || 'AND ' || depth || '> 0';
    GET DIAGNOSTICS ccount = ROW_COUNT;
    IF (ccount > 0) THEN
        --RAISE EXCEPTION 'FOUND CYCLE: node % on cycle path',origin;
        RETURN origin;
    END IF;

    EXECUTE 'SELECT * FROM tmpcvtermpath WHERE cv_id = ' || cvid || ' AND object_id = ' || origin || ' AND subject_id = ' || child_id || ' AND ' || origin || '<>' || child_id;
    GET DIAGNOSTICS ecount = ROW_COUNT;
    IF (ecount > 0) THEN
        --RAISE NOTICE 'FOUND TWICE (node), will check root obj % subj %',origin, child_id;
        SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(child_id, cvid);
        IF (rtn > 0) THEN
            RETURN rtn;
        END IF;
    END IF;

    EXECUTE 'SELECT * FROM tmpcvtermpath WHERE cv_id = ' || cvid || ' AND object_id = ' || origin || ' AND subject_id = ' || child_id || ' AND pathdistance = ' || depth;
    GET DIAGNOSTICS exist_c = ROW_COUNT;
    IF (exist_c = 0) THEN
        EXECUTE 'INSERT INTO tmpcvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(' || origin || ', ' || child_id || ', ' || cvid || ', ' || typeid || ', ' || depth || ')';
    END IF;

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = child_id LOOP
        --RAISE NOTICE 'DOING for node, % %', origin, cterm.subject_id;
        SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
        IF (rtn > 0) THEN
            RETURN rtn;
        END IF;
    END LOOP;
    RETURN 0;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: _fill_cvtermpath4root(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public._fill_cvtermpath4root(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    cterm cvterm_relationship%ROWTYPE;
    child cvterm_relationship%ROWTYPE;

BEGIN

    SELECT INTO ttype cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');
    PERFORM _fill_cvtermpath4node(rootid, rootid, cvid, ttype, 0);
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = rootid LOOP
        PERFORM _fill_cvtermpath4root(cterm.subject_id, cvid);
        -- RAISE NOTICE 'DONE for term, %', cterm.subject_id;
    END LOOP;
    RETURN 1;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4root(integer, integer) OWNER TO kmr44;

--
-- Name: _fill_cvtermpath4root2detect_cycle(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public._fill_cvtermpath4root2detect_cycle(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    ccount int;
    cterm cvterm_relationship%ROWTYPE;
    child cvterm_relationship%ROWTYPE;
    rtn     int;
BEGIN

    SELECT INTO ttype cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');
    SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(rootid, rootid, cvid, ttype, 0);
    IF (rtn > 0) THEN
        RETURN rtn;
    END IF;
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = rootid LOOP
        EXECUTE 'SELECT * FROM tmpcvtermpath p1, tmpcvtermpath p2 WHERE p1.subject_id=p2.object_id AND p1.object_id=p2.subject_id AND p1.object_id=' || rootid || ' AND p1.subject_id=' || cterm.subject_id;
        GET DIAGNOSTICS ccount = ROW_COUNT;
        IF (ccount > 0) THEN
            --RAISE NOTICE 'FOUND TWICE (root), will check root obj % subj %',rootid,cterm.subject_id;
            SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(rootid, cterm.subject_id, cvid, ttype, 0);
            IF (rtn > 0) THEN
                RETURN rtn;
            END IF;
        ELSE
            SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(cterm.subject_id, cvid);
            IF (rtn > 0) THEN
                RETURN rtn;
            END IF;
        END IF;
    END LOOP;
    RETURN 0;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4root2detect_cycle(integer, integer) OWNER TO kmr44;

--
-- Name: _fill_cvtermpath4soi(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public._fill_cvtermpath4soi(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    cterm soi_type%ROWTYPE;

BEGIN
    
    SELECT INTO ttype cvterm_id FROM cvterm WHERE name = 'isa';
    --RAISE NOTICE 'got ttype %',ttype;
    PERFORM _fill_cvtermpath4soinode(rootid, rootid, cvid, ttype, 0);
    FOR cterm IN SELECT tmp_type AS type_id, subject_id FROM tmpcvtr WHERE object_id = rootid LOOP
        PERFORM _fill_cvtermpath4soi(cterm.subject_id, cvid);
    END LOOP;
    RETURN 1;
END;   
$_$;


ALTER FUNCTION public._fill_cvtermpath4soi(integer, integer) OWNER TO kmr44;

--
-- Name: _fill_cvtermpath4soinode(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public._fill_cvtermpath4soinode(integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm soi_type%ROWTYPE;
    exist_c int;

BEGIN

    --RAISE NOTICE 'depth=% o=%, root=%, cv=%, t=%', depth,origin,child_id,cvid,typeid;
    SELECT INTO exist_c count(*) FROM cvtermpath WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id AND pathdistance = depth;
    --- longest path
    IF (exist_c > 0) THEN
        UPDATE cvtermpath SET pathdistance = depth WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id;
    ELSE
        INSERT INTO cvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(origin, child_id, cvid, typeid, depth);
    END IF;

    FOR cterm IN SELECT tmp_type AS type_id, subject_id FROM tmpcvtr WHERE object_id = child_id LOOP
        PERFORM _fill_cvtermpath4soinode(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
    END LOOP;
    RETURN 1;
END;
$_$;


ALTER FUNCTION public._fill_cvtermpath4soinode(integer, integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: cvtermpath; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cvtermpath (
    cvtermpath_id integer NOT NULL,
    type_id integer,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    cv_id integer NOT NULL,
    pathdistance integer
);


ALTER TABLE public.cvtermpath OWNER TO kmr44;

--
-- Name: TABLE cvtermpath; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.cvtermpath IS 'The reflexive transitive closure of
the cvterm_relationship relation.';


--
-- Name: COLUMN cvtermpath.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvtermpath.type_id IS 'The relationship type that
this is a closure over. If null, then this is a closure over ALL
relationship types. If non-null, then this references a relationship
cvterm - note that the closure will apply to both this relationship
AND the OBO_REL:is_a (subclass) relationship.';


--
-- Name: COLUMN cvtermpath.cv_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvtermpath.cv_id IS 'Closures will mostly be within
one cv. If the closure of a relationship traverses a cv, then this
refers to the cv of the object_id cvterm.';


--
-- Name: COLUMN cvtermpath.pathdistance; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvtermpath.pathdistance IS 'The number of steps
required to get from the subject cvterm to the object cvterm, counting
from zero (reflexive relationship).';


--
-- Name: _get_all_object_ids(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public._get_all_object_ids(integer) RETURNS SETOF public.cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;
BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM _get_all_object_ids(cterm.object_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public._get_all_object_ids(integer) OWNER TO kmr44;

--
-- Name: _get_all_subject_ids(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public._get_all_subject_ids(integer) RETURNS SETOF public.cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;
BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = root LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM _get_all_subject_ids(cterm.subject_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public._get_all_subject_ids(integer) OWNER TO kmr44;

--
-- Name: complement_residues(text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.complement_residues(text) RETURNS text
    LANGUAGE sql
    AS $_$SELECT (translate($1, 
                   'acgtrymkswhbvdnxACGTRYMKSWHBVDNX',
                   'tgcayrkmswdvbhnxTGCAYRKMSWDVBHNX'))$_$;


ALTER FUNCTION public.complement_residues(text) OWNER TO kmr44;

--
-- Name: concat_pair(text, text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.concat_pair(text, text) RETURNS text
    LANGUAGE sql
    AS $_$SELECT $1 || $2$_$;


ALTER FUNCTION public.concat_pair(text, text) OWNER TO kmr44;

--
-- Name: create_point(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.create_point(integer, integer) RETURNS point
    LANGUAGE sql
    AS $_$SELECT point ($1, $2)$_$;


ALTER FUNCTION public.create_point(integer, integer) OWNER TO kmr44;

--
-- Name: create_soi(); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.create_soi() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    parent soi_type%ROWTYPE;
    isa_id cvterm.cvterm_id%TYPE;
    soi_term TEXT := 'soi';
    soi_def TEXT := 'ontology of SO feature instantiated in database';
    soi_cvid INTEGER;
    soiterm_id INTEGER;
    pcount INTEGER;
    count INTEGER := 0;
    cquery TEXT;
BEGIN

    SELECT INTO isa_id cvterm_id FROM cvterm WHERE name = 'isa';

    SELECT INTO soi_cvid cv_id FROM cv WHERE name = soi_term;
    IF (soi_cvid > 0) THEN
        DELETE FROM cvtermpath WHERE cv_id = soi_cvid;
        DELETE FROM cvterm WHERE cv_id = soi_cvid;
    ELSE
        INSERT INTO cv (name, definition) VALUES(soi_term, soi_def);
    END IF;
    SELECT INTO soi_cvid cv_id FROM cv WHERE name = soi_term;
    INSERT INTO cvterm (name, cv_id) VALUES(soi_term, soi_cvid);
    SELECT INTO soiterm_id cvterm_id FROM cvterm WHERE name = soi_term;

    CREATE TEMP TABLE tmpcvtr (tmp_type INT, type_id INT, subject_id INT, object_id INT);
    CREATE UNIQUE INDEX u_tmpcvtr ON tmpcvtr(subject_id, object_id);

    INSERT INTO tmpcvtr (tmp_type, type_id, subject_id, object_id)
        SELECT DISTINCT isa_id, soiterm_id, f.type_id, soiterm_id FROM feature f, cvterm t
        WHERE f.type_id = t.cvterm_id AND f.type_id > 0;
    EXECUTE 'select * from tmpcvtr where type_id = ' || soiterm_id || ';';
    get diagnostics pcount = row_count;
    raise notice 'all types in feature %',pcount;
--- do it hard way, delete any child feature type from above (NOT IN clause did not work)
    FOR parent IN SELECT DISTINCT 0, t.cvterm_id, 0 FROM feature c, feature_relationship fr, cvterm t
            WHERE t.cvterm_id = c.type_id AND c.feature_id = fr.subject_id LOOP
        DELETE FROM tmpcvtr WHERE type_id = soiterm_id and object_id = soiterm_id
            AND subject_id = parent.subject_id;
    END LOOP;
    EXECUTE 'select * from tmpcvtr where type_id = ' || soiterm_id || ';';
    get diagnostics pcount = row_count;
    raise notice 'all types in feature after delete child %',pcount;

    --- create feature type relationship (store in tmpcvtr)
    CREATE TEMP TABLE tmproot (cv_id INTEGER not null, cvterm_id INTEGER not null, status INTEGER DEFAULT 0);
    cquery := 'SELECT * FROM tmproot tmp WHERE tmp.status = 0;';
    ---temp use tmpcvtr to hold instantiated SO relationship for speed
    ---use soterm_id as type_id, will delete from tmpcvtr
    ---us tmproot for this as well
    INSERT INTO tmproot (cv_id, cvterm_id, status) SELECT DISTINCT soi_cvid, c.subject_id, 0 FROM tmpcvtr c
        WHERE c.object_id = soiterm_id;
    EXECUTE cquery;
    GET DIAGNOSTICS pcount = ROW_COUNT;
    WHILE (pcount > 0) LOOP
        RAISE NOTICE 'num child temp (to be inserted) in tmpcvtr: %',pcount;
        INSERT INTO tmpcvtr (tmp_type, type_id, subject_id, object_id)
            SELECT DISTINCT fr.type_id, soiterm_id, c.type_id, p.cvterm_id FROM feature c, feature_relationship fr,
            tmproot p, feature pf, cvterm t WHERE c.feature_id = fr.subject_id AND fr.object_id = pf.feature_id
            AND p.cvterm_id = pf.type_id AND t.cvterm_id = c.type_id AND p.status = 0;
        UPDATE tmproot SET status = 1 WHERE status = 0;
        INSERT INTO tmproot (cv_id, cvterm_id, status)
            SELECT DISTINCT soi_cvid, c.type_id, 0 FROM feature c, feature_relationship fr,
            tmproot tmp, feature p, cvterm t WHERE c.feature_id = fr.subject_id AND fr.object_id = p.feature_id
            AND tmp.cvterm_id = p.type_id AND t.cvterm_id = c.type_id AND tmp.status = 1;
        UPDATE tmproot SET status = 2 WHERE status = 1;
        EXECUTE cquery;
        GET DIAGNOSTICS pcount = ROW_COUNT; 
    END LOOP;
    DELETE FROM tmproot;

    ---get transitive closure for soi
    PERFORM _fill_cvtermpath4soi(soiterm_id, soi_cvid);

    DROP TABLE tmpcvtr;
    DROP TABLE tmproot;

    RETURN 1;
END;
$$;


ALTER FUNCTION public.create_soi() OWNER TO kmr44;

--
-- Name: feature; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature (
    feature_id integer NOT NULL,
    dbxref_id integer,
    organism_id integer NOT NULL,
    name character varying(255),
    uniquename text NOT NULL,
    residues text,
    seqlen integer,
    md5checksum character(32),
    type_id integer NOT NULL,
    is_analysis boolean DEFAULT false NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT now() NOT NULL,
    timelastmodified timestamp without time zone DEFAULT now() NOT NULL
);
ALTER TABLE ONLY public.feature ALTER COLUMN residues SET STORAGE EXTERNAL;


ALTER TABLE public.feature OWNER TO kmr44;

--
-- Name: TABLE feature; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature IS 'A feature is a biological sequence or a
section of a biological sequence, or a collection of such
sections. Examples include genes, exons, transcripts, regulatory
regions, polypeptides, protein domains, chromosome sequences, sequence
variations, cross-genome match regions such as hits and HSPs and so
on; see the Sequence Ontology for more. The combination of
organism_id, uniquename and type_id should be unique.';


--
-- Name: COLUMN feature.dbxref_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.dbxref_id IS 'An optional primary public stable
identifier for this feature. Secondary identifiers and external
dbxrefs go in the table feature_dbxref.';


--
-- Name: COLUMN feature.organism_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.organism_id IS 'The organism to which this feature
belongs. This column is mandatory.';


--
-- Name: COLUMN feature.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.name IS 'The optional human-readable common name for
a feature, for display purposes.';


--
-- Name: COLUMN feature.uniquename; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.uniquename IS 'The unique name for a feature; may
not be necessarily be particularly human-readable, although this is
preferred. This name must be unique for this type of feature within
this organism.';


--
-- Name: COLUMN feature.residues; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.residues IS 'A sequence of alphabetic characters
representing biological residues (nucleic acids, amino acids). This
column does not need to be manifested for all features; it is optional
for features such as exons where the residues can be derived from the
featureloc. It is recommended that the value for this column be
manifested for features which may may non-contiguous sublocations (e.g.
transcripts), since derivation at query time is non-trivial. For
expressed sequence, the DNA sequence should be used rather than the
RNA sequence. The default storage method for the residues column is
EXTERNAL, which will store it uncompressed to make substring operations
faster.';


--
-- Name: COLUMN feature.seqlen; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.seqlen IS 'The length of the residue feature. See
column:residues. This column is partially redundant with the residues
column, and also with featureloc. This column is required because the
location may be unknown and the residue sequence may not be
manifested, yet it may be desirable to store and query the length of
the feature. The seqlen should always be manifested where the length
of the sequence is known.';


--
-- Name: COLUMN feature.md5checksum; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.md5checksum IS 'The 32-character checksum of the sequence,
calculated using the MD5 algorithm. This is practically guaranteed to
be unique for any feature. This column thus acts as a unique
identifier on the mathematical sequence.';


--
-- Name: COLUMN feature.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.type_id IS 'A required reference to a table:cvterm
giving the feature type. This will typically be a Sequence Ontology
identifier. This column is thus used to subclass the feature table.';


--
-- Name: COLUMN feature.is_analysis; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.is_analysis IS 'Boolean indicating whether this
feature is annotated or the result of an automated analysis. Analysis
results also use the companalysis module. Note that the dividing line
between analysis and annotation may be fuzzy, this should be determined on
a per-project basis in a consistent manner. One requirement is that
there should only be one non-analysis version of each wild-type gene
feature in a genome, whereas the same gene feature can be predicted
multiple times in different analyses.';


--
-- Name: COLUMN feature.is_obsolete; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.is_obsolete IS 'Boolean indicating whether this
feature has been obsoleted. Some chado instances may choose to simply
remove the feature altogether, others may choose to keep an obsolete
row in the table.';


--
-- Name: COLUMN feature.timeaccessioned; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.timeaccessioned IS 'For handling object
accession or modification timestamps (as opposed to database auditing data,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado.';


--
-- Name: COLUMN feature.timelastmodified; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature.timelastmodified IS 'For handling object
accession or modification timestamps (as opposed to database auditing data,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado.';


--
-- Name: feature_disjoint_from(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.feature_disjoint_from(integer) RETURNS SETOF public.feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id = $1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax < y.fmin OR x.fmin > y.fmax ) $_$;


ALTER FUNCTION public.feature_disjoint_from(integer) OWNER TO kmr44;

--
-- Name: feature_overlaps(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.feature_overlaps(integer) RETURNS SETOF public.feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id = $1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax >= y.fmin AND x.fmin <= y.fmax ) $_$;


ALTER FUNCTION public.feature_overlaps(integer) OWNER TO kmr44;

--
-- Name: featureloc; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.featureloc (
    featureloc_id integer NOT NULL,
    feature_id integer NOT NULL,
    srcfeature_id integer,
    fmin integer,
    is_fmin_partial boolean DEFAULT false NOT NULL,
    fmax integer,
    is_fmax_partial boolean DEFAULT false NOT NULL,
    strand smallint,
    phase integer,
    residue_info text,
    locgroup integer DEFAULT 0 NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    CONSTRAINT featureloc_c2 CHECK ((fmin <= fmax))
);


ALTER TABLE public.featureloc OWNER TO kmr44;

--
-- Name: TABLE featureloc; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.featureloc IS 'The location of a feature relative to
another feature. Important: interbase coordinates are used. This is
vital as it allows us to represent zero-length features e.g. splice
sites, insertion points without an awkward fuzzy system. Features
typically have exactly ONE location, but this need not be the
case. Some features may not be localized (e.g. a gene that has been
characterized genetically but no sequence or molecular information is
available). Note on multiple locations: Each feature can have 0 or
more locations. Multiple locations do NOT indicate non-contiguous
locations (if a feature such as a transcript has a non-contiguous
location, then the subfeatures such as exons should always be
manifested). Instead, multiple featurelocs for a feature designate
alternate locations or grouped locations; for instance, a feature
designating a blast hit or hsp will have two locations, one on the
query feature, one on the subject feature. Features representing
sequence variation could have alternate locations instantiated on a
feature on the mutant strain. The column:rank is used to
differentiate these different locations. Reflexive locations should
never be stored - this is for -proper- (i.e. non-self) locations only; nothing should be located relative to itself.';


--
-- Name: COLUMN featureloc.feature_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.feature_id IS 'The feature that is being located. Any feature can have zero or more featurelocs.';


--
-- Name: COLUMN featureloc.srcfeature_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.srcfeature_id IS 'The source feature which this location is relative to. Every location is relative to another feature (however, this column is nullable, because the srcfeature may not be known). All locations are -proper- that is, nothing should be located relative to itself. No cycles are allowed in the featureloc graph.';


--
-- Name: COLUMN featureloc.fmin; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.fmin IS 'The leftmost/minimal boundary in the linear range represented by the featureloc. Sometimes (e.g. in Bioperl) this is called -start- although this is confusing because it does not necessarily represent the 5-prime coordinate. Important: This is space-based (interbase) coordinates, counting from zero. To convert this to the leftmost position in a base-oriented system (eg GFF, Bioperl), add 1 to fmin.';


--
-- Name: COLUMN featureloc.is_fmin_partial; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.is_fmin_partial IS 'This is typically
false, but may be true if the value for column:fmin is inaccurate or
the leftmost part of the range is unknown/unbounded.';


--
-- Name: COLUMN featureloc.fmax; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.fmax IS 'The rightmost/maximal boundary in the linear range represented by the featureloc. Sometimes (e.g. in bioperl) this is called -end- although this is confusing because it does not necessarily represent the 3-prime coordinate. Important: This is space-based (interbase) coordinates, counting from zero. No conversion is required to go from fmax to the rightmost coordinate in a base-oriented system that counts from 1 (e.g. GFF, Bioperl).';


--
-- Name: COLUMN featureloc.is_fmax_partial; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.is_fmax_partial IS 'This is typically
false, but may be true if the value for column:fmax is inaccurate or
the rightmost part of the range is unknown/unbounded.';


--
-- Name: COLUMN featureloc.strand; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.strand IS 'The orientation/directionality of the
location. Should be 0, -1 or +1.';


--
-- Name: COLUMN featureloc.phase; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.phase IS 'Phase of translation with
respect to srcfeature_id.
Values are 0, 1, 2. It may not be possible to manifest this column for
some features such as exons, because the phase is dependant on the
spliceform (the same exon can appear in multiple spliceforms). This column is mostly useful for predicted exons and CDSs.';


--
-- Name: COLUMN featureloc.residue_info; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.residue_info IS 'Alternative residues,
when these differ from feature.residues. For instance, a SNP feature
located on a wild and mutant protein would have different alternative residues.
for alignment/similarity features, the alternative residues is used to
represent the alignment string (CIGAR format). Note on variation
features; even if we do not want to instantiate a mutant
chromosome/contig feature, we can still represent a SNP etc with 2
locations, one (rank 0) on the genome, the other (rank 1) would have
most fields null, except for alternative residues.';


--
-- Name: COLUMN featureloc.locgroup; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.locgroup IS 'This is used to manifest redundant,
derivable extra locations for a feature. The default locgroup=0 is
used for the DIRECT location of a feature. Important: most Chado users may
never use featurelocs WITH logroup > 0. Transitively derived locations
are indicated with locgroup > 0. For example, the position of an exon on
a BAC and in global chromosome coordinates. This column is used to
differentiate these groupings of locations. The default locgroup 0
is used for the main or primary location, from which the others can be
derived via coordinate transformations. Another example of redundant
locations is storing ORF coordinates relative to both transcript and
genome. Redundant locations open the possibility of the database
getting into inconsistent states; this schema gives us the flexibility
of both warehouse instantiations with redundant locations (easier for
querying) and management instantiations with no redundant
locations. An example of using both locgroup and rank: imagine a
feature indicating a conserved region between the chromosomes of two
different species. We may want to keep redundant locations on both
contigs and chromosomes. We would thus have 4 locations for the single
conserved region feature - two distinct locgroups (contig level and
chromosome level) and two distinct ranks (for the two species).';


--
-- Name: COLUMN featureloc.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureloc.rank IS 'Used when a feature has >1
location, otherwise the default rank 0 is used. Some features (e.g.
blast hits and HSPs) have two locations - one on the query and one on
the subject. Rank is used to differentiate these. Rank=0 is always
used for the query, Rank=1 for the subject. For multiple alignments,
assignment of rank is arbitrary. Rank is also used for
sequence_variant features, such as SNPs. Rank=0 indicates the wildtype
(or baseline) feature, Rank=1 indicates the mutant (or compared) feature.';


--
-- Name: feature_subalignments(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.feature_subalignments(integer) RETURNS SETOF public.featureloc
    LANGUAGE plpgsql
    AS $_$
DECLARE
  return_data featureloc%ROWTYPE;
  f_id ALIAS FOR $1;
  feature_data feature%rowtype;
  featureloc_data featureloc%rowtype;

  s text;

  fmin integer;
  slen integer;
BEGIN
  --RAISE NOTICE 'feature_id is %', featureloc_data.feature_id;
  SELECT INTO feature_data * FROM feature WHERE feature_id = f_id;

  FOR featureloc_data IN SELECT * FROM featureloc WHERE feature_id = f_id LOOP

    --RAISE NOTICE 'fmin is %', featureloc_data.fmin;

    return_data.feature_id      = f_id;
    return_data.srcfeature_id   = featureloc_data.srcfeature_id;
    return_data.is_fmin_partial = featureloc_data.is_fmin_partial;
    return_data.is_fmax_partial = featureloc_data.is_fmax_partial;
    return_data.strand          = featureloc_data.strand;
    return_data.phase           = featureloc_data.phase;
    return_data.residue_info    = featureloc_data.residue_info;
    return_data.locgroup        = featureloc_data.locgroup;
    return_data.rank            = featureloc_data.rank;

    s = feature_data.residues;
    fmin = featureloc_data.fmin;
    slen = char_length(s);

    WHILE char_length(s) LOOP
      --RAISE NOTICE 'residues is %', s;

      --trim off leading match
      s = trim(leading '|ATCGNatcgn' from s);
      --if leading match detected
      IF slen > char_length(s) THEN
        return_data.fmin = fmin;
        return_data.fmax = featureloc_data.fmin + (slen - char_length(s));

        --if the string started with a match, return it,
        --otherwise, trim the gaps first (ie do not return this iteration)
        RETURN NEXT return_data;
      END IF;

      --trim off leading gap
      s = trim(leading '-' from s);

      fmin = featureloc_data.fmin + (slen - char_length(s));
    END LOOP;
  END LOOP;

  RETURN;

END;
$_$;


ALTER FUNCTION public.feature_subalignments(integer) OWNER TO kmr44;

--
-- Name: featureloc_slice(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.featureloc_slice(integer, integer) RETURNS SETOF public.featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$;


ALTER FUNCTION public.featureloc_slice(integer, integer) OWNER TO kmr44;

--
-- Name: featureloc_slice(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.featureloc_slice(integer, integer, integer) RETURNS SETOF public.featureloc
    LANGUAGE sql
    AS $_$SELECT * 
   FROM featureloc 
   WHERE boxquery($1, $2, $3) && boxrange(srcfeature_id,fmin,fmax)$_$;


ALTER FUNCTION public.featureloc_slice(integer, integer, integer) OWNER TO kmr44;

--
-- Name: featureloc_slice(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.featureloc_slice(character varying, integer, integer) RETURNS SETOF public.featureloc
    LANGUAGE sql
    AS $_$SELECT featureloc.* 
   FROM featureloc 
   INNER JOIN feature AS srcf ON (srcf.feature_id = featureloc.srcfeature_id)
   WHERE boxquery($2, $3) @ boxrange(fmin,fmax)
   AND srcf.name = $1 $_$;


ALTER FUNCTION public.featureloc_slice(character varying, integer, integer) OWNER TO kmr44;

--
-- Name: featureslice(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.featureslice(integer, integer) RETURNS SETOF public.featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$;


ALTER FUNCTION public.featureslice(integer, integer) OWNER TO kmr44;

--
-- Name: fill_cvtermpath(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.fill_cvtermpath(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;

BEGIN

    DELETE FROM cvtermpath WHERE cv_id = cvid;

    FOR root IN SELECT DISTINCT t.* from cvterm t LEFT JOIN cvterm_relationship r ON (t.cvterm_id = r.subject_id) INNER JOIN cvterm_relationship r2 ON (t.cvterm_id = r2.object_id) WHERE t.cv_id = cvid AND r.subject_id is null LOOP
        PERFORM _fill_cvtermpath4root(root.cvterm_id, root.cv_id);
    END LOOP;
    RETURN 1;
END;   
$_$;


ALTER FUNCTION public.fill_cvtermpath(integer) OWNER TO kmr44;

--
-- Name: fill_cvtermpath(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.fill_cvtermpath(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvname alias for $1;
    cv_id   int;
    rtn     int;
BEGIN

    SELECT INTO cv_id cv.cv_id from cv WHERE cv.name = cvname;
    SELECT INTO rtn fill_cvtermpath(cv_id);
    RETURN rtn;
END;   
$_$;


ALTER FUNCTION public.fill_cvtermpath(character varying) OWNER TO kmr44;

--
-- Name: get_all_object_ids(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_all_object_ids(integer) RETURNS SETOF public.cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    exist_c int;
BEGIN


    SELECT INTO exist_c count(*) FROM cvtermpath WHERE object_id = leaf and pathdistance <= 0;
    IF (exist_c > 0) THEN
        FOR cterm IN SELECT * FROM cvtermpath WHERE subject_id = leaf AND pathdistance > 0 LOOP
            RETURN NEXT cterm;
        END LOOP;
    ELSE
        FOR cterm IN SELECT * FROM _get_all_object_ids(leaf) LOOP
            RETURN NEXT cterm;
        END LOOP;
    END IF;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_all_object_ids(integer) OWNER TO kmr44;

--
-- Name: get_all_subject_ids(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_all_subject_ids(integer) RETURNS SETOF public.cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    exist_c int;
BEGIN

    SELECT INTO exist_c count(*) FROM cvtermpath WHERE object_id = root and pathdistance <= 0;
    IF (exist_c > 0) THEN
        FOR cterm IN SELECT * FROM cvtermpath WHERE object_id = root and pathdistance > 0 LOOP
            RETURN NEXT cterm;
        END LOOP;
    ELSE
        FOR cterm IN SELECT * FROM _get_all_subject_ids(root) LOOP
            RETURN NEXT cterm;
        END LOOP;
    END IF;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_all_subject_ids(integer) OWNER TO kmr44;

--
-- Name: get_cv_id_for_feature(); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_cv_id_for_feature() RETURNS integer
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='sequence'$$;


ALTER FUNCTION public.get_cv_id_for_feature() OWNER TO kmr44;

--
-- Name: get_cv_id_for_feature_relationsgip(); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_cv_id_for_feature_relationsgip() RETURNS integer
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='relationship'$$;


ALTER FUNCTION public.get_cv_id_for_feature_relationsgip() OWNER TO kmr44;

--
-- Name: get_cv_id_for_featureprop(); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_cv_id_for_featureprop() RETURNS integer
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='feature_property'$$;


ALTER FUNCTION public.get_cv_id_for_featureprop() OWNER TO kmr44;

--
-- Name: get_cycle_cvterm_id(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_cycle_cvterm_id(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;
    rtn     int;
BEGIN

    CREATE TEMP TABLE tmpcvtermpath(object_id int, subject_id int, cv_id int, type_id int, pathdistance int);
    CREATE INDEX tmp_cvtpath1 ON tmpcvtermpath(object_id, subject_id);

    FOR root IN SELECT DISTINCT t.* from cvterm t LEFT JOIN cvterm_relationship r ON (t.cvterm_id = r.subject_id) INNER JOIN cvterm_relationship r2 ON (t.cvterm_id = r2.object_id) WHERE t.cv_id = cvid AND r.subject_id is null LOOP
        SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(root.cvterm_id, root.cv_id);
        IF (rtn > 0) THEN
            DROP TABLE tmpcvtermpath;
            RETURN rtn;
        END IF;
    END LOOP;
    DROP TABLE tmpcvtermpath;
    RETURN 0;
END;   
$_$;


ALTER FUNCTION public.get_cycle_cvterm_id(integer) OWNER TO kmr44;

--
-- Name: get_cycle_cvterm_id(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_cycle_cvterm_id(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvname alias for $1;
    cv_id int;
    rtn int;
BEGIN

    SELECT INTO cv_id cv.cv_id from cv WHERE cv.name = cvname;
    SELECT INTO rtn  get_cycle_cvterm_id(cv_id);

    RETURN rtn;
END;   
$_$;


ALTER FUNCTION public.get_cycle_cvterm_id(character varying) OWNER TO kmr44;

--
-- Name: get_cycle_cvterm_id(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_cycle_cvterm_id(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    rootid alias for $2;
    rtn     int;
BEGIN

    CREATE TEMP TABLE tmpcvtermpath(object_id int, subject_id int, cv_id int, type_id int, pathdistance int);
    CREATE INDEX tmp_cvtpath1 ON tmpcvtermpath(object_id, subject_id);

    SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(rootid, cvid);
    IF (rtn > 0) THEN
        DROP TABLE tmpcvtermpath;
        RETURN rtn;
    END IF;
    DROP TABLE tmpcvtermpath;
    RETURN 0;
END;   
$_$;


ALTER FUNCTION public.get_cycle_cvterm_id(integer, integer) OWNER TO kmr44;

--
-- Name: get_cycle_cvterm_ids(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_cycle_cvterm_ids(integer) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;
    rtn     int;
BEGIN


    FOR root IN SELECT DISTINCT t.* from cvterm t WHERE cv_id = cvid LOOP
        SELECT INTO rtn get_cycle_cvterm_id(cvid,root.cvterm_id);
        IF (rtn > 0) THEN
            RETURN NEXT rtn;
        END IF;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_cycle_cvterm_ids(integer) OWNER TO kmr44;

--
-- Name: get_feature_id(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_id(character varying, character varying, character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
  SELECT feature_id 
  FROM feature
  WHERE uniquename=$1
    AND type_id=get_feature_type_id($2)
    AND organism_id=get_organism_id($3)
 $_$;


ALTER FUNCTION public.get_feature_id(character varying, character varying, character varying) OWNER TO kmr44;

--
-- Name: get_feature_ids(text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids(text) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    sql alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;
    myrc3 feature_by_fx_type%ROWTYPE;

BEGIN

    FOR myrc IN EXECUTE sql LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_up_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
        FOR myrc3 IN SELECT * FROM get_sub_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc3;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids(text) OWNER TO kmr44;

--
-- Name: get_feature_ids_by_child_count(character varying, character varying, integer, character varying, character); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids_by_child_count(character varying, character varying, integer, character varying, character) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    ptype alias for $1;
    ctype alias for $2;
    ccount alias for $3;
    operator alias for $4;
    is_an alias for $5;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type %ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id
        FROM feature f INNER join (select count(*) as c, p.feature_id FROM feature p
        INNER join cvterm pt ON (p.type_id = pt.cvterm_id) INNER join feature_relationship fr
        ON (p.feature_id = fr.object_id) INNER join feature c ON (c.feature_id = fr.subject_id)
        INNER join cvterm ct ON (c.type_id = ct.cvterm_id)
        WHERE pt.name = ' || quote_literal(ptype) || ' AND ct.name = ' || quote_literal(ctype)
        || ' AND p.is_analysis = ' || quote_literal(is_an) || ' group by p.feature_id) as cq
        ON (cq.feature_id = f.feature_id) WHERE cq.c ' || operator || ccount || ';';
    ---RAISE NOTICE '%', query; 

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_child_count(character varying, character varying, integer, character varying, character) OWNER TO kmr44;

--
-- Name: get_feature_ids_by_ont(character varying, character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids_by_ont(character varying, character varying) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    aspect alias for $1;
    term alias for $2;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT fcvt.feature_id 
        FROM feature_cvterm fcvt, cv, cvterm t WHERE cv.cv_id = t.cv_id AND
        t.cvterm_id = fcvt.cvterm_id AND cv.name = ' || quote_literal(aspect) ||
        ' AND t.name = ' || quote_literal(term) || ';';
    IF (STRPOS(term, '%') > 0) THEN
        query := 'SELECT DISTINCT fcvt.feature_id 
            FROM feature_cvterm fcvt, cv, cvterm t WHERE cv.cv_id = t.cv_id AND
            t.cvterm_id = fcvt.cvterm_id AND cv.name = ' || quote_literal(aspect) ||
            ' AND t.name like ' || quote_literal(term) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_ont(character varying, character varying) OWNER TO kmr44;

--
-- Name: get_feature_ids_by_ont_root(character varying, character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids_by_ont_root(character varying, character varying) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    aspect alias for $1;
    term alias for $2;
    query TEXT;
    subquery TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    subquery := 'SELECT t.cvterm_id FROM cv, cvterm t WHERE cv.cv_id = t.cv_id 
        AND cv.name = ' || quote_literal(aspect) || ' AND t.name = ' || quote_literal(term) || ';';
    IF (STRPOS(term, '%') > 0) THEN
        subquery := 'SELECT t.cvterm_id FROM cv, cvterm t WHERE cv.cv_id = t.cv_id 
            AND cv.name = ' || quote_literal(aspect) || ' AND t.name like ' || quote_literal(term) || ';';
    END IF;
    query := 'SELECT DISTINCT fcvt.feature_id 
        FROM feature_cvterm fcvt INNER JOIN (SELECT cvterm_id FROM get_it_sub_cvterm_ids(' || quote_literal(subquery) || ')) AS ont ON (fcvt.cvterm_id = ont.cvterm_id);';

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_ont_root(character varying, character varying) OWNER TO kmr44;

--
-- Name: get_feature_ids_by_property(character varying, character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids_by_property(character varying, character varying) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    p_type alias for $1;
    p_val alias for $2;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT fprop.feature_id 
        FROM featureprop fprop, cvterm t WHERE t.cvterm_id = fprop.type_id AND t.name = ' ||
        quote_literal(p_type) || ' AND fprop.value = ' || quote_literal(p_val) || ';';
    IF (STRPOS(p_val, '%') > 0) THEN
        query := 'SELECT DISTINCT fprop.feature_id 
            FROM featureprop fprop, cvterm t WHERE t.cvterm_id = fprop.type_id AND t.name = ' ||
            quote_literal(p_type) || ' AND fprop.value like ' || quote_literal(p_val) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_property(character varying, character varying) OWNER TO kmr44;

--
-- Name: get_feature_ids_by_propval(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids_by_propval(character varying) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    p_val alias for $1;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT fprop.feature_id 
        FROM featureprop fprop WHERE fprop.value = ' || quote_literal(p_val) || ';';
    IF (STRPOS(p_val, '%') > 0) THEN
        query := 'SELECT DISTINCT fprop.feature_id 
            FROM featureprop fprop WHERE fprop.value like ' || quote_literal(p_val) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_propval(character varying) OWNER TO kmr44;

--
-- Name: get_feature_ids_by_type(character varying, character); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids_by_type(character varying, character) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    gtype alias for $1;
    is_an alias for $2;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id 
        FROM feature f, cvterm t WHERE t.cvterm_id = f.type_id AND t.name = ' || quote_literal(gtype) ||
        ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
    IF (STRPOS(gtype, '%') > 0) THEN
        query := 'SELECT DISTINCT f.feature_id 
            FROM feature f, cvterm t WHERE t.cvterm_id = f.type_id AND t.name like '
            || quote_literal(gtype) || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_type(character varying, character) OWNER TO kmr44;

--
-- Name: get_feature_ids_by_type_name(character varying, text, character); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids_by_type_name(character varying, text, character) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    gtype alias for $1;
    name alias for $2;
    is_an alias for $3;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id 
        FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id)
        WHERE t.name = ' || quote_literal(gtype) || ' AND (f.uniquename = ' || quote_literal(name)
        || ' OR f.name = ' || quote_literal(name) || ') AND f.is_analysis = ' || quote_literal(is_an) || ';';
 
    IF (STRPOS(name, '%') > 0) THEN
        query := 'SELECT DISTINCT f.feature_id 
            FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id)
            WHERE t.name = ' || quote_literal(gtype) || ' AND (f.uniquename like ' || quote_literal(name)
            || ' OR f.name like ' || quote_literal(name) || ') AND f.is_analysis = ' || quote_literal(is_an) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_type_name(character varying, text, character) OWNER TO kmr44;

--
-- Name: get_feature_ids_by_type_src(character varying, text, character); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_ids_by_type_src(character varying, text, character) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    gtype alias for $1;
    src alias for $2;
    is_an alias for $3;
    query TEXT;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id 
        FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id) INNER join featureloc fl
        ON (f.feature_id = fl.feature_id) INNER join feature src ON (src.feature_id = fl.srcfeature_id)
        WHERE t.name = ' || quote_literal(gtype) || ' AND src.uniquename = ' || quote_literal(src)
        || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
 
    IF (STRPOS(gtype, '%') > 0) THEN
        query := 'SELECT DISTINCT f.feature_id 
            FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id) INNER join featureloc fl
            ON (f.feature_id = fl.feature_id) INNER join feature src ON (src.feature_id = fl.srcfeature_id)
            WHERE t.name like ' || quote_literal(gtype) || ' AND src.uniquename = ' || quote_literal(src)
            || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
    END IF;

    FOR myrc IN SELECT * FROM get_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_feature_ids_by_type_src(character varying, text, character) OWNER TO kmr44;

--
-- Name: get_feature_relationship_type_id(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_relationship_type_id(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='relationship'
 $_$;


ALTER FUNCTION public.get_feature_relationship_type_id(character varying) OWNER TO kmr44;

--
-- Name: get_feature_type_id(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_feature_type_id(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$ 
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='sequence'
 $_$;


ALTER FUNCTION public.get_feature_type_id(character varying) OWNER TO kmr44;

--
-- Name: get_featureprop_type_id(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_featureprop_type_id(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='feature_property'
 $_$;


ALTER FUNCTION public.get_featureprop_type_id(character varying) OWNER TO kmr44;

--
-- Name: get_graph_above(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_graph_above(integer) RETURNS SETOF public.cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;

BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM get_all_object_ids(cterm.object_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_graph_above(integer) OWNER TO kmr44;

--
-- Name: get_graph_below(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_graph_below(integer) RETURNS SETOF public.cvtermpath
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;

BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = root LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM get_all_subject_ids(cterm.subject_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_graph_below(integer) OWNER TO kmr44;

--
-- Name: cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cvterm (
    cvterm_id integer NOT NULL,
    cv_id integer NOT NULL,
    name character varying(1024) NOT NULL,
    definition text,
    dbxref_id integer NOT NULL,
    is_obsolete integer DEFAULT 0 NOT NULL,
    is_relationshiptype integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvterm OWNER TO kmr44;

--
-- Name: TABLE cvterm; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.cvterm IS 'A term, class, universal or type within an
ontology or controlled vocabulary.  This table is also used for
relations and properties. cvterms constitute nodes in the graph
defined by the collection of cvterms and cvterm_relationships.';


--
-- Name: COLUMN cvterm.cv_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm.cv_id IS 'The cv or ontology or namespace to which
this cvterm belongs.';


--
-- Name: COLUMN cvterm.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm.name IS 'A concise human-readable name or
label for the cvterm. Uniquely identifies a cvterm within a cv.';


--
-- Name: COLUMN cvterm.definition; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm.definition IS 'A human-readable text
definition.';


--
-- Name: COLUMN cvterm.dbxref_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm.dbxref_id IS 'Primary identifier dbxref - The
unique global OBO identifier for this cvterm.  Note that a cvterm may
have multiple secondary dbxrefs - see also table: cvterm_dbxref.';


--
-- Name: COLUMN cvterm.is_obsolete; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm.is_obsolete IS 'Boolean 0=false,1=true; see
GO documentation for details of obsoletion. Note that two terms with
different primary dbxrefs may exist if one is obsolete.';


--
-- Name: COLUMN cvterm.is_relationshiptype; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm.is_relationshiptype IS 'Boolean
0=false,1=true relations or relationship types (also known as Typedefs
in OBO format, or as properties or slots) form a cv/ontology in
themselves. We use this flag to indicate whether this cvterm is an
actual term/class/universal or a relation. Relations may be drawn from
the OBO Relations ontology, but are not exclusively drawn from there.';


--
-- Name: get_it_sub_cvterm_ids(text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_it_sub_cvterm_ids(text) RETURNS SETOF public.cvterm
    LANGUAGE plpgsql
    AS $_$
DECLARE
    query alias for $1;
    cterm cvterm%ROWTYPE;
    cterm2 cvterm%ROWTYPE;
BEGIN
    FOR cterm IN EXECUTE query LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT subject_id as cvterm_id FROM get_all_subject_ids(cterm.cvterm_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$;


ALTER FUNCTION public.get_it_sub_cvterm_ids(text) OWNER TO kmr44;

--
-- Name: get_organism_id(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_organism_id(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$ 
SELECT organism_id
  FROM organism
  WHERE genus=substring($1,1,position(' ' IN $1)-1)
    AND species=substring($1,position(' ' IN $1)+1)
 $_$;


ALTER FUNCTION public.get_organism_id(character varying) OWNER TO kmr44;

--
-- Name: get_organism_id(character varying, character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_organism_id(character varying, character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
  SELECT organism_id 
  FROM organism
  WHERE genus=$1
    AND species=$2
 $_$;


ALTER FUNCTION public.get_organism_id(character varying, character varying) OWNER TO kmr44;

--
-- Name: get_organism_id_abbrev(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_organism_id_abbrev(character varying) RETURNS integer
    LANGUAGE sql
    AS $_$
SELECT organism_id
  FROM organism
  WHERE substr(genus,1,1)=substring($1,1,1)
    AND species=substring($1,position(' ' IN $1)+1)
 $_$;


ALTER FUNCTION public.get_organism_id_abbrev(character varying) OWNER TO kmr44;

--
-- Name: get_sub_feature_ids(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_sub_feature_ids(integer) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN
    FOR myrc IN SELECT DISTINCT subject_id AS feature_id FROM feature_relationship WHERE object_id = root LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_sub_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_sub_feature_ids(integer) OWNER TO kmr44;

--
-- Name: get_sub_feature_ids(text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_sub_feature_ids(text) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    sql alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN
    FOR myrc IN EXECUTE sql LOOP
        FOR myrc2 IN SELECT * FROM get_sub_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_sub_feature_ids(text) OWNER TO kmr44;

--
-- Name: get_sub_feature_ids(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_sub_feature_ids(integer, integer) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    root alias for $1;
    depth alias for $2;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN
    FOR myrc IN SELECT DISTINCT subject_id AS feature_id, depth FROM feature_relationship WHERE object_id = root LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_sub_feature_ids(myrc.feature_id,depth+1) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_sub_feature_ids(integer, integer) OWNER TO kmr44;

--
-- Name: get_sub_feature_ids_by_type_src(character varying, text, character); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_sub_feature_ids_by_type_src(character varying, text, character) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    gtype alias for $1;
    src alias for $2;
    is_an alias for $3;
    query text;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN

    query := 'SELECT DISTINCT f.feature_id FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id)
        INNER join featureloc fl
        ON (f.feature_id = fl.feature_id) INNER join feature src ON (src.feature_id = fl.srcfeature_id)
        WHERE t.name = ' || quote_literal(gtype) || ' AND src.uniquename = ' || quote_literal(src)
        || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
 
    IF (STRPOS(gtype, '%') > 0) THEN
        query := 'SELECT DISTINCT f.feature_id FROM feature f INNER join cvterm t ON (f.type_id = t.cvterm_id)
             INNER join featureloc fl
            ON (f.feature_id = fl.feature_id) INNER join feature src ON (src.feature_id = fl.srcfeature_id)
            WHERE t.name like ' || quote_literal(gtype) || ' AND src.uniquename = ' || quote_literal(src)
            || ' AND f.is_analysis = ' || quote_literal(is_an) || ';';
    END IF;
    FOR myrc IN SELECT * FROM get_sub_feature_ids(query) LOOP
        RETURN NEXT myrc;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_sub_feature_ids_by_type_src(character varying, text, character) OWNER TO kmr44;

--
-- Name: get_up_feature_ids(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_up_feature_ids(integer) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;
BEGIN
    FOR myrc IN SELECT DISTINCT object_id AS feature_id FROM feature_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_up_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_up_feature_ids(integer) OWNER TO kmr44;

--
-- Name: get_up_feature_ids(text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_up_feature_ids(text) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    sql alias for $1;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;

BEGIN
    FOR myrc IN EXECUTE sql LOOP
        FOR myrc2 IN SELECT * FROM get_up_feature_ids(myrc.feature_id) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_up_feature_ids(text) OWNER TO kmr44;

--
-- Name: get_up_feature_ids(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.get_up_feature_ids(integer, integer) RETURNS SETOF public.feature_by_fx_type
    LANGUAGE plpgsql
    AS $_$
DECLARE
    leaf alias for $1;
    depth alias for $2;
    myrc feature_by_fx_type%ROWTYPE;
    myrc2 feature_by_fx_type%ROWTYPE;
BEGIN
    FOR myrc IN SELECT DISTINCT object_id AS feature_id, depth FROM feature_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT myrc;
        FOR myrc2 IN SELECT * FROM get_up_feature_ids(myrc.feature_id,depth+1) LOOP
            RETURN NEXT myrc2;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;


ALTER FUNCTION public.get_up_feature_ids(integer, integer) OWNER TO kmr44;

--
-- Name: gffattstring(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.gffattstring(integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$DECLARE
  return_string      varchar;
  f_id               ALIAS FOR $1;
  atts_view          gffatts%ROWTYPE;
  feature_row        feature%ROWTYPE;
  name               varchar;
  uniquename         varchar;
  parent             varchar;
  escape_loc         int; 
BEGIN
  --Get name from feature.name
  --Get ID from feature.uniquename
                                                                                
  SELECT INTO feature_row * FROM feature WHERE feature_id = f_id;
  name  = feature_row.name;
  return_string = 'ID=' || feature_row.uniquename;
  IF name IS NOT NULL AND name != ''
  THEN
    return_string = return_string ||';' || 'Name=' || name;
  END IF;
                                                                                
  --Get Parent from feature_relationship
  SELECT INTO feature_row * FROM feature f, feature_relationship fr
    WHERE fr.subject_id = f_id AND fr.object_id = f.feature_id;
  IF FOUND
  THEN
    return_string = return_string||';'||'Parent='||feature_row.uniquename;
  END IF;
                                                                                
  FOR atts_view IN SELECT * FROM gff3atts WHERE feature_id = f_id  LOOP
    escape_loc = position(';' in atts_view.attribute);
    IF escape_loc > 0 THEN
      atts_view.attribute = replace(atts_view.attribute, ';', '%3B');
    END IF;
    return_string = return_string || ';'
                     || atts_view.type || '='
                     || atts_view.attribute;
  END LOOP;
                                                                                
  RETURN return_string;
END;
$_$;


ALTER FUNCTION public.gffattstring(integer) OWNER TO kmr44;

--
-- Name: db; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.db (
    db_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255),
    urlprefix character varying(255),
    url character varying(255)
);


ALTER TABLE public.db OWNER TO kmr44;

--
-- Name: TABLE db; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.db IS 'A database authority. Typical databases in
bioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority
is generally known by this shortened form, which is unique within the
bioinformatics and biomedical realm.  To Do - add support for URIs,
URNs (e.g. LSIDs). We can do this by treating the URL as a URI -
however, some applications may expect this to be resolvable - to be
decided.';


--
-- Name: dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.dbxref (
    dbxref_id integer NOT NULL,
    db_id integer NOT NULL,
    accession character varying(255) NOT NULL,
    version character varying(255) DEFAULT ''::character varying NOT NULL,
    description text
);


ALTER TABLE public.dbxref OWNER TO kmr44;

--
-- Name: TABLE dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.dbxref IS 'A unique, global, public, stable identifier. Not necessarily an external reference - can reference data items inside the particular chado instance being used. Typically a row in a table can be uniquely identified with a primary identifier (called dbxref_id); a table may also have secondary identifiers (in a linking table <T>_dbxref). A dbxref is generally written as <DB>:<ACCESSION> or as <DB>:<ACCESSION>:<VERSION>.';


--
-- Name: COLUMN dbxref.accession; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.dbxref.accession IS 'The local part of the identifier. Guaranteed by the db authority to be unique for that db.';


--
-- Name: feature_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_cvterm (
    feature_cvterm_id integer NOT NULL,
    feature_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_not boolean DEFAULT false NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_cvterm OWNER TO kmr44;

--
-- Name: TABLE feature_cvterm; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_cvterm IS 'Associate a term from a cv with a feature, for example, GO annotation.';


--
-- Name: COLUMN feature_cvterm.pub_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_cvterm.pub_id IS 'Provenance for the annotation. Each annotation should have a single primary publication (which may be of the appropriate type for computational analyses) where more details can be found. Additional provenance dbxrefs can be attached using feature_cvterm_dbxref.';


--
-- Name: COLUMN feature_cvterm.is_not; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_cvterm.is_not IS 'If this is set to true, then this annotation is interpreted as a NEGATIVE annotation - i.e. the feature does NOT have the specified function, process, component, part, etc. See GO docs for more details.';


--
-- Name: feature_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_dbxref (
    feature_dbxref_id integer NOT NULL,
    feature_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.feature_dbxref OWNER TO kmr44;

--
-- Name: TABLE feature_dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_dbxref IS 'Links a feature to dbxrefs. This is for secondary identifiers; primary identifiers should use feature.dbxref_id.';


--
-- Name: COLUMN feature_dbxref.is_current; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_dbxref.is_current IS 'True if this secondary dbxref is the most up to date accession in the corresponding db. Retired accessions should set this field to false';


--
-- Name: feature_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_pub (
    feature_pub_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_pub OWNER TO kmr44;

--
-- Name: TABLE feature_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_pub IS 'Provenance. Linking table between features and publications that mention them.';


--
-- Name: feature_synonym; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_synonym (
    feature_synonym_id integer NOT NULL,
    synonym_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT false NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


ALTER TABLE public.feature_synonym OWNER TO kmr44;

--
-- Name: TABLE feature_synonym; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_synonym IS 'Linking table between feature and synonym.';


--
-- Name: COLUMN feature_synonym.pub_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_synonym.pub_id IS 'The pub_id link is for relating the usage of a given synonym to the publication in which it was used.';


--
-- Name: COLUMN feature_synonym.is_current; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_synonym.is_current IS 'The is_current boolean indicates whether the linked synonym is the  current -official- symbol for the linked feature.';


--
-- Name: COLUMN feature_synonym.is_internal; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_synonym.is_internal IS 'Typically a synonym exists so that somebody querying the db with an obsolete name can find the object theyre looking for (under its current name.  If the synonym has been used publicly and deliberately (e.g. in a paper), it may also be listed in reports as a synonym. If the synonym was not used deliberately (e.g. there was a typo which went public), then the is_internal boolean may be set to -true- so that it is known that the synonym is -internal- and should be queryable but should not be listed in reports as a valid synonym.';


--
-- Name: featureprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.featureprop (
    featureprop_id integer NOT NULL,
    feature_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.featureprop OWNER TO kmr44;

--
-- Name: TABLE featureprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.featureprop IS 'A feature can have any number of slot-value property tags attached to it. This is an alternative to hardcoding a list of columns in the relational schema, and is completely extensible.';


--
-- Name: COLUMN featureprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. Certain property types will only apply to certain feature
types (e.g. the anticodon property will only apply to tRNA features) ;
the types here come from the sequence feature property ontology.';


--
-- Name: COLUMN featureprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation. This is less efficient than using native database types, but is easier to query.';


--
-- Name: COLUMN featureprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featureprop.rank IS 'Property-Value ordering. Any
feature can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.pub (
    pub_id integer NOT NULL,
    title text,
    volumetitle text,
    volume character varying(255),
    series_name character varying(255),
    issue character varying(255),
    pyear character varying(255),
    pages character varying(255),
    miniref character varying(255),
    uniquename text NOT NULL,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false,
    publisher character varying(255),
    pubplace character varying(255)
);


ALTER TABLE public.pub OWNER TO kmr44;

--
-- Name: TABLE pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.pub IS 'A documented provenance artefact - publications,
documents, personal communication.';


--
-- Name: COLUMN pub.title; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pub.title IS 'Descriptive general heading.';


--
-- Name: COLUMN pub.volumetitle; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pub.volumetitle IS 'Title of part if one of a series.';


--
-- Name: COLUMN pub.series_name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pub.series_name IS 'Full name of (journal) series.';


--
-- Name: COLUMN pub.pages; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pub.pages IS 'Page number range[s], e.g. 457--459, viii + 664pp, lv--lvii.';


--
-- Name: COLUMN pub.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pub.type_id IS 'The type of the publication (book, journal, poem, graffiti, etc). Uses pub cv.';


--
-- Name: synonym; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.synonym (
    synonym_id integer NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL,
    synonym_sgml character varying(255) NOT NULL
);


ALTER TABLE public.synonym OWNER TO kmr44;

--
-- Name: TABLE synonym; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.synonym IS 'A synonym for a feature. One feature can have multiple synonyms, and the same synonym can apply to multiple features.';


--
-- Name: COLUMN synonym.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.synonym.name IS 'The synonym itself. Should be human-readable machine-searchable ascii text.';


--
-- Name: COLUMN synonym.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.synonym.type_id IS 'Types would be symbol and fullname for now.';


--
-- Name: COLUMN synonym.synonym_sgml; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.synonym.synonym_sgml IS 'The fully specified synonym, with any non-ascii characters encoded in SGML.';


--
-- Name: gffatts; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.gffatts AS
 SELECT fs.feature_id,
    'Ontology_term'::text AS type,
    s.name AS attribute
   FROM public.cvterm s,
    public.feature_cvterm fs
  WHERE (fs.cvterm_id = s.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'Dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM public.dbxref s,
    public.feature_dbxref fs,
    public.db d
  WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id))
UNION ALL
 SELECT fs.feature_id,
    'Alias'::text AS type,
    s.name AS attribute
   FROM public.synonym s,
    public.feature_synonym fs
  WHERE (fs.synonym_id = s.synonym_id)
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM public.featureprop fp,
    public.cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM public.pub s,
    public.feature_pub fs
  WHERE (fs.pub_id = s.pub_id);


ALTER TABLE public.gffatts OWNER TO kmr44;

--
-- Name: gfffeatureatts(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.gfffeatureatts(integer) RETURNS SETOF public.gffatts
    LANGUAGE sql
    AS $_$
SELECT feature_id, 'Ontology_term' AS type,  s.name AS attribute
FROM cvterm s, feature_cvterm fs
WHERE fs.feature_id= $1 AND fs.cvterm_id = s.cvterm_id
UNION
SELECT feature_id, 'Dbxref' AS type, d.name || ':' || s.accession AS attribute
FROM dbxref s, feature_dbxref fs, db d
WHERE fs.feature_id= $1 AND fs.dbxref_id = s.dbxref_id AND s.db_id = d.db_id
UNION
SELECT feature_id, 'Alias' AS type, s.name AS attribute
FROM synonym s, feature_synonym fs
WHERE fs.feature_id= $1 AND fs.synonym_id = s.synonym_id
UNION
SELECT fp.feature_id,cv.name,fp.value
FROM featureprop fp, cvterm cv
WHERE fp.feature_id= $1 AND fp.type_id = cv.cvterm_id 
UNION
SELECT feature_id, 'pub' AS type, s.series_name || ':' || s.title AS attribute
FROM pub s, feature_pub fs
WHERE fs.feature_id= $1 AND fs.pub_id = s.pub_id
$_$;


ALTER FUNCTION public.gfffeatureatts(integer) OWNER TO kmr44;

--
-- Name: order_exons(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.order_exons(integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    parent_type      ALIAS FOR $1;
    exon_id          int;
    part_of          int;
    exon_type        int;
    strand           int;
    arow             RECORD;
    order_by         varchar;
    rowcount         int;
    exon_count       int;
    ordered_exons    int;    
    transcript_id    int;
    transcript_row   feature%ROWTYPE;
  BEGIN
    SELECT INTO part_of cvterm_id FROM cvterm WHERE name='part_of'
      AND cv_id IN (SELECT cv_id FROM cv WHERE name='relationship');
    --SELECT INTO exon_type cvterm_id FROM cvterm WHERE name='exon'
    --  AND cv_id IN (SELECT cv_id FROM cv WHERE name='sequence');

    --RAISE NOTICE 'part_of %, exon %',part_of,exon_type;

    FOR transcript_row IN
      SELECT * FROM feature WHERE type_id = parent_type
    LOOP
      transcript_id = transcript_row.feature_id;
      SELECT INTO rowcount count(*) FROM feature_relationship
        WHERE object_id = transcript_id
          AND rank = 0;

      --Dont modify this transcript if there are already numbered exons or
      --if there is only one exon
      IF rowcount = 1 THEN
        --RAISE NOTICE 'skipping transcript %, row count %',transcript_id,rowcount;
        CONTINUE;
      END IF;

      --need to reverse the order if the strand is negative
      SELECT INTO strand strand FROM featureloc WHERE feature_id=transcript_id;
      IF strand > 0 THEN
          order_by = 'fl.fmin';      
      ELSE
          order_by = 'fl.fmax desc';
      END IF;

      exon_count = 0;
      FOR arow IN EXECUTE 
        'SELECT fr.*, fl.fmin, fl.fmax
          FROM feature_relationship fr, featureloc fl
          WHERE fr.object_id  = '||transcript_id||'
            AND fr.subject_id = fl.feature_id
            AND fr.type_id    = '||part_of||'
            ORDER BY '||order_by
      LOOP
        --number the exons for a given transcript
        UPDATE feature_relationship
          SET rank = exon_count 
          WHERE feature_relationship_id = arow.feature_relationship_id;
        exon_count = exon_count + 1;
      END LOOP; 

    END LOOP;

  END;
$_$;


ALTER FUNCTION public.order_exons(integer) OWNER TO kmr44;

--
-- Name: phylonode_depth(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.phylonode_depth(integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$DECLARE  id    ALIAS FOR $1;
  DECLARE  depth FLOAT := 0;
  DECLARE  curr_node phylonode%ROWTYPE;
  BEGIN
   SELECT INTO curr_node *
    FROM phylonode 
    WHERE phylonode_id=id;
   depth = depth + curr_node.distance;
   IF curr_node.parent_phylonode_id IS NULL
    THEN RETURN depth;
    ELSE RETURN depth + phylonode_depth(curr_node.parent_phylonode_id);
   END IF;
 END
$_$;


ALTER FUNCTION public.phylonode_depth(integer) OWNER TO kmr44;

--
-- Name: phylonode_height(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.phylonode_height(integer) RETURNS double precision
    LANGUAGE sql
    AS $_$
  SELECT coalesce(max(phylonode_height(phylonode_id) + distance), 0.0)
    FROM phylonode
    WHERE parent_phylonode_id = $1
$_$;


ALTER FUNCTION public.phylonode_height(integer) OWNER TO kmr44;

--
-- Name: project_featureloc_up(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.project_featureloc_up(integer, integer) RETURNS public.featureloc
    LANGUAGE plpgsql
    AS $_$
DECLARE
    in_featureloc_id alias for $1;
    up_srcfeature_id alias for $2;
    in_featureloc featureloc%ROWTYPE;
    up_featureloc featureloc%ROWTYPE;
    nu_featureloc featureloc%ROWTYPE;
    nu_fmin INT;
    nu_fmax INT;
    nu_strand INT;
BEGIN
 SELECT INTO in_featureloc
   featureloc.*
  FROM featureloc
  WHERE featureloc_id = in_featureloc_id;

 SELECT INTO up_featureloc
   up_fl.*
  FROM featureloc AS in_fl
  INNER JOIN featureloc AS up_fl
    ON (in_fl.srcfeature_id = up_fl.feature_id)
  WHERE
   in_fl.featureloc_id = in_featureloc_id AND
   up_fl.srcfeature_id = up_srcfeature_id;

  IF up_featureloc.strand IS NULL
   THEN RETURN NULL;
  END IF;
  
  IF up_featureloc.strand < 0
  THEN
   nu_fmin = project_point_up(in_featureloc.fmax,
                              up_featureloc.fmin,up_featureloc.fmax,-1);
   nu_fmax = project_point_up(in_featureloc.fmin,
                              up_featureloc.fmin,up_featureloc.fmax,-1);
   nu_strand = -in_featureloc.strand;
  ELSE
   nu_fmin = project_point_up(in_featureloc.fmin,
                              up_featureloc.fmin,up_featureloc.fmax,1);
   nu_fmax = project_point_up(in_featureloc.fmax,
                              up_featureloc.fmin,up_featureloc.fmax,1);
   nu_strand = in_featureloc.strand;
  END IF;
  in_featureloc.fmin = nu_fmin;
  in_featureloc.fmax = nu_fmax;
  in_featureloc.strand = nu_strand;
  in_featureloc.srcfeature_id = up_featureloc.srcfeature_id;
  RETURN in_featureloc;
END
$_$;


ALTER FUNCTION public.project_featureloc_up(integer, integer) OWNER TO kmr44;

--
-- Name: project_point_down(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.project_point_down(integer, integer, integer, integer) RETURNS integer
    LANGUAGE sql
    AS $_$SELECT
  CASE WHEN $4<0
   THEN $3-$1
   ELSE $1+$2
  END AS p$_$;


ALTER FUNCTION public.project_point_down(integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: project_point_g2t(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.project_point_g2t(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
 DECLARE
    in_p             alias for $1;
    srcf_id          alias for $2;
    t_id             alias for $3;
    e_floc           featureloc%ROWTYPE;
    out_p            INT;
    exon_cvterm_id   INT;
BEGIN
 SELECT INTO exon_cvterm_id get_feature_type_id('exon');
 SELECT INTO out_p
  CASE 
   WHEN strand<0 THEN fmax-p
   ELSE p-fmin
   END AS p
  FROM featureloc
   INNER JOIN feature USING (feature_id)
   INNER JOIN feature_relationship ON (feature.feature_id=subject_id)
  WHERE
   object_id = t_id                     AND
   feature.type_id = exon_cvterm_id     AND
   featureloc.srcfeature_id = srcf_id   AND
   in_p >= fmin                         AND
   in_p <= fmax;
  RETURN in_featureloc;
END
$_$;


ALTER FUNCTION public.project_point_g2t(integer, integer, integer) OWNER TO kmr44;

--
-- Name: project_point_up(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.project_point_up(integer, integer, integer, integer) RETURNS integer
    LANGUAGE sql
    AS $_$SELECT
  CASE WHEN $4<0
   THEN $3-$1             -- rev strand
   ELSE $1-$2             -- fwd strand
  END AS p$_$;


ALTER FUNCTION public.project_point_up(integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: reverse_complement(text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.reverse_complement(text) RETURNS text
    LANGUAGE sql
    AS $_$SELECT reverse_string(complement_residues($1))$_$;


ALTER FUNCTION public.reverse_complement(text) OWNER TO kmr44;

--
-- Name: reverse_string(text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.reverse_string(text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
 DECLARE 
  reversed_string TEXT;
  incoming ALIAS FOR $1;
 BEGIN
   reversed_string = '';
   FOR i IN REVERSE char_length(incoming)..1 loop
     reversed_string = reversed_string || substring(incoming FROM i FOR 1);
   END loop;
 RETURN reversed_string;
END$_$;


ALTER FUNCTION public.reverse_string(text) OWNER TO kmr44;

--
-- Name: share_exons(); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.share_exons() RETURNS void
    LANGUAGE plpgsql
    AS $$    
  DECLARE    
  BEGIN
    /* Generate a table of shared exons */
    CREATE temporary TABLE shared_exons AS
      SELECT gene.feature_id as gene_feature_id
           , gene.uniquename as gene_uniquename
           , transcript1.uniquename as transcript1
           , exon1.feature_id as exon1_feature_id
           , exon1.uniquename as exon1_uniquename
           , transcript2.uniquename as transcript2
           , exon2.feature_id as exon2_feature_id
           , exon2.uniquename as exon2_uniquename
           , exon1_loc.fmin /* = exon2_loc.fmin */
           , exon1_loc.fmax /* = exon2_loc.fmax */
      FROM feature gene
        JOIN cvterm gene_type ON gene.type_id = gene_type.cvterm_id
        JOIN cv gene_type_cv USING (cv_id)
        JOIN feature_relationship gene_transcript1 ON gene.feature_id = gene_transcript1.object_id
        JOIN feature transcript1 ON gene_transcript1.subject_id = transcript1.feature_id
        JOIN cvterm transcript1_type ON transcript1.type_id = transcript1_type.cvterm_id
        JOIN cv transcript1_type_cv ON transcript1_type.cv_id = transcript1_type_cv.cv_id
        JOIN feature_relationship transcript1_exon1 ON transcript1_exon1.object_id = transcript1.feature_id
        JOIN feature exon1 ON transcript1_exon1.subject_id = exon1.feature_id
        JOIN cvterm exon1_type ON exon1.type_id = exon1_type.cvterm_id
        JOIN cv exon1_type_cv ON exon1_type.cv_id = exon1_type_cv.cv_id
        JOIN featureloc exon1_loc ON exon1_loc.feature_id = exon1.feature_id
        JOIN feature_relationship gene_transcript2 ON gene.feature_id = gene_transcript2.object_id
        JOIN feature transcript2 ON gene_transcript2.subject_id = transcript2.feature_id
        JOIN cvterm transcript2_type ON transcript2.type_id = transcript2_type.cvterm_id
        JOIN cv transcript2_type_cv ON transcript2_type.cv_id = transcript2_type_cv.cv_id
        JOIN feature_relationship transcript2_exon2 ON transcript2_exon2.object_id = transcript2.feature_id
        JOIN feature exon2 ON transcript2_exon2.subject_id = exon2.feature_id
        JOIN cvterm exon2_type ON exon2.type_id = exon2_type.cvterm_id
        JOIN cv exon2_type_cv ON exon2_type.cv_id = exon2_type_cv.cv_id
        JOIN featureloc exon2_loc ON exon2_loc.feature_id = exon2.feature_id
      WHERE gene_type_cv.name = 'sequence'
        AND gene_type.name = 'gene'
        AND transcript1_type_cv.name = 'sequence'
        AND transcript1_type.name = 'mRNA'
        AND transcript2_type_cv.name = 'sequence'
        AND transcript2_type.name = 'mRNA'
        AND exon1_type_cv.name = 'sequence'
        AND exon1_type.name = 'exon'
        AND exon2_type_cv.name = 'sequence'
        AND exon2_type.name = 'exon'
        AND exon1.feature_id < exon2.feature_id
        AND exon1_loc.rank = 0
        AND exon2_loc.rank = 0
        AND exon1_loc.fmin = exon2_loc.fmin
        AND exon1_loc.fmax = exon2_loc.fmax
    ;
    
    /* Choose one of the shared exons to be the canonical representative.
       We pick the one with the smallest feature_id.
     */
    CREATE temporary TABLE canonical_exon_representatives AS
      SELECT gene_feature_id, min(exon1_feature_id) AS canonical_feature_id, fmin
      FROM shared_exons
      GROUP BY gene_feature_id,fmin
    ;
    
    CREATE temporary TABLE exon_replacements AS
      SELECT DISTINCT shared_exons.exon2_feature_id AS actual_feature_id
                    , canonical_exon_representatives.canonical_feature_id
                    , canonical_exon_representatives.fmin
      FROM shared_exons
        JOIN canonical_exon_representatives USING (gene_feature_id)
      WHERE shared_exons.exon2_feature_id <> canonical_exon_representatives.canonical_feature_id
        AND shared_exons.fmin = canonical_exon_representatives.fmin
    ;
    
    UPDATE feature_relationship 
      SET subject_id = (
            SELECT canonical_feature_id
            FROM exon_replacements
            WHERE feature_relationship.subject_id = exon_replacements.actual_feature_id)
      WHERE subject_id IN (
        SELECT actual_feature_id FROM exon_replacements
    );
    
    UPDATE feature_relationship
      SET object_id = (
            SELECT canonical_feature_id
            FROM exon_replacements
            WHERE feature_relationship.subject_id = exon_replacements.actual_feature_id)
      WHERE object_id IN (
        SELECT actual_feature_id FROM exon_replacements
    );
    
    UPDATE feature
      SET is_obsolete = true
      WHERE feature_id IN (
        SELECT actual_feature_id FROM exon_replacements
    );
  END;    
$$;


ALTER FUNCTION public.share_exons() OWNER TO kmr44;

--
-- Name: store_analysis(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.store_analysis(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
   v_program            ALIAS FOR $1;
   v_programversion     ALIAS FOR $2;
   v_sourcename         ALIAS FOR $3;
   pkval                INTEGER;
 BEGIN
    SELECT INTO pkval analysis_id
      FROM analysis
      WHERE program=v_program AND
            programversion=v_programversion AND
            sourcename=v_sourcename;
    IF NOT FOUND THEN
      INSERT INTO analysis 
       (program,programversion,sourcename)
         VALUES
       (v_program,v_programversion,v_sourcename);
      RETURN currval('analysis_analysis_id_seq');
    END IF;
    RETURN pkval;
 END;
$_$;


ALTER FUNCTION public.store_analysis(character varying, character varying, character varying) OWNER TO kmr44;

--
-- Name: store_db(character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.store_db(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
   v_name             ALIAS FOR $1;

   v_db_id            INTEGER;
 BEGIN
    SELECT INTO v_db_id db_id
      FROM db
      WHERE name=v_name;
    IF NOT FOUND THEN
      INSERT INTO db
       (name)
         VALUES
       (v_name);
       RETURN currval('db_db_id_seq');
    END IF;
    RETURN v_db_id;
 END;
$_$;


ALTER FUNCTION public.store_db(character varying) OWNER TO kmr44;

--
-- Name: store_dbxref(character varying, character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.store_dbxref(character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
   v_dbname                ALIAS FOR $1;
   v_accession             ALIAS FOR $2;

   v_db_id                 INTEGER;
   v_dbxref_id             INTEGER;
 BEGIN
    SELECT INTO v_db_id
      store_db(v_dbname);
    SELECT INTO v_dbxref_id dbxref_id
      FROM dbxref
      WHERE db_id=v_db_id       AND
            accession=v_accession;
    IF NOT FOUND THEN
      INSERT INTO dbxref
       (db_id,accession)
         VALUES
       (v_db_id,v_accession);
       RETURN currval('dbxref_dbxref_id_seq');
    END IF;
    RETURN v_dbxref_id;
 END;
$_$;


ALTER FUNCTION public.store_dbxref(character varying, character varying) OWNER TO kmr44;

--
-- Name: store_feature(integer, integer, integer, integer, integer, integer, character varying, character varying, integer, boolean); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.store_feature(integer, integer, integer, integer, integer, integer, character varying, character varying, integer, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
  v_srcfeature_id       ALIAS FOR $1;
  v_fmin                ALIAS FOR $2;
  v_fmax                ALIAS FOR $3;
  v_strand              ALIAS FOR $4;
  v_dbxref_id           ALIAS FOR $5;
  v_organism_id         ALIAS FOR $6;
  v_name                ALIAS FOR $7;
  v_uniquename          ALIAS FOR $8;
  v_type_id             ALIAS FOR $9;
  v_is_analysis         ALIAS FOR $10;
  v_feature_id          INT;
  v_featureloc_id       INT;
 BEGIN
    IF v_dbxref_id IS NULL THEN
      SELECT INTO v_feature_id feature_id
      FROM feature
      WHERE uniquename=v_uniquename     AND
            organism_id=v_organism_id   AND
            type_id=v_type_id;
    ELSE
      SELECT INTO v_feature_id feature_id
      FROM feature
      WHERE dbxref_id=v_dbxref_id;
    END IF;
    IF NOT FOUND THEN
      INSERT INTO feature
       ( dbxref_id           ,
         organism_id         ,
         name                ,
         uniquename          ,
         type_id             ,
         is_analysis         )
        VALUES
        ( v_dbxref_id           ,
          v_organism_id         ,
          v_name                ,
          v_uniquename          ,
          v_type_id             ,
          v_is_analysis         );
      v_feature_id = currval('feature_feature_id_seq');
    ELSE
      UPDATE feature SET
        dbxref_id   =  v_dbxref_id           ,
        organism_id =  v_organism_id         ,
        name        =  v_name                ,
        uniquename  =  v_uniquename          ,
        type_id     =  v_type_id             ,
        is_analysis =  v_is_analysis
      WHERE
        feature_id=v_feature_id;
    END IF;
  PERFORM store_featureloc(v_feature_id,
                           v_srcfeature_id,
                           v_fmin,
                           v_fmax,
                           v_strand,
                           0,
                           0);
  RETURN v_feature_id;
 END;
$_$;


ALTER FUNCTION public.store_feature(integer, integer, integer, integer, integer, integer, character varying, character varying, integer, boolean) OWNER TO kmr44;

--
-- Name: store_feature_synonym(integer, character varying, integer, boolean, boolean, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.store_feature_synonym(integer, character varying, integer, boolean, boolean, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
  v_feature_id          ALIAS FOR $1;
  v_syn                 ALIAS FOR $2;
  v_type_id             ALIAS FOR $3;
  v_is_current          ALIAS FOR $4;
  v_is_internal         ALIAS FOR $5;
  v_pub_id              ALIAS FOR $6;
  v_synonym_id          INT;
  v_feature_synonym_id  INT;
 BEGIN
    IF v_feature_id IS NULL THEN RAISE EXCEPTION 'feature_id cannot be null';
    END IF;
    SELECT INTO v_synonym_id synonym_id
      FROM synonym
      WHERE name=v_syn                  AND
            type_id=v_type_id;
    IF NOT FOUND THEN
      INSERT INTO synonym
        ( name,
          synonym_sgml,
          type_id)
        VALUES
        ( v_syn,
          v_syn,
          v_type_id);
      v_synonym_id = currval('synonym_synonym_id_seq');
    END IF;
    SELECT INTO v_feature_synonym_id feature_synonym_id
        FROM feature_synonym
        WHERE feature_id=v_feature_id   AND
              synonym_id=v_synonym_id   AND
              pub_id=v_pub_id;
    IF NOT FOUND THEN
      INSERT INTO feature_synonym
        ( feature_id,
          synonym_id,
          pub_id,
          is_current,
          is_internal)
        VALUES
        ( v_feature_id,
          v_synonym_id,
          v_pub_id,
          v_is_current,
          v_is_internal);
      v_feature_synonym_id = currval('feature_synonym_feature_synonym_id_seq');
    ELSE
      UPDATE feature_synonym
        SET is_current=v_is_current, is_internal=v_is_internal
        WHERE feature_synonym_id=v_feature_synonym_id;
    END IF;
  RETURN v_feature_synonym_id;
 END;
$_$;


ALTER FUNCTION public.store_feature_synonym(integer, character varying, integer, boolean, boolean, integer) OWNER TO kmr44;

--
-- Name: store_featureloc(integer, integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.store_featureloc(integer, integer, integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
  v_feature_id          ALIAS FOR $1;
  v_srcfeature_id       ALIAS FOR $2;
  v_fmin                ALIAS FOR $3;
  v_fmax                ALIAS FOR $4;
  v_strand              ALIAS FOR $5;
  v_rank                ALIAS FOR $6;
  v_locgroup            ALIAS FOR $7;
  v_featureloc_id       INT;
 BEGIN
    IF v_feature_id IS NULL THEN RAISE EXCEPTION 'feature_id cannot be null';
    END IF;
    SELECT INTO v_featureloc_id featureloc_id
      FROM featureloc
      WHERE feature_id=v_feature_id     AND
            rank=v_rank                 AND
            locgroup=v_locgroup;
    IF NOT FOUND THEN
      INSERT INTO featureloc
        ( feature_id,
          srcfeature_id,
          fmin,
          fmax,
          strand,
          rank,
          locgroup)
        VALUES
        (  v_feature_id,
           v_srcfeature_id,
           v_fmin,
           v_fmax,
           v_strand,
           v_rank,
           v_locgroup);
      v_featureloc_id = currval('featureloc_featureloc_id_seq');
    ELSE
      UPDATE featureloc SET
        feature_id    =  v_feature_id,
        srcfeature_id =  v_srcfeature_id,
        fmin          =  v_fmin,
        fmax          =  v_fmax,
        strand        =  v_strand,
        rank          =  v_rank,
        locgroup      =  v_locgroup
      WHERE
        featureloc_id=v_featureloc_id;
    END IF;
  RETURN v_featureloc_id;
 END;
$_$;


ALTER FUNCTION public.store_featureloc(integer, integer, integer, integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: store_organism(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.store_organism(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$DECLARE
   v_genus            ALIAS FOR $1;
   v_species          ALIAS FOR $2;
   v_common_name      ALIAS FOR $3;

   v_organism_id      INTEGER;
 BEGIN
    SELECT INTO v_organism_id organism_id
      FROM organism
      WHERE genus=v_genus               AND
            species=v_species;
    IF NOT FOUND THEN
      INSERT INTO organism
       (genus,species,common_name)
         VALUES
       (v_genus,v_species,v_common_name);
       RETURN currval('organism_organism_id_seq');
    ELSE
      UPDATE organism
       SET common_name=v_common_name
      WHERE organism_id = v_organism_id;
    END IF;
    RETURN v_organism_id;
 END;
$_$;


ALTER FUNCTION public.store_organism(character varying, character varying, character varying) OWNER TO kmr44;

--
-- Name: subsequence(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence(integer, integer, integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN $4<0 
   THEN reverse_complement(substring(srcf.residues,$2+1,($3-$2)))
   ELSE substring(residues,$2+1,($3-$2))
  END AS residues
  FROM feature AS srcf
  WHERE
   srcf.feature_id=$1$_$;


ALTER FUNCTION public.subsequence(integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: subsequence_by_feature(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence_by_feature(integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_feature($1,0,0)$_$;


ALTER FUNCTION public.subsequence_by_feature(integer) OWNER TO kmr44;

--
-- Name: subsequence_by_feature(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence_by_feature(integer, integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN strand<0 
   THEN reverse_complement(substring(srcf.residues,fmin+1,(fmax-fmin)))
   ELSE substring(srcf.residues,fmin+1,(fmax-fmin))
  END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
  WHERE
   featureloc.feature_id=$1 AND
   featureloc.rank=$2 AND
   featureloc.locgroup=$3$_$;


ALTER FUNCTION public.subsequence_by_feature(integer, integer, integer) OWNER TO kmr44;

--
-- Name: subsequence_by_featureloc(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence_by_featureloc(integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN strand<0 
   THEN reverse_complement(substring(srcf.residues,fmin+1,(fmax-fmin)))
   ELSE substring(srcf.residues,fmin+1,(fmax-fmin))
  END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
  WHERE
   featureloc_id=$1$_$;


ALTER FUNCTION public.subsequence_by_featureloc(integer) OWNER TO kmr44;

--
-- Name: subsequence_by_subfeatures(integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence_by_subfeatures(integer) RETURNS text
    LANGUAGE sql
    AS $_$
SELECT subsequence_by_subfeatures($1,get_feature_relationship_type_id('part_of'),0,0)
$_$;


ALTER FUNCTION public.subsequence_by_subfeatures(integer) OWNER TO kmr44;

--
-- Name: subsequence_by_subfeatures(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence_by_subfeatures(integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_subfeatures($1,$2,0,0)$_$;


ALTER FUNCTION public.subsequence_by_subfeatures(integer, integer) OWNER TO kmr44;

--
-- Name: subsequence_by_subfeatures(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence_by_subfeatures(integer, integer, integer, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE v_feature_id ALIAS FOR $1;
DECLARE v_rtype_id   ALIAS FOR $2;
DECLARE v_rank       ALIAS FOR $3;
DECLARE v_locgroup   ALIAS FOR $4;
DECLARE subseq       TEXT;
DECLARE seqrow       RECORD;
BEGIN 
  subseq = '';
 FOR seqrow IN
   SELECT
    CASE WHEN strand<0 
     THEN reverse_complement(substring(srcf.residues,fmin+1,(fmax-fmin)))
     ELSE substring(srcf.residues,fmin+1,(fmax-fmin))
    END AS residues
    FROM feature AS srcf
     INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
     INNER JOIN feature_relationship AS fr
       ON (fr.subject_id=featureloc.feature_id)
    WHERE
     fr.object_id=v_feature_id AND
     fr.type_id=v_rtype_id AND
     featureloc.rank=v_rank AND
     featureloc.locgroup=v_locgroup
    ORDER BY fr.rank
  LOOP
   subseq = subseq  || seqrow.residues;
  END LOOP;
 RETURN subseq;
END
$_$;


ALTER FUNCTION public.subsequence_by_subfeatures(integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: subsequence_by_typed_subfeatures(integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence_by_typed_subfeatures(integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_typed_subfeatures($1,$2,0,0)$_$;


ALTER FUNCTION public.subsequence_by_typed_subfeatures(integer, integer) OWNER TO kmr44;

--
-- Name: subsequence_by_typed_subfeatures(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.subsequence_by_typed_subfeatures(integer, integer, integer, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE v_feature_id ALIAS FOR $1;
DECLARE v_ftype_id   ALIAS FOR $2;
DECLARE v_rank       ALIAS FOR $3;
DECLARE v_locgroup   ALIAS FOR $4;
DECLARE subseq       TEXT;
DECLARE seqrow       RECORD;
BEGIN 
  subseq = '';
 FOR seqrow IN
   SELECT
    CASE WHEN strand<0 
     THEN reverse_complement(substring(srcf.residues,fmin+1,(fmax-fmin)))
     ELSE substring(srcf.residues,fmin+1,(fmax-fmin))
    END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
   INNER JOIN feature AS subf ON (subf.feature_id=featureloc.feature_id)
   INNER JOIN feature_relationship AS fr ON (fr.subject_id=subf.feature_id)
  WHERE
     fr.object_id=v_feature_id AND
     subf.type_id=v_ftype_id AND
     featureloc.rank=v_rank AND
     featureloc.locgroup=v_locgroup
  ORDER BY fr.rank
   LOOP
   subseq = subseq  || seqrow.residues;
  END LOOP;
 RETURN subseq;
END
$_$;


ALTER FUNCTION public.subsequence_by_typed_subfeatures(integer, integer, integer, integer) OWNER TO kmr44;

--
-- Name: translate_codon(text, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.translate_codon(text, integer) RETURNS character
    LANGUAGE sql
    AS $_$SELECT aa FROM genetic_code.gencode_codon_aa WHERE codon=$1 AND gencode_id=$2$_$;


ALTER FUNCTION public.translate_codon(text, integer) OWNER TO kmr44;

--
-- Name: translate_dna(text); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.translate_dna(text) RETURNS text
    LANGUAGE sql
    AS $_$SELECT translate_dna($1,1)$_$;


ALTER FUNCTION public.translate_dna(text) OWNER TO kmr44;

--
-- Name: translate_dna(text, integer); Type: FUNCTION; Schema: public; Owner: kmr44
--

CREATE FUNCTION public.translate_dna(text, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
 DECLARE 
  dnaseq ALIAS FOR $1;
  gcode ALIAS FOR $2;
  translation TEXT;
  dnaseqlen INT;
  codon CHAR(3);
  aa CHAR(1);
  i INT;
 BEGIN
   translation = '';
   dnaseqlen = char_length(dnaseq);
   i=1;
   WHILE i+1 < dnaseqlen loop
     codon = substring(dnaseq,i,3);
     aa = translate_codon(codon,gcode);
     translation = translation || aa;
     i = i+3;
   END loop;
 RETURN translation;
END$_$;


ALTER FUNCTION public.translate_dna(text, integer) OWNER TO kmr44;

--
-- Name: concat(text); Type: AGGREGATE; Schema: public; Owner: kmr44
--

CREATE AGGREGATE public.concat(text) (
    SFUNC = public.concat_pair,
    STYPE = text,
    INITCOND = ''
);


ALTER AGGREGATE public.concat(text) OWNER TO kmr44;

--
-- Name: featuregroup_featuregroup_id_seq; Type: SEQUENCE; Schema: frange; Owner: kmr44
--

CREATE SEQUENCE frange.featuregroup_featuregroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE frange.featuregroup_featuregroup_id_seq OWNER TO kmr44;

--
-- Name: featuregroup_featuregroup_id_seq; Type: SEQUENCE OWNED BY; Schema: frange; Owner: kmr44
--

ALTER SEQUENCE frange.featuregroup_featuregroup_id_seq OWNED BY frange.featuregroup.featuregroup_id;


--
-- Name: gencode; Type: TABLE; Schema: genetic_code; Owner: kmr44
--

CREATE TABLE genetic_code.gencode (
    gencode_id integer NOT NULL,
    organismstr character varying(512) NOT NULL
);


ALTER TABLE genetic_code.gencode OWNER TO kmr44;

--
-- Name: gencode_codon_aa; Type: TABLE; Schema: genetic_code; Owner: kmr44
--

CREATE TABLE genetic_code.gencode_codon_aa (
    gencode_id integer NOT NULL,
    codon character(3) NOT NULL,
    aa character(1) NOT NULL
);


ALTER TABLE genetic_code.gencode_codon_aa OWNER TO kmr44;

--
-- Name: gencode_startcodon; Type: TABLE; Schema: genetic_code; Owner: kmr44
--

CREATE TABLE genetic_code.gencode_startcodon (
    gencode_id integer NOT NULL,
    codon character(3)
);


ALTER TABLE genetic_code.gencode_startcodon OWNER TO kmr44;

--
-- Name: acquisition; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.acquisition (
    acquisition_id integer NOT NULL,
    assay_id integer NOT NULL,
    protocol_id integer,
    channel_id integer,
    acquisitiondate timestamp without time zone DEFAULT now(),
    name text,
    uri text
);


ALTER TABLE public.acquisition OWNER TO kmr44;

--
-- Name: TABLE acquisition; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.acquisition IS 'This represents the scanning of hybridized material. The output of this process is typically a digital image of an array.';


--
-- Name: acquisition_acquisition_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.acquisition_acquisition_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.acquisition_acquisition_id_seq OWNER TO kmr44;

--
-- Name: acquisition_acquisition_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.acquisition_acquisition_id_seq OWNED BY public.acquisition.acquisition_id;


--
-- Name: acquisition_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.acquisition_relationship (
    acquisition_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.acquisition_relationship OWNER TO kmr44;

--
-- Name: TABLE acquisition_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.acquisition_relationship IS 'Multiple monochrome images may be merged to form a multi-color image. Red-green images of 2-channel hybridizations are an example of this.';


--
-- Name: acquisition_relationship_acquisition_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.acquisition_relationship_acquisition_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.acquisition_relationship_acquisition_relationship_id_seq OWNER TO kmr44;

--
-- Name: acquisition_relationship_acquisition_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.acquisition_relationship_acquisition_relationship_id_seq OWNED BY public.acquisition_relationship.acquisition_relationship_id;


--
-- Name: acquisitionprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.acquisitionprop (
    acquisitionprop_id integer NOT NULL,
    acquisition_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.acquisitionprop OWNER TO kmr44;

--
-- Name: TABLE acquisitionprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.acquisitionprop IS 'Parameters associated with image acquisition.';


--
-- Name: acquisitionprop_acquisitionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.acquisitionprop_acquisitionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.acquisitionprop_acquisitionprop_id_seq OWNER TO kmr44;

--
-- Name: acquisitionprop_acquisitionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.acquisitionprop_acquisitionprop_id_seq OWNED BY public.acquisitionprop.acquisitionprop_id;


--
-- Name: all_feature_names; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.all_feature_names AS
 SELECT feature.feature_id,
    ("substring"(feature.uniquename, 0, 255))::character varying(255) AS name,
    feature.organism_id
   FROM public.feature
UNION
 SELECT feature.feature_id,
    feature.name,
    feature.organism_id
   FROM public.feature
  WHERE (feature.name IS NOT NULL)
UNION
 SELECT fs.feature_id,
    s.name,
    f.organism_id
   FROM public.feature_synonym fs,
    public.synonym s,
    public.feature f
  WHERE ((fs.synonym_id = s.synonym_id) AND (fs.feature_id = f.feature_id))
UNION
 SELECT fp.feature_id,
    ("substring"(fp.value, 0, 255))::character varying(255) AS name,
    f.organism_id
   FROM public.featureprop fp,
    public.feature f
  WHERE (f.feature_id = fp.feature_id)
UNION
 SELECT fd.feature_id,
    d.accession AS name,
    f.organism_id
   FROM public.feature_dbxref fd,
    public.dbxref d,
    public.feature f
  WHERE ((fd.dbxref_id = d.dbxref_id) AND (fd.feature_id = f.feature_id));


ALTER TABLE public.all_feature_names OWNER TO kmr44;

--
-- Name: analysis; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.analysis (
    analysis_id integer NOT NULL,
    name character varying(255),
    description text,
    program character varying(255) NOT NULL,
    programversion character varying(255) NOT NULL,
    algorithm character varying(255),
    sourcename character varying(255),
    sourceversion character varying(255),
    sourceuri text,
    timeexecuted timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.analysis OWNER TO kmr44;

--
-- Name: TABLE analysis; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.analysis IS 'An analysis is a particular type of a
    computational analysis; it may be a blast of one sequence against
    another, or an all by all blast, or a different kind of analysis
    altogether. It is a single unit of computation.';


--
-- Name: COLUMN analysis.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysis.name IS 'A way of grouping analyses. This
    should be a handy short identifier that can help people find an
    analysis they want. For instance "tRNAscan", "cDNA", "FlyPep",
    "SwissProt", and it should not be assumed to be unique. For instance, there may be lots of separate analyses done against a cDNA database.';


--
-- Name: COLUMN analysis.program; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysis.program IS 'Program name, e.g. blastx, blastp, sim4, genscan.';


--
-- Name: COLUMN analysis.programversion; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysis.programversion IS 'Version description, e.g. TBLASTX 2.0MP-WashU [09-Nov-2000].';


--
-- Name: COLUMN analysis.algorithm; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysis.algorithm IS 'Algorithm name, e.g. blast.';


--
-- Name: COLUMN analysis.sourcename; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysis.sourcename IS 'Source name, e.g. cDNA, SwissProt.';


--
-- Name: COLUMN analysis.sourceuri; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysis.sourceuri IS 'This is an optional, permanent URL or URI for the source of the  analysis. The idea is that someone could recreate the analysis directly by going to this URI and fetching the source data (e.g. the blast database, or the training model).';


--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.analysis_analysis_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysis_analysis_id_seq OWNER TO kmr44;

--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.analysis_analysis_id_seq OWNED BY public.analysis.analysis_id;


--
-- Name: analysisfeature; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.analysisfeature (
    analysisfeature_id integer NOT NULL,
    feature_id integer NOT NULL,
    analysis_id integer NOT NULL,
    rawscore double precision,
    normscore double precision,
    significance double precision,
    identity double precision
);


ALTER TABLE public.analysisfeature OWNER TO kmr44;

--
-- Name: TABLE analysisfeature; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.analysisfeature IS 'Computational analyses generate features (e.g. Genscan generates transcripts and exons; sim4 alignments generate similarity/match features). analysisfeatures are stored using the feature table from the sequence module. The analysisfeature table is used to decorate these features, with analysis specific attributes. A feature is an analysisfeature if and only if there is a corresponding entry in the analysisfeature table. analysisfeatures will have two or more featureloc entries,
 with rank indicating query/subject';


--
-- Name: COLUMN analysisfeature.rawscore; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysisfeature.rawscore IS 'This is the native score generated by the program; for example, the bitscore generated by blast, sim4 or genscan scores. One should not assume that high is necessarily better than low.';


--
-- Name: COLUMN analysisfeature.normscore; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysisfeature.normscore IS 'This is the rawscore but
    semi-normalized. Complete normalization to allow comparison of
    features generated by different programs would be nice but too
    difficult. Instead the normalization should strive to enforce the
    following semantics: * normscores are floating point numbers >= 0,
    * high normscores are better than low one. For most programs, it would be sufficient to make the normscore the same as this rawscore, providing these semantics are satisfied.';


--
-- Name: COLUMN analysisfeature.significance; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysisfeature.significance IS 'This is some kind of expectation or probability metric, representing the probability that the analysis would appear randomly given the model. As such, any program or person querying this table can assume the following semantics:
   * 0 <= significance <= n, where n is a positive number, theoretically unbounded but unlikely to be more than 10
  * low numbers are better than high numbers.';


--
-- Name: COLUMN analysisfeature.identity; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.analysisfeature.identity IS 'Percent identity between the locations compared.  Note that these 4 metrics do not cover the full range of scores possible; it would be undesirable to list every score possible, as this should be kept extensible. instead, for non-standard scores, use the analysisprop table.';


--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.analysisfeature_analysisfeature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysisfeature_analysisfeature_id_seq OWNER TO kmr44;

--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.analysisfeature_analysisfeature_id_seq OWNED BY public.analysisfeature.analysisfeature_id;


--
-- Name: analysisfeatureprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.analysisfeatureprop (
    analysisfeatureprop_id integer NOT NULL,
    analysisfeature_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer NOT NULL
);


ALTER TABLE public.analysisfeatureprop OWNER TO kmr44;

--
-- Name: analysisfeatureprop_analysisfeatureprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.analysisfeatureprop_analysisfeatureprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysisfeatureprop_analysisfeatureprop_id_seq OWNER TO kmr44;

--
-- Name: analysisfeatureprop_analysisfeatureprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.analysisfeatureprop_analysisfeatureprop_id_seq OWNED BY public.analysisfeatureprop.analysisfeatureprop_id;


--
-- Name: analysisprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.analysisprop (
    analysisprop_id integer NOT NULL,
    analysis_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.analysisprop OWNER TO kmr44;

--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.analysisprop_analysisprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analysisprop_analysisprop_id_seq OWNER TO kmr44;

--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.analysisprop_analysisprop_id_seq OWNED BY public.analysisprop.analysisprop_id;


--
-- Name: arraydesign; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.arraydesign (
    arraydesign_id integer NOT NULL,
    manufacturer_id integer NOT NULL,
    platformtype_id integer NOT NULL,
    substratetype_id integer,
    protocol_id integer,
    dbxref_id integer,
    name text NOT NULL,
    version text,
    description text,
    array_dimensions text,
    element_dimensions text,
    num_of_elements integer,
    num_array_columns integer,
    num_array_rows integer,
    num_grid_columns integer,
    num_grid_rows integer,
    num_sub_columns integer,
    num_sub_rows integer
);


ALTER TABLE public.arraydesign OWNER TO kmr44;

--
-- Name: TABLE arraydesign; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.arraydesign IS 'General properties about an array.
An array is a template used to generate physical slides, etc.  It
contains layout information, as well as global array properties, such
as material (glass, nylon) and spot dimensions (in rows/columns).';


--
-- Name: arraydesign_arraydesign_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.arraydesign_arraydesign_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.arraydesign_arraydesign_id_seq OWNER TO kmr44;

--
-- Name: arraydesign_arraydesign_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.arraydesign_arraydesign_id_seq OWNED BY public.arraydesign.arraydesign_id;


--
-- Name: arraydesignprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.arraydesignprop (
    arraydesignprop_id integer NOT NULL,
    arraydesign_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.arraydesignprop OWNER TO kmr44;

--
-- Name: TABLE arraydesignprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.arraydesignprop IS 'Extra array design properties that are not accounted for in arraydesign.';


--
-- Name: arraydesignprop_arraydesignprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.arraydesignprop_arraydesignprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.arraydesignprop_arraydesignprop_id_seq OWNER TO kmr44;

--
-- Name: arraydesignprop_arraydesignprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.arraydesignprop_arraydesignprop_id_seq OWNED BY public.arraydesignprop.arraydesignprop_id;


--
-- Name: assay; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.assay (
    assay_id integer NOT NULL,
    arraydesign_id integer NOT NULL,
    protocol_id integer,
    assaydate timestamp without time zone DEFAULT now(),
    arrayidentifier text,
    arraybatchidentifier text,
    operator_id integer NOT NULL,
    dbxref_id integer,
    name text,
    description text
);


ALTER TABLE public.assay OWNER TO kmr44;

--
-- Name: TABLE assay; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.assay IS 'An assay consists of a physical instance of
an array, combined with the conditions used to create the array
(protocols, technician information). The assay can be thought of as a hybridization.';


--
-- Name: assay_assay_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.assay_assay_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assay_assay_id_seq OWNER TO kmr44;

--
-- Name: assay_assay_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.assay_assay_id_seq OWNED BY public.assay.assay_id;


--
-- Name: assay_biomaterial; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.assay_biomaterial (
    assay_biomaterial_id integer NOT NULL,
    assay_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    channel_id integer,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.assay_biomaterial OWNER TO kmr44;

--
-- Name: TABLE assay_biomaterial; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.assay_biomaterial IS 'A biomaterial can be hybridized many times (technical replicates), or combined with other biomaterials in a single hybridization (for two-channel arrays).';


--
-- Name: assay_biomaterial_assay_biomaterial_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.assay_biomaterial_assay_biomaterial_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assay_biomaterial_assay_biomaterial_id_seq OWNER TO kmr44;

--
-- Name: assay_biomaterial_assay_biomaterial_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.assay_biomaterial_assay_biomaterial_id_seq OWNED BY public.assay_biomaterial.assay_biomaterial_id;


--
-- Name: assay_project; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.assay_project (
    assay_project_id integer NOT NULL,
    assay_id integer NOT NULL,
    project_id integer NOT NULL
);


ALTER TABLE public.assay_project OWNER TO kmr44;

--
-- Name: TABLE assay_project; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.assay_project IS 'Link assays to projects.';


--
-- Name: assay_project_assay_project_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.assay_project_assay_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assay_project_assay_project_id_seq OWNER TO kmr44;

--
-- Name: assay_project_assay_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.assay_project_assay_project_id_seq OWNED BY public.assay_project.assay_project_id;


--
-- Name: assayprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.assayprop (
    assayprop_id integer NOT NULL,
    assay_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.assayprop OWNER TO kmr44;

--
-- Name: TABLE assayprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.assayprop IS 'Extra assay properties that are not accounted for in assay.';


--
-- Name: assayprop_assayprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.assayprop_assayprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assayprop_assayprop_id_seq OWNER TO kmr44;

--
-- Name: assayprop_assayprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.assayprop_assayprop_id_seq OWNED BY public.assayprop.assayprop_id;


--
-- Name: biomaterial; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.biomaterial (
    biomaterial_id integer NOT NULL,
    taxon_id integer,
    biosourceprovider_id integer,
    dbxref_id integer,
    name text,
    description text
);


ALTER TABLE public.biomaterial OWNER TO kmr44;

--
-- Name: TABLE biomaterial; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.biomaterial IS 'A biomaterial represents the MAGE concept of BioSource, BioSample, and LabeledExtract. It is essentially some biological material (tissue, cells, serum) that may have been processed. Processed biomaterials should be traceable back to raw biomaterials via the biomaterialrelationship table.';


--
-- Name: biomaterial_biomaterial_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.biomaterial_biomaterial_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterial_biomaterial_id_seq OWNER TO kmr44;

--
-- Name: biomaterial_biomaterial_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.biomaterial_biomaterial_id_seq OWNED BY public.biomaterial.biomaterial_id;


--
-- Name: biomaterial_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.biomaterial_dbxref (
    biomaterial_dbxref_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.biomaterial_dbxref OWNER TO kmr44;

--
-- Name: biomaterial_dbxref_biomaterial_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.biomaterial_dbxref_biomaterial_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterial_dbxref_biomaterial_dbxref_id_seq OWNER TO kmr44;

--
-- Name: biomaterial_dbxref_biomaterial_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.biomaterial_dbxref_biomaterial_dbxref_id_seq OWNED BY public.biomaterial_dbxref.biomaterial_dbxref_id;


--
-- Name: biomaterial_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.biomaterial_relationship (
    biomaterial_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.biomaterial_relationship OWNER TO kmr44;

--
-- Name: TABLE biomaterial_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.biomaterial_relationship IS 'Relate biomaterials to one another. This is a way to track a series of treatments or material splits/merges, for instance.';


--
-- Name: biomaterial_relationship_biomaterial_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.biomaterial_relationship_biomaterial_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterial_relationship_biomaterial_relationship_id_seq OWNER TO kmr44;

--
-- Name: biomaterial_relationship_biomaterial_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.biomaterial_relationship_biomaterial_relationship_id_seq OWNED BY public.biomaterial_relationship.biomaterial_relationship_id;


--
-- Name: biomaterial_treatment; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.biomaterial_treatment (
    biomaterial_treatment_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    treatment_id integer NOT NULL,
    unittype_id integer,
    value real,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.biomaterial_treatment OWNER TO kmr44;

--
-- Name: TABLE biomaterial_treatment; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.biomaterial_treatment IS 'Link biomaterials to treatments. Treatments have an order of operations (rank), and associated measurements (unittype_id, value).';


--
-- Name: biomaterial_treatment_biomaterial_treatment_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.biomaterial_treatment_biomaterial_treatment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterial_treatment_biomaterial_treatment_id_seq OWNER TO kmr44;

--
-- Name: biomaterial_treatment_biomaterial_treatment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.biomaterial_treatment_biomaterial_treatment_id_seq OWNED BY public.biomaterial_treatment.biomaterial_treatment_id;


--
-- Name: biomaterialprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.biomaterialprop (
    biomaterialprop_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.biomaterialprop OWNER TO kmr44;

--
-- Name: TABLE biomaterialprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.biomaterialprop IS 'Extra biomaterial properties that are not accounted for in biomaterial.';


--
-- Name: biomaterialprop_biomaterialprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.biomaterialprop_biomaterialprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.biomaterialprop_biomaterialprop_id_seq OWNER TO kmr44;

--
-- Name: biomaterialprop_biomaterialprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.biomaterialprop_biomaterialprop_id_seq OWNED BY public.biomaterialprop.biomaterialprop_id;


--
-- Name: cell_line; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line (
    cell_line_id integer NOT NULL,
    name character varying(255),
    uniquename character varying(255) NOT NULL,
    organism_id integer NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT now() NOT NULL,
    timelastmodified timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.cell_line OWNER TO kmr44;

--
-- Name: cell_line_cell_line_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_cell_line_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_cell_line_id_seq OWNER TO kmr44;

--
-- Name: cell_line_cell_line_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_cell_line_id_seq OWNED BY public.cell_line.cell_line_id;


--
-- Name: cell_line_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line_cvterm (
    cell_line_cvterm_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cell_line_cvterm OWNER TO kmr44;

--
-- Name: cell_line_cvterm_cell_line_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_cvterm_cell_line_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_cvterm_cell_line_cvterm_id_seq OWNER TO kmr44;

--
-- Name: cell_line_cvterm_cell_line_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_cvterm_cell_line_cvterm_id_seq OWNED BY public.cell_line_cvterm.cell_line_cvterm_id;


--
-- Name: cell_line_cvtermprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line_cvtermprop (
    cell_line_cvtermprop_id integer NOT NULL,
    cell_line_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cell_line_cvtermprop OWNER TO kmr44;

--
-- Name: cell_line_cvtermprop_cell_line_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_cvtermprop_cell_line_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_cvtermprop_cell_line_cvtermprop_id_seq OWNER TO kmr44;

--
-- Name: cell_line_cvtermprop_cell_line_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_cvtermprop_cell_line_cvtermprop_id_seq OWNED BY public.cell_line_cvtermprop.cell_line_cvtermprop_id;


--
-- Name: cell_line_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line_dbxref (
    cell_line_dbxref_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.cell_line_dbxref OWNER TO kmr44;

--
-- Name: cell_line_dbxref_cell_line_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_dbxref_cell_line_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_dbxref_cell_line_dbxref_id_seq OWNER TO kmr44;

--
-- Name: cell_line_dbxref_cell_line_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_dbxref_cell_line_dbxref_id_seq OWNED BY public.cell_line_dbxref.cell_line_dbxref_id;


--
-- Name: cell_line_feature; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line_feature (
    cell_line_feature_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.cell_line_feature OWNER TO kmr44;

--
-- Name: cell_line_feature_cell_line_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_feature_cell_line_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_feature_cell_line_feature_id_seq OWNER TO kmr44;

--
-- Name: cell_line_feature_cell_line_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_feature_cell_line_feature_id_seq OWNED BY public.cell_line_feature.cell_line_feature_id;


--
-- Name: cell_line_library; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line_library (
    cell_line_library_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    library_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.cell_line_library OWNER TO kmr44;

--
-- Name: cell_line_library_cell_line_library_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_library_cell_line_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_library_cell_line_library_id_seq OWNER TO kmr44;

--
-- Name: cell_line_library_cell_line_library_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_library_cell_line_library_id_seq OWNED BY public.cell_line_library.cell_line_library_id;


--
-- Name: cell_line_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line_pub (
    cell_line_pub_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.cell_line_pub OWNER TO kmr44;

--
-- Name: cell_line_pub_cell_line_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_pub_cell_line_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_pub_cell_line_pub_id_seq OWNER TO kmr44;

--
-- Name: cell_line_pub_cell_line_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_pub_cell_line_pub_id_seq OWNED BY public.cell_line_pub.cell_line_pub_id;


--
-- Name: cell_line_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line_relationship (
    cell_line_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.cell_line_relationship OWNER TO kmr44;

--
-- Name: cell_line_relationship_cell_line_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_relationship_cell_line_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_relationship_cell_line_relationship_id_seq OWNER TO kmr44;

--
-- Name: cell_line_relationship_cell_line_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_relationship_cell_line_relationship_id_seq OWNED BY public.cell_line_relationship.cell_line_relationship_id;


--
-- Name: cell_line_synonym; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_line_synonym (
    cell_line_synonym_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    synonym_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT false NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


ALTER TABLE public.cell_line_synonym OWNER TO kmr44;

--
-- Name: cell_line_synonym_cell_line_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_line_synonym_cell_line_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_line_synonym_cell_line_synonym_id_seq OWNER TO kmr44;

--
-- Name: cell_line_synonym_cell_line_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_line_synonym_cell_line_synonym_id_seq OWNED BY public.cell_line_synonym.cell_line_synonym_id;


--
-- Name: cell_lineprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_lineprop (
    cell_lineprop_id integer NOT NULL,
    cell_line_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cell_lineprop OWNER TO kmr44;

--
-- Name: cell_lineprop_cell_lineprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_lineprop_cell_lineprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_lineprop_cell_lineprop_id_seq OWNER TO kmr44;

--
-- Name: cell_lineprop_cell_lineprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_lineprop_cell_lineprop_id_seq OWNED BY public.cell_lineprop.cell_lineprop_id;


--
-- Name: cell_lineprop_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cell_lineprop_pub (
    cell_lineprop_pub_id integer NOT NULL,
    cell_lineprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.cell_lineprop_pub OWNER TO kmr44;

--
-- Name: cell_lineprop_pub_cell_lineprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cell_lineprop_pub_cell_lineprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cell_lineprop_pub_cell_lineprop_pub_id_seq OWNER TO kmr44;

--
-- Name: cell_lineprop_pub_cell_lineprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cell_lineprop_pub_cell_lineprop_pub_id_seq OWNED BY public.cell_lineprop_pub.cell_lineprop_pub_id;


--
-- Name: chadoprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.chadoprop (
    chadoprop_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.chadoprop OWNER TO kmr44;

--
-- Name: TABLE chadoprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.chadoprop IS 'This table is different from other prop tables in the database, as it is for storing information about the database itself, like schema version';


--
-- Name: COLUMN chadoprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.chadoprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN chadoprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.chadoprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN chadoprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.chadoprop.rank IS 'Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.chadoprop_chadoprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.chadoprop_chadoprop_id_seq OWNER TO kmr44;

--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.chadoprop_chadoprop_id_seq OWNED BY public.chadoprop.chadoprop_id;


--
-- Name: channel; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.channel (
    channel_id integer NOT NULL,
    name text NOT NULL,
    definition text NOT NULL
);


ALTER TABLE public.channel OWNER TO kmr44;

--
-- Name: TABLE channel; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.channel IS 'Different array platforms can record signals from one or more channels (cDNA arrays typically use two CCD, but Affymetrix uses only one).';


--
-- Name: channel_channel_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.channel_channel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.channel_channel_id_seq OWNER TO kmr44;

--
-- Name: channel_channel_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.channel_channel_id_seq OWNED BY public.channel.channel_id;


--
-- Name: common_ancestor_cvterm; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.common_ancestor_cvterm AS
 SELECT p1.subject_id AS cvterm1_id,
    p2.subject_id AS cvterm2_id,
    p1.object_id AS ancestor_cvterm_id,
    p1.pathdistance AS pathdistance1,
    p2.pathdistance AS pathdistance2,
    (p1.pathdistance + p2.pathdistance) AS total_pathdistance
   FROM public.cvtermpath p1,
    public.cvtermpath p2
  WHERE (p1.object_id = p2.object_id);


ALTER TABLE public.common_ancestor_cvterm OWNER TO kmr44;

--
-- Name: VIEW common_ancestor_cvterm; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.common_ancestor_cvterm IS 'The common ancestor of any
two terms is the intersection of both terms ancestors. Two terms can
have multiple common ancestors. Use total_pathdistance to get the
least common ancestor';


--
-- Name: common_descendant_cvterm; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.common_descendant_cvterm AS
 SELECT p1.object_id AS cvterm1_id,
    p2.object_id AS cvterm2_id,
    p1.subject_id AS ancestor_cvterm_id,
    p1.pathdistance AS pathdistance1,
    p2.pathdistance AS pathdistance2,
    (p1.pathdistance + p2.pathdistance) AS total_pathdistance
   FROM public.cvtermpath p1,
    public.cvtermpath p2
  WHERE (p1.subject_id = p2.subject_id);


ALTER TABLE public.common_descendant_cvterm OWNER TO kmr44;

--
-- Name: VIEW common_descendant_cvterm; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.common_descendant_cvterm IS 'The common descendant of
any two terms is the intersection of both terms descendants. Two terms
can have multiple common descendants. Use total_pathdistance to get
the least common ancestor';


--
-- Name: contact; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.contact (
    contact_id integer NOT NULL,
    type_id integer,
    name character varying(255) NOT NULL,
    description character varying(255)
);


ALTER TABLE public.contact OWNER TO kmr44;

--
-- Name: TABLE contact; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.contact IS 'Model persons, institutes, groups, organizations, etc.';


--
-- Name: COLUMN contact.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.contact.type_id IS 'What type of contact is this?  E.g. "person", "lab".';


--
-- Name: contact_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.contact_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contact_contact_id_seq OWNER TO kmr44;

--
-- Name: contact_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.contact_contact_id_seq OWNED BY public.contact.contact_id;


--
-- Name: contact_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.contact_relationship (
    contact_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.contact_relationship OWNER TO kmr44;

--
-- Name: TABLE contact_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.contact_relationship IS 'Model relationships between contacts';


--
-- Name: COLUMN contact_relationship.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.contact_relationship.type_id IS 'Relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed.';


--
-- Name: COLUMN contact_relationship.subject_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.contact_relationship.subject_id IS 'The subject of the subj-predicate-obj sentence. In a DAG, this corresponds to the child node.';


--
-- Name: COLUMN contact_relationship.object_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.contact_relationship.object_id IS 'The object of the subj-predicate-obj sentence. In a DAG, this corresponds to the parent node.';


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.contact_relationship_contact_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contact_relationship_contact_relationship_id_seq OWNER TO kmr44;

--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.contact_relationship_contact_relationship_id_seq OWNED BY public.contact_relationship.contact_relationship_id;


--
-- Name: control; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.control (
    control_id integer NOT NULL,
    type_id integer NOT NULL,
    assay_id integer NOT NULL,
    tableinfo_id integer NOT NULL,
    row_id integer NOT NULL,
    name text,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.control OWNER TO kmr44;

--
-- Name: control_control_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.control_control_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.control_control_id_seq OWNER TO kmr44;

--
-- Name: control_control_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.control_control_id_seq OWNED BY public.control.control_id;


--
-- Name: cv; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cv (
    cv_id integer NOT NULL,
    name character varying(255) NOT NULL,
    definition text
);


ALTER TABLE public.cv OWNER TO kmr44;

--
-- Name: TABLE cv; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.cv IS 'A controlled vocabulary or ontology. A cv is
composed of cvterms (AKA terms, classes, types, universals - relations
and properties are also stored in cvterm) and the relationships
between them.';


--
-- Name: COLUMN cv.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cv.name IS 'The name of the ontology. This
corresponds to the obo-format -namespace-. cv names uniquely identify
the cv. In OBO file format, the cv.name is known as the namespace.';


--
-- Name: COLUMN cv.definition; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cv.definition IS 'A text description of the criteria for
membership of this ontology.';


--
-- Name: cv_cv_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cv_cv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cv_cv_id_seq OWNER TO kmr44;

--
-- Name: cv_cv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cv_cv_id_seq OWNED BY public.cv.cv_id;


--
-- Name: cv_cvterm_count; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.cv_cvterm_count AS
 SELECT cv.name,
    count(*) AS num_terms_excl_obs
   FROM (public.cv
     JOIN public.cvterm USING (cv_id))
  WHERE (cvterm.is_obsolete = 0)
  GROUP BY cv.name;


ALTER TABLE public.cv_cvterm_count OWNER TO kmr44;

--
-- Name: VIEW cv_cvterm_count; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.cv_cvterm_count IS 'per-cv terms counts (excludes obsoletes)';


--
-- Name: cv_cvterm_count_with_obs; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.cv_cvterm_count_with_obs AS
 SELECT cv.name,
    count(*) AS num_terms_incl_obs
   FROM (public.cv
     JOIN public.cvterm USING (cv_id))
  GROUP BY cv.name;


ALTER TABLE public.cv_cvterm_count_with_obs OWNER TO kmr44;

--
-- Name: VIEW cv_cvterm_count_with_obs; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.cv_cvterm_count_with_obs IS 'per-cv terms counts (includes obsoletes)';


--
-- Name: cvterm_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cvterm_relationship (
    cvterm_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.cvterm_relationship OWNER TO kmr44;

--
-- Name: TABLE cvterm_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.cvterm_relationship IS 'A relationship linking two
cvterms. Each cvterm_relationship constitutes an edge in the graph
defined by the collection of cvterms and cvterm_relationships. The
meaning of the cvterm_relationship depends on the definition of the
cvterm R refered to by type_id. However, in general the definitions
are such that the statement "all SUBJs REL some OBJ" is true. The
cvterm_relationship statement is about the subject, not the
object. For example "insect wing part_of thorax".';


--
-- Name: COLUMN cvterm_relationship.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm_relationship.type_id IS 'The nature of the
relationship between subject and object. Note that relations are also
housed in the cvterm table, typically from the OBO relationship
ontology, although other relationship types are allowed.';


--
-- Name: COLUMN cvterm_relationship.subject_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm_relationship.subject_id IS 'The subject of
the subj-predicate-obj sentence. The cvterm_relationship is about the
subject. In a graph, this typically corresponds to the child node.';


--
-- Name: COLUMN cvterm_relationship.object_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm_relationship.object_id IS 'The object of the
subj-predicate-obj sentence. The cvterm_relationship refers to the
object. In a graph, this typically corresponds to the parent node.';


--
-- Name: cv_leaf; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.cv_leaf AS
 SELECT cvterm.cv_id,
    cvterm.cvterm_id
   FROM public.cvterm
  WHERE (NOT (cvterm.cvterm_id IN ( SELECT cvterm_relationship.object_id
           FROM public.cvterm_relationship)));


ALTER TABLE public.cv_leaf OWNER TO kmr44;

--
-- Name: VIEW cv_leaf; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.cv_leaf IS 'the leaves of a cv are the set of terms
which have no children (terms that are not the object of a
relation). All cvs will have at least 1 leaf';


--
-- Name: cv_link_count; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.cv_link_count AS
 SELECT cv.name AS cv_name,
    relation.name AS relation_name,
    relation_cv.name AS relation_cv_name,
    count(*) AS num_links
   FROM ((((public.cv
     JOIN public.cvterm ON ((cvterm.cv_id = cv.cv_id)))
     JOIN public.cvterm_relationship ON ((cvterm.cvterm_id = cvterm_relationship.subject_id)))
     JOIN public.cvterm relation ON ((cvterm_relationship.type_id = relation.cvterm_id)))
     JOIN public.cv relation_cv ON ((relation.cv_id = relation_cv.cv_id)))
  GROUP BY cv.name, relation.name, relation_cv.name;


ALTER TABLE public.cv_link_count OWNER TO kmr44;

--
-- Name: VIEW cv_link_count; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.cv_link_count IS 'per-cv summary of number of
links (cvterm_relationships) broken down by
relationship_type. num_links is the total # of links of the specified
type in which the subject_id of the link is in the named cv';


--
-- Name: cv_path_count; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.cv_path_count AS
 SELECT cv.name AS cv_name,
    relation.name AS relation_name,
    relation_cv.name AS relation_cv_name,
    count(*) AS num_paths
   FROM ((((public.cv
     JOIN public.cvterm ON ((cvterm.cv_id = cv.cv_id)))
     JOIN public.cvtermpath ON ((cvterm.cvterm_id = cvtermpath.subject_id)))
     JOIN public.cvterm relation ON ((cvtermpath.type_id = relation.cvterm_id)))
     JOIN public.cv relation_cv ON ((relation.cv_id = relation_cv.cv_id)))
  GROUP BY cv.name, relation.name, relation_cv.name;


ALTER TABLE public.cv_path_count OWNER TO kmr44;

--
-- Name: VIEW cv_path_count; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.cv_path_count IS 'per-cv summary of number of
paths (cvtermpaths) broken down by relationship_type. num_paths is the
total # of paths of the specified type in which the subject_id of the
path is in the named cv. See also: cv_distinct_relations';


--
-- Name: cv_root; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.cv_root AS
 SELECT cvterm.cv_id,
    cvterm.cvterm_id AS root_cvterm_id
   FROM public.cvterm
  WHERE ((NOT (cvterm.cvterm_id IN ( SELECT cvterm_relationship.subject_id
           FROM public.cvterm_relationship))) AND (cvterm.is_obsolete = 0));


ALTER TABLE public.cv_root OWNER TO kmr44;

--
-- Name: VIEW cv_root; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.cv_root IS 'the roots of a cv are the set of terms
which have no parents (terms that are not the subject of a
relation). Most cvs will have a single root, some may have >1. All
will have at least 1';


--
-- Name: cvprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cvprop (
    cvprop_id integer NOT NULL,
    cv_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvprop OWNER TO kmr44;

--
-- Name: TABLE cvprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.cvprop IS 'Additional extensible properties can be attached to a cv using this table.  A notable example would be the cv version';


--
-- Name: COLUMN cvprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN cvprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN cvprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvprop.rank IS 'Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cvprop_cvprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvprop_cvprop_id_seq OWNER TO kmr44;

--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cvprop_cvprop_id_seq OWNED BY public.cvprop.cvprop_id;


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cvterm_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_cvterm_id_seq OWNER TO kmr44;

--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cvterm_cvterm_id_seq OWNED BY public.cvterm.cvterm_id;


--
-- Name: cvterm_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cvterm_dbxref (
    cvterm_dbxref_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_for_definition integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvterm_dbxref OWNER TO kmr44;

--
-- Name: TABLE cvterm_dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.cvterm_dbxref IS 'In addition to the primary
identifier (cvterm.dbxref_id) a cvterm can have zero or more secondary
identifiers/dbxrefs, which may refer to records in external
databases. The exact semantics of cvterm_dbxref are not fixed. For
example: the dbxref could be a pubmed ID that is pertinent to the
cvterm, or it could be an equivalent or similar term in another
ontology. For example, GO cvterms are typically linked to InterPro
IDs, even though the nature of the relationship between them is
largely one of statistical association. The dbxref may be have data
records attached in the same database instance, or it could be a
"hanging" dbxref pointing to some external database. NOTE: If the
desired objective is to link two cvterms together, and the nature of
the relation is known and holds for all instances of the subject
cvterm then consider instead using cvterm_relationship together with a
well-defined relation.';


--
-- Name: COLUMN cvterm_dbxref.is_for_definition; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvterm_dbxref.is_for_definition IS 'A
cvterm.definition should be supported by one or more references. If
this column is true, the dbxref is not for a term in an external database -
it is a dbxref for provenance information for the definition.';


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cvterm_dbxref_cvterm_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_dbxref_cvterm_dbxref_id_seq OWNER TO kmr44;

--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cvterm_dbxref_cvterm_dbxref_id_seq OWNED BY public.cvterm_dbxref.cvterm_dbxref_id;


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cvterm_relationship_cvterm_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvterm_relationship_cvterm_relationship_id_seq OWNER TO kmr44;

--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cvterm_relationship_cvterm_relationship_id_seq OWNED BY public.cvterm_relationship.cvterm_relationship_id;


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cvtermpath_cvtermpath_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermpath_cvtermpath_id_seq OWNER TO kmr44;

--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cvtermpath_cvtermpath_id_seq OWNED BY public.cvtermpath.cvtermpath_id;


--
-- Name: cvtermprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cvtermprop (
    cvtermprop_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.cvtermprop OWNER TO kmr44;

--
-- Name: TABLE cvtermprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.cvtermprop IS 'Additional extensible properties can be attached to a cvterm using this table. Corresponds to -AnnotationProperty- in W3C OWL format.';


--
-- Name: COLUMN cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvtermprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN cvtermprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvtermprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN cvtermprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvtermprop.rank IS 'Property-Value ordering. Any
cvterm can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cvtermprop_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermprop_cvtermprop_id_seq OWNER TO kmr44;

--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cvtermprop_cvtermprop_id_seq OWNED BY public.cvtermprop.cvtermprop_id;


--
-- Name: cvtermsynonym; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.cvtermsynonym (
    cvtermsynonym_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    synonym character varying(1024) NOT NULL,
    type_id integer
);


ALTER TABLE public.cvtermsynonym OWNER TO kmr44;

--
-- Name: TABLE cvtermsynonym; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.cvtermsynonym IS 'A cvterm actually represents a
distinct class or concept. A concept can be refered to by different
phrases or names. In addition to the primary name (cvterm.name) there
can be a number of alternative aliases or synonyms. For example, "T
cell" as a synonym for "T lymphocyte".';


--
-- Name: COLUMN cvtermsynonym.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.cvtermsynonym.type_id IS 'A synonym can be exact,
narrower, or broader than.';


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.cvtermsynonym_cvtermsynonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cvtermsynonym_cvtermsynonym_id_seq OWNER TO kmr44;

--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.cvtermsynonym_cvtermsynonym_id_seq OWNED BY public.cvtermsynonym.cvtermsynonym_id;


--
-- Name: db_db_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.db_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.db_db_id_seq OWNER TO kmr44;

--
-- Name: db_db_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.db_db_id_seq OWNED BY public.db.db_id;


--
-- Name: db_dbxref_count; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.db_dbxref_count AS
 SELECT db.name,
    count(*) AS num_dbxrefs
   FROM (public.db
     JOIN public.dbxref USING (db_id))
  GROUP BY db.name;


ALTER TABLE public.db_dbxref_count OWNER TO kmr44;

--
-- Name: VIEW db_dbxref_count; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.db_dbxref_count IS 'per-db dbxref counts';


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.dbxref_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dbxref_dbxref_id_seq OWNER TO kmr44;

--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.dbxref_dbxref_id_seq OWNED BY public.dbxref.dbxref_id;


--
-- Name: dbxrefprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.dbxrefprop (
    dbxrefprop_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.dbxrefprop OWNER TO kmr44;

--
-- Name: TABLE dbxrefprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.dbxrefprop IS 'Metadata about a dbxref. Note that this is not defined in the dbxref module, as it depends on the cvterm table. This table has a structure analagous to cvtermprop.';


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.dbxrefprop_dbxrefprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dbxrefprop_dbxrefprop_id_seq OWNER TO kmr44;

--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.dbxrefprop_dbxrefprop_id_seq OWNED BY public.dbxrefprop.dbxrefprop_id;


--
-- Name: dfeatureloc; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.dfeatureloc AS
 SELECT featureloc.featureloc_id,
    featureloc.feature_id,
    featureloc.srcfeature_id,
    featureloc.fmin AS nbeg,
    featureloc.is_fmin_partial AS is_nbeg_partial,
    featureloc.fmax AS nend,
    featureloc.is_fmax_partial AS is_nend_partial,
    featureloc.strand,
    featureloc.phase,
    featureloc.residue_info,
    featureloc.locgroup,
    featureloc.rank
   FROM public.featureloc
  WHERE ((featureloc.strand < 0) OR (featureloc.phase < 0))
UNION
 SELECT featureloc.featureloc_id,
    featureloc.feature_id,
    featureloc.srcfeature_id,
    featureloc.fmax AS nbeg,
    featureloc.is_fmax_partial AS is_nbeg_partial,
    featureloc.fmin AS nend,
    featureloc.is_fmin_partial AS is_nend_partial,
    featureloc.strand,
    featureloc.phase,
    featureloc.residue_info,
    featureloc.locgroup,
    featureloc.rank
   FROM public.featureloc
  WHERE ((featureloc.strand IS NULL) OR (featureloc.strand >= 0) OR (featureloc.phase >= 0));


ALTER TABLE public.dfeatureloc OWNER TO kmr44;

--
-- Name: eimage; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.eimage (
    eimage_id integer NOT NULL,
    eimage_data text,
    eimage_type character varying(255) NOT NULL,
    image_uri character varying(255)
);


ALTER TABLE public.eimage OWNER TO kmr44;

--
-- Name: COLUMN eimage.eimage_data; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.eimage.eimage_data IS 'We expect images in eimage_data (e.g. JPEGs) to be uuencoded.';


--
-- Name: COLUMN eimage.eimage_type; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.eimage.eimage_type IS 'Describes the type of data in eimage_data.';


--
-- Name: eimage_eimage_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.eimage_eimage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.eimage_eimage_id_seq OWNER TO kmr44;

--
-- Name: eimage_eimage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.eimage_eimage_id_seq OWNED BY public.eimage.eimage_id;


--
-- Name: element; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.element (
    element_id integer NOT NULL,
    feature_id integer,
    arraydesign_id integer NOT NULL,
    type_id integer,
    dbxref_id integer
);


ALTER TABLE public.element OWNER TO kmr44;

--
-- Name: TABLE element; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.element IS 'Represents a feature of the array. This is typically a region of the array coated or bound to DNA.';


--
-- Name: element_element_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.element_element_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.element_element_id_seq OWNER TO kmr44;

--
-- Name: element_element_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.element_element_id_seq OWNED BY public.element.element_id;


--
-- Name: element_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.element_relationship (
    element_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.element_relationship OWNER TO kmr44;

--
-- Name: TABLE element_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.element_relationship IS 'Sometimes we want to combine measurements from multiple elements to get a composite value. Affymetrix combines many probes to form a probeset measurement, for instance.';


--
-- Name: element_relationship_element_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.element_relationship_element_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.element_relationship_element_relationship_id_seq OWNER TO kmr44;

--
-- Name: element_relationship_element_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.element_relationship_element_relationship_id_seq OWNED BY public.element_relationship.element_relationship_id;


--
-- Name: elementresult; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.elementresult (
    elementresult_id integer NOT NULL,
    element_id integer NOT NULL,
    quantification_id integer NOT NULL,
    signal double precision NOT NULL
);


ALTER TABLE public.elementresult OWNER TO kmr44;

--
-- Name: TABLE elementresult; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.elementresult IS 'An element on an array produces a measurement when hybridized to a biomaterial (traceable through quantification_id). This is the base data from which tables that actually contain data inherit.';


--
-- Name: elementresult_elementresult_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.elementresult_elementresult_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elementresult_elementresult_id_seq OWNER TO kmr44;

--
-- Name: elementresult_elementresult_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.elementresult_elementresult_id_seq OWNED BY public.elementresult.elementresult_id;


--
-- Name: elementresult_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.elementresult_relationship (
    elementresult_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.elementresult_relationship OWNER TO kmr44;

--
-- Name: TABLE elementresult_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.elementresult_relationship IS 'Sometimes we want to combine measurements from multiple elements to get a composite value. Affymetrix combines many probes to form a probeset measurement, for instance.';


--
-- Name: elementresult_relationship_elementresult_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.elementresult_relationship_elementresult_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elementresult_relationship_elementresult_relationship_id_seq OWNER TO kmr44;

--
-- Name: elementresult_relationship_elementresult_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.elementresult_relationship_elementresult_relationship_id_seq OWNED BY public.elementresult_relationship.elementresult_relationship_id;


--
-- Name: environment; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.environment (
    environment_id integer NOT NULL,
    uniquename text NOT NULL,
    description text
);


ALTER TABLE public.environment OWNER TO kmr44;

--
-- Name: TABLE environment; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.environment IS 'The environmental component of a phenotype description.';


--
-- Name: environment_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.environment_cvterm (
    environment_cvterm_id integer NOT NULL,
    environment_id integer NOT NULL,
    cvterm_id integer NOT NULL
);


ALTER TABLE public.environment_cvterm OWNER TO kmr44;

--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.environment_cvterm_environment_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.environment_cvterm_environment_cvterm_id_seq OWNER TO kmr44;

--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.environment_cvterm_environment_cvterm_id_seq OWNED BY public.environment_cvterm.environment_cvterm_id;


--
-- Name: environment_environment_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.environment_environment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.environment_environment_id_seq OWNER TO kmr44;

--
-- Name: environment_environment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.environment_environment_id_seq OWNED BY public.environment.environment_id;


--
-- Name: expression; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.expression (
    expression_id integer NOT NULL,
    uniquename text NOT NULL,
    md5checksum character(32),
    description text
);


ALTER TABLE public.expression OWNER TO kmr44;

--
-- Name: TABLE expression; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.expression IS 'The expression table is essentially a bridge table.';


--
-- Name: expression_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.expression_cvterm (
    expression_cvterm_id integer NOT NULL,
    expression_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    cvterm_type_id integer NOT NULL
);


ALTER TABLE public.expression_cvterm OWNER TO kmr44;

--
-- Name: expression_cvterm_expression_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.expression_cvterm_expression_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_cvterm_expression_cvterm_id_seq OWNER TO kmr44;

--
-- Name: expression_cvterm_expression_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.expression_cvterm_expression_cvterm_id_seq OWNED BY public.expression_cvterm.expression_cvterm_id;


--
-- Name: expression_cvtermprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.expression_cvtermprop (
    expression_cvtermprop_id integer NOT NULL,
    expression_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.expression_cvtermprop OWNER TO kmr44;

--
-- Name: TABLE expression_cvtermprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.expression_cvtermprop IS 'Extensible properties for
expression to cvterm associations. Examples: qualifiers.';


--
-- Name: COLUMN expression_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.expression_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. For example, cvterms may come from the FlyBase miscellaneous cv.';


--
-- Name: COLUMN expression_cvtermprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.expression_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN expression_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.expression_cvtermprop.rank IS 'Property-Value
ordering. Any expression_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: expression_cvtermprop_expression_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.expression_cvtermprop_expression_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_cvtermprop_expression_cvtermprop_id_seq OWNER TO kmr44;

--
-- Name: expression_cvtermprop_expression_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.expression_cvtermprop_expression_cvtermprop_id_seq OWNED BY public.expression_cvtermprop.expression_cvtermprop_id;


--
-- Name: expression_expression_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.expression_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_expression_id_seq OWNER TO kmr44;

--
-- Name: expression_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.expression_expression_id_seq OWNED BY public.expression.expression_id;


--
-- Name: expression_image; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.expression_image (
    expression_image_id integer NOT NULL,
    expression_id integer NOT NULL,
    eimage_id integer NOT NULL
);


ALTER TABLE public.expression_image OWNER TO kmr44;

--
-- Name: expression_image_expression_image_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.expression_image_expression_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_image_expression_image_id_seq OWNER TO kmr44;

--
-- Name: expression_image_expression_image_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.expression_image_expression_image_id_seq OWNED BY public.expression_image.expression_image_id;


--
-- Name: expression_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.expression_pub (
    expression_pub_id integer NOT NULL,
    expression_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.expression_pub OWNER TO kmr44;

--
-- Name: expression_pub_expression_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.expression_pub_expression_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expression_pub_expression_pub_id_seq OWNER TO kmr44;

--
-- Name: expression_pub_expression_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.expression_pub_expression_pub_id_seq OWNED BY public.expression_pub.expression_pub_id;


--
-- Name: expressionprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.expressionprop (
    expressionprop_id integer NOT NULL,
    expression_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.expressionprop OWNER TO kmr44;

--
-- Name: expressionprop_expressionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.expressionprop_expressionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.expressionprop_expressionprop_id_seq OWNER TO kmr44;

--
-- Name: expressionprop_expressionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.expressionprop_expressionprop_id_seq OWNED BY public.expressionprop.expressionprop_id;


--
-- Name: f_type; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.f_type AS
 SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    c.name AS type,
    f.residues,
    f.seqlen,
    f.md5checksum,
    f.type_id,
    f.timeaccessioned,
    f.timelastmodified
   FROM public.feature f,
    public.cvterm c
  WHERE (f.type_id = c.cvterm_id);


ALTER TABLE public.f_type OWNER TO kmr44;

--
-- Name: f_loc; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.f_loc AS
 SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    fl.nbeg,
    fl.nend,
    fl.strand
   FROM public.dfeatureloc fl,
    public.f_type f
  WHERE (f.feature_id = fl.feature_id);


ALTER TABLE public.f_loc OWNER TO kmr44;

--
-- Name: feature_contains; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.feature_contains AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((y.fmin >= x.fmin) AND (y.fmin <= x.fmax)));


ALTER TABLE public.feature_contains OWNER TO kmr44;

--
-- Name: VIEW feature_contains; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.feature_contains IS 'subject intervals contains (or is
same as) object interval. transitive,reflexive';


--
-- Name: feature_cvterm_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_cvterm_dbxref (
    feature_cvterm_dbxref_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.feature_cvterm_dbxref OWNER TO kmr44;

--
-- Name: TABLE feature_cvterm_dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_cvterm_dbxref IS 'Additional dbxrefs for an association. Rows in the feature_cvterm table may be backed up by dbxrefs. For example, a feature_cvterm association that was inferred via a protein-protein interaction may be backed by by refering to the dbxref for the alternate protein. Corresponds to the WITH column in a GO gene association file (but can also be used for other analagous associations). See http://www.geneontology.org/doc/GO.annotation.shtml#file for more details.';


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq OWNER TO kmr44;

--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq OWNED BY public.feature_cvterm_dbxref.feature_cvterm_dbxref_id;


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_cvterm_feature_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_feature_cvterm_id_seq OWNER TO kmr44;

--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_cvterm_feature_cvterm_id_seq OWNED BY public.feature_cvterm.feature_cvterm_id;


--
-- Name: feature_cvterm_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_cvterm_pub (
    feature_cvterm_pub_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_cvterm_pub OWNER TO kmr44;

--
-- Name: TABLE feature_cvterm_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_cvterm_pub IS 'Secondary pubs for an
association. Each feature_cvterm association is supported by a single
primary publication. Additional secondary pubs can be added using this
linking table (in a GO gene association file, these corresponding to
any IDs after the pipe symbol in the publications column.';


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_cvterm_pub_feature_cvterm_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvterm_pub_feature_cvterm_pub_id_seq OWNER TO kmr44;

--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_cvterm_pub_feature_cvterm_pub_id_seq OWNED BY public.feature_cvterm_pub.feature_cvterm_pub_id;


--
-- Name: feature_cvtermprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_cvtermprop (
    feature_cvtermprop_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_cvtermprop OWNER TO kmr44;

--
-- Name: TABLE feature_cvtermprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_cvtermprop IS 'Extensible properties for
feature to cvterm associations. Examples: GO evidence codes;
qualifiers; metadata such as the date on which the entry was curated
and the source of the association. See the featureprop table for
meanings of type_id, value and rank.';


--
-- Name: COLUMN feature_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. cvterms may come from the OBO evidence code cv.';


--
-- Name: COLUMN feature_cvtermprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN feature_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_cvtermprop.rank IS 'Property-Value
ordering. Any feature_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_cvtermprop_feature_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_cvtermprop_feature_cvtermprop_id_seq OWNER TO kmr44;

--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_cvtermprop_feature_cvtermprop_id_seq OWNED BY public.feature_cvtermprop.feature_cvtermprop_id;


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_dbxref_feature_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_dbxref_feature_dbxref_id_seq OWNER TO kmr44;

--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_dbxref_feature_dbxref_id_seq OWNED BY public.feature_dbxref.feature_dbxref_id;


--
-- Name: feature_difference; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.feature_difference AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.strand AS srcfeature_id,
    x.srcfeature_id AS fmin,
    x.fmin AS fmax,
    y.fmin AS strand
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmin < y.fmin) AND (x.fmax >= y.fmax)))
UNION
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.strand AS srcfeature_id,
    x.srcfeature_id AS fmin,
    y.fmax,
    x.fmax AS strand
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax > y.fmax) AND (x.fmin <= y.fmin)));


ALTER TABLE public.feature_difference OWNER TO kmr44;

--
-- Name: VIEW feature_difference; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.feature_difference IS 'size of gap between two features. must be abutting or disjoint';


--
-- Name: feature_disjoint; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.feature_disjoint AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax < y.fmin) AND (x.fmin > y.fmax)));


ALTER TABLE public.feature_disjoint OWNER TO kmr44;

--
-- Name: VIEW feature_disjoint; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.feature_disjoint IS 'featurelocs do not meet. symmetric';


--
-- Name: feature_distance; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.feature_distance AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmax <= y.fmin) THEN (x.fmax - y.fmin)
            ELSE (y.fmax - x.fmin)
        END AS distance
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax <= y.fmin) OR (x.fmin >= y.fmax)));


ALTER TABLE public.feature_distance OWNER TO kmr44;

--
-- Name: feature_expression; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_expression (
    feature_expression_id integer NOT NULL,
    expression_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_expression OWNER TO kmr44;

--
-- Name: feature_expression_feature_expression_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_expression_feature_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_expression_feature_expression_id_seq OWNER TO kmr44;

--
-- Name: feature_expression_feature_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_expression_feature_expression_id_seq OWNED BY public.feature_expression.feature_expression_id;


--
-- Name: feature_expressionprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_expressionprop (
    feature_expressionprop_id integer NOT NULL,
    feature_expression_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_expressionprop OWNER TO kmr44;

--
-- Name: TABLE feature_expressionprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_expressionprop IS 'Extensible properties for
feature_expression (comments, for example). Modeled on feature_cvtermprop.';


--
-- Name: feature_expressionprop_feature_expressionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_expressionprop_feature_expressionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_expressionprop_feature_expressionprop_id_seq OWNER TO kmr44;

--
-- Name: feature_expressionprop_feature_expressionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_expressionprop_feature_expressionprop_id_seq OWNED BY public.feature_expressionprop.feature_expressionprop_id;


--
-- Name: feature_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_feature_id_seq OWNER TO kmr44;

--
-- Name: feature_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_feature_id_seq OWNED BY public.feature.feature_id;


--
-- Name: feature_genotype; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_genotype (
    feature_genotype_id integer NOT NULL,
    feature_id integer NOT NULL,
    genotype_id integer NOT NULL,
    chromosome_id integer,
    rank integer NOT NULL,
    cgroup integer NOT NULL,
    cvterm_id integer NOT NULL
);


ALTER TABLE public.feature_genotype OWNER TO kmr44;

--
-- Name: COLUMN feature_genotype.chromosome_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_genotype.chromosome_id IS 'A feature of SO type "chromosome".';


--
-- Name: COLUMN feature_genotype.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_genotype.rank IS 'rank can be used for
n-ploid organisms or to preserve order.';


--
-- Name: COLUMN feature_genotype.cgroup; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_genotype.cgroup IS 'Spatially distinguishable
group. group can be used for distinguishing the chromosomal groups,
for example (RNAi products and so on can be treated as different
groups, as they do not fall on a particular chromosome).';


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_genotype_feature_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_genotype_feature_genotype_id_seq OWNER TO kmr44;

--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_genotype_feature_genotype_id_seq OWNED BY public.feature_genotype.feature_genotype_id;


--
-- Name: feature_intersection; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.feature_intersection AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmin < y.fmin) THEN y.fmin
            ELSE x.fmin
        END AS fmin,
        CASE
            WHEN (x.fmax > y.fmax) THEN y.fmax
            ELSE x.fmax
        END AS fmax
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


ALTER TABLE public.feature_intersection OWNER TO kmr44;

--
-- Name: VIEW feature_intersection; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.feature_intersection IS 'set-intersection on interval defined by featureloc. featurelocs must meet';


--
-- Name: feature_meets; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.feature_meets AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


ALTER TABLE public.feature_meets OWNER TO kmr44;

--
-- Name: VIEW feature_meets; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.feature_meets IS 'intervals have at least one
interbase point in common (ie overlap OR abut). symmetric,reflexive';


--
-- Name: feature_meets_on_same_strand; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.feature_meets_on_same_strand AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND (x.strand = y.strand) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


ALTER TABLE public.feature_meets_on_same_strand OWNER TO kmr44;

--
-- Name: VIEW feature_meets_on_same_strand; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.feature_meets_on_same_strand IS 'as feature_meets, but
featurelocs must be on the same strand. symmetric,reflexive';


--
-- Name: feature_phenotype; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_phenotype (
    feature_phenotype_id integer NOT NULL,
    feature_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


ALTER TABLE public.feature_phenotype OWNER TO kmr44;

--
-- Name: feature_phenotype_feature_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_phenotype_feature_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_phenotype_feature_phenotype_id_seq OWNER TO kmr44;

--
-- Name: feature_phenotype_feature_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_phenotype_feature_phenotype_id_seq OWNED BY public.feature_phenotype.feature_phenotype_id;


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_pub_feature_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_pub_feature_pub_id_seq OWNER TO kmr44;

--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_pub_feature_pub_id_seq OWNED BY public.feature_pub.feature_pub_id;


--
-- Name: feature_pubprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_pubprop (
    feature_pubprop_id integer NOT NULL,
    feature_pub_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_pubprop OWNER TO kmr44;

--
-- Name: TABLE feature_pubprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_pubprop IS 'Property or attribute of a feature_pub link.';


--
-- Name: feature_pubprop_feature_pubprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_pubprop_feature_pubprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_pubprop_feature_pubprop_id_seq OWNER TO kmr44;

--
-- Name: feature_pubprop_feature_pubprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_pubprop_feature_pubprop_id_seq OWNED BY public.feature_pubprop.feature_pubprop_id;


--
-- Name: feature_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_relationship (
    feature_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_relationship OWNER TO kmr44;

--
-- Name: TABLE feature_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_relationship IS 'Features can be arranged in
graphs, e.g. "exon part_of transcript part_of gene"; If type is
thought of as a verb, the each arc or edge makes a statement
[Subject Verb Object]. The object can also be thought of as parent
(containing feature), and subject as child (contained feature or
subfeature). We include the relationship rank/order, because even
though most of the time we can order things implicitly by sequence
coordinates, we can not always do this - e.g. transpliced genes. It is also
useful for quickly getting implicit introns.';


--
-- Name: COLUMN feature_relationship.subject_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_relationship.subject_id IS 'The subject of the subj-predicate-obj sentence. This is typically the subfeature.';


--
-- Name: COLUMN feature_relationship.object_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_relationship.object_id IS 'The object of the subj-predicate-obj sentence. This is typically the container feature.';


--
-- Name: COLUMN feature_relationship.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_relationship.type_id IS 'Relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed. The most common relationship type is OBO_REL:part_of. Valid relationship types are constrained by the Sequence Ontology.';


--
-- Name: COLUMN feature_relationship.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_relationship.value IS 'Additional notes or comments.';


--
-- Name: COLUMN feature_relationship.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_relationship.rank IS 'The ordering of subject features with respect to the object feature may be important (for example, exon ordering on a transcript - not always derivable if you take trans spliced genes into consideration). Rank is used to order these; starts from zero.';


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_relationship_feature_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationship_feature_relationship_id_seq OWNER TO kmr44;

--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_relationship_feature_relationship_id_seq OWNED BY public.feature_relationship.feature_relationship_id;


--
-- Name: feature_relationship_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_relationship_pub (
    feature_relationship_pub_id integer NOT NULL,
    feature_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_relationship_pub OWNER TO kmr44;

--
-- Name: TABLE feature_relationship_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_relationship_pub IS 'Provenance. Attach optional evidence to a feature_relationship in the form of a publication.';


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_relationship_pub_feature_relationship_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationship_pub_feature_relationship_pub_id_seq OWNER TO kmr44;

--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_relationship_pub_feature_relationship_pub_id_seq OWNED BY public.feature_relationship_pub.feature_relationship_pub_id;


--
-- Name: feature_relationshipprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_relationshipprop (
    feature_relationshipprop_id integer NOT NULL,
    feature_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.feature_relationshipprop OWNER TO kmr44;

--
-- Name: TABLE feature_relationshipprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_relationshipprop IS 'Extensible properties
for feature_relationships. Analagous structure to featureprop. This
table is largely optional and not used with a high frequency. Typical
scenarios may be if one wishes to attach additional data to a
feature_relationship - for example to say that the
feature_relationship is only true in certain contexts.';


--
-- Name: COLUMN feature_relationshipprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_relationshipprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. Currently there is no standard ontology for
feature_relationship property types.';


--
-- Name: COLUMN feature_relationshipprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_relationshipprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN feature_relationshipprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.feature_relationshipprop.rank IS 'Property-Value
ordering. Any feature_relationship can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_relationshipprop_feature_relationshipprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationshipprop_feature_relationshipprop_id_seq OWNER TO kmr44;

--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_relationshipprop_feature_relationshipprop_id_seq OWNED BY public.feature_relationshipprop.feature_relationshipprop_id;


--
-- Name: feature_relationshipprop_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.feature_relationshipprop_pub (
    feature_relationshipprop_pub_id integer NOT NULL,
    feature_relationshipprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.feature_relationshipprop_pub OWNER TO kmr44;

--
-- Name: TABLE feature_relationshipprop_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.feature_relationshipprop_pub IS 'Provenance for feature_relationshipprop.';


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq OWNER TO kmr44;

--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq OWNED BY public.feature_relationshipprop_pub.feature_relationshipprop_pub_id;


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_synonym_feature_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_synonym_feature_synonym_id_seq OWNER TO kmr44;

--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.feature_synonym_feature_synonym_id_seq OWNED BY public.feature_synonym.feature_synonym_id;


--
-- Name: feature_union; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.feature_union AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmin < y.fmin) THEN x.fmin
            ELSE y.fmin
        END AS fmin,
        CASE
            WHEN (x.fmax > y.fmax) THEN x.fmax
            ELSE y.fmax
        END AS fmax
   FROM public.featureloc x,
    public.featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


ALTER TABLE public.feature_union OWNER TO kmr44;

--
-- Name: VIEW feature_union; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.feature_union IS 'set-union on interval defined by featureloc. featurelocs must meet';


--
-- Name: feature_uniquename_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.feature_uniquename_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.feature_uniquename_seq OWNER TO kmr44;

--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featureloc_featureloc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureloc_featureloc_id_seq OWNER TO kmr44;

--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featureloc_featureloc_id_seq OWNED BY public.featureloc.featureloc_id;


--
-- Name: featureloc_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.featureloc_pub (
    featureloc_pub_id integer NOT NULL,
    featureloc_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.featureloc_pub OWNER TO kmr44;

--
-- Name: TABLE featureloc_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.featureloc_pub IS 'Provenance of featureloc. Linking table between featurelocs and publications that mention them.';


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featureloc_pub_featureloc_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureloc_pub_featureloc_pub_id_seq OWNER TO kmr44;

--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featureloc_pub_featureloc_pub_id_seq OWNED BY public.featureloc_pub.featureloc_pub_id;


--
-- Name: featuremap; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.featuremap (
    featuremap_id integer NOT NULL,
    name character varying(255),
    description text,
    unittype_id integer
);


ALTER TABLE public.featuremap OWNER TO kmr44;

--
-- Name: featuremap_featuremap_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featuremap_featuremap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featuremap_featuremap_id_seq OWNER TO kmr44;

--
-- Name: featuremap_featuremap_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featuremap_featuremap_id_seq OWNED BY public.featuremap.featuremap_id;


--
-- Name: featuremap_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.featuremap_pub (
    featuremap_pub_id integer NOT NULL,
    featuremap_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.featuremap_pub OWNER TO kmr44;

--
-- Name: featuremap_pub_featuremap_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featuremap_pub_featuremap_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featuremap_pub_featuremap_pub_id_seq OWNER TO kmr44;

--
-- Name: featuremap_pub_featuremap_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featuremap_pub_featuremap_pub_id_seq OWNED BY public.featuremap_pub.featuremap_pub_id;


--
-- Name: featurepos; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.featurepos (
    featurepos_id integer NOT NULL,
    featuremap_id integer NOT NULL,
    feature_id integer NOT NULL,
    map_feature_id integer NOT NULL,
    mappos double precision NOT NULL
);


ALTER TABLE public.featurepos OWNER TO kmr44;

--
-- Name: COLUMN featurepos.map_feature_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featurepos.map_feature_id IS 'map_feature_id
links to the feature (map) upon which the feature is being localized.';


--
-- Name: featurepos_featuremap_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featurepos_featuremap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featurepos_featuremap_id_seq OWNER TO kmr44;

--
-- Name: featurepos_featuremap_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featurepos_featuremap_id_seq OWNED BY public.featurepos.featuremap_id;


--
-- Name: featurepos_featurepos_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featurepos_featurepos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featurepos_featurepos_id_seq OWNER TO kmr44;

--
-- Name: featurepos_featurepos_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featurepos_featurepos_id_seq OWNED BY public.featurepos.featurepos_id;


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featureprop_featureprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureprop_featureprop_id_seq OWNER TO kmr44;

--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featureprop_featureprop_id_seq OWNED BY public.featureprop.featureprop_id;


--
-- Name: featureprop_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.featureprop_pub (
    featureprop_pub_id integer NOT NULL,
    featureprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.featureprop_pub OWNER TO kmr44;

--
-- Name: TABLE featureprop_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.featureprop_pub IS 'Provenance. Any featureprop assignment can optionally be supported by a publication.';


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featureprop_pub_featureprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featureprop_pub_featureprop_pub_id_seq OWNER TO kmr44;

--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featureprop_pub_featureprop_pub_id_seq OWNED BY public.featureprop_pub.featureprop_pub_id;


--
-- Name: featurerange; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.featurerange (
    featurerange_id integer NOT NULL,
    featuremap_id integer NOT NULL,
    feature_id integer NOT NULL,
    leftstartf_id integer NOT NULL,
    leftendf_id integer,
    rightstartf_id integer,
    rightendf_id integer NOT NULL,
    rangestr character varying(255)
);


ALTER TABLE public.featurerange OWNER TO kmr44;

--
-- Name: TABLE featurerange; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.featurerange IS 'In cases where the start and end of a mapped feature is a range, leftendf and rightstartf are populated. leftstartf_id, leftendf_id, rightstartf_id, rightendf_id are the ids of features with respect to which the feature is being mapped. These may be cytological bands.';


--
-- Name: COLUMN featurerange.featuremap_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.featurerange.featuremap_id IS 'featuremap_id is the id of the feature being mapped.';


--
-- Name: featurerange_featurerange_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.featurerange_featurerange_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.featurerange_featurerange_id_seq OWNER TO kmr44;

--
-- Name: featurerange_featurerange_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.featurerange_featurerange_id_seq OWNED BY public.featurerange.featurerange_id;


--
-- Name: featureset_meets; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.featureset_meets AS
 SELECT x.object_id AS subject_id,
    y.object_id
   FROM ((public.feature_meets r
     JOIN public.feature_relationship x ON ((r.subject_id = x.subject_id)))
     JOIN public.feature_relationship y ON ((r.object_id = y.subject_id)));


ALTER TABLE public.featureset_meets OWNER TO kmr44;

--
-- Name: fnr_type; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.fnr_type AS
 SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    c.name AS type,
    f.residues,
    f.seqlen,
    f.md5checksum,
    f.type_id,
    f.timeaccessioned,
    f.timelastmodified
   FROM (public.feature f
     LEFT JOIN public.analysisfeature af ON ((f.feature_id = af.feature_id))),
    public.cvterm c
  WHERE ((f.type_id = c.cvterm_id) AND (af.feature_id IS NULL));


ALTER TABLE public.fnr_type OWNER TO kmr44;

--
-- Name: fp_key; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.fp_key AS
 SELECT fp.feature_id,
    c.name AS pkey,
    fp.value
   FROM public.featureprop fp,
    public.cvterm c
  WHERE (fp.featureprop_id = c.cvterm_id);


ALTER TABLE public.fp_key OWNER TO kmr44;

--
-- Name: genotype; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.genotype (
    genotype_id integer NOT NULL,
    name text,
    uniquename text NOT NULL,
    description character varying(255),
    type_id integer NOT NULL
);


ALTER TABLE public.genotype OWNER TO kmr44;

--
-- Name: TABLE genotype; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.genotype IS 'Genetic context. A genotype is defined by a collection of features, mutations, balancers, deficiencies, haplotype blocks, or engineered constructs.';


--
-- Name: COLUMN genotype.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.genotype.name IS 'Optional alternative name for a genotype, 
for display purposes.';


--
-- Name: COLUMN genotype.uniquename; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.genotype.uniquename IS 'The unique name for a genotype; 
typically derived from the features making up the genotype.';


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.genotype_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.genotype_genotype_id_seq OWNER TO kmr44;

--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.genotype_genotype_id_seq OWNED BY public.genotype.genotype_id;


--
-- Name: genotypeprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.genotypeprop (
    genotypeprop_id integer NOT NULL,
    genotype_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.genotypeprop OWNER TO kmr44;

--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.genotypeprop_genotypeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.genotypeprop_genotypeprop_id_seq OWNER TO kmr44;

--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.genotypeprop_genotypeprop_id_seq OWNED BY public.genotypeprop.genotypeprop_id;


--
-- Name: gff3atts; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.gff3atts AS
 SELECT fs.feature_id,
    'Ontology_term'::text AS type,
        CASE
            WHEN ((db.name)::text ~~ '%Gene Ontology%'::text) THEN (('GO:'::text || (dbx.accession)::text))::character varying
            WHEN ((db.name)::text ~~ 'Sequence Ontology%'::text) THEN (('SO:'::text || (dbx.accession)::text))::character varying
            ELSE ((((db.name)::text || ':'::text) || (dbx.accession)::text))::character varying
        END AS attribute
   FROM public.cvterm s,
    public.dbxref dbx,
    public.feature_cvterm fs,
    public.db
  WHERE ((fs.cvterm_id = s.cvterm_id) AND (s.dbxref_id = dbx.dbxref_id) AND (db.db_id = dbx.db_id))
UNION ALL
 SELECT fs.feature_id,
    'Dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM public.dbxref s,
    public.feature_dbxref fs,
    public.db d
  WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id) AND ((d.name)::text <> 'GFF_source'::text))
UNION ALL
 SELECT f.feature_id,
    'Alias'::text AS type,
    s.name AS attribute
   FROM public.synonym s,
    public.feature_synonym fs,
    public.feature f
  WHERE ((fs.synonym_id = s.synonym_id) AND (f.feature_id = fs.feature_id) AND ((f.name)::text <> (s.name)::text) AND (f.uniquename <> (s.name)::text))
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM public.featureprop fp,
    public.cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM public.pub s,
    public.feature_pub fs
  WHERE (fs.pub_id = s.pub_id)
UNION ALL
 SELECT fr.subject_id AS feature_id,
    'Parent'::text AS type,
    parent.uniquename AS attribute
   FROM public.feature_relationship fr,
    public.feature parent
  WHERE ((fr.object_id = parent.feature_id) AND (fr.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE (((cvterm.name)::text = 'part_of'::text) AND (cvterm.cv_id IN ( SELECT cv.cv_id
                   FROM public.cv
                  WHERE ((cv.name)::text = 'relationship'::text)))))))
UNION ALL
 SELECT fr.subject_id AS feature_id,
    'Derives_from'::text AS type,
    parent.uniquename AS attribute
   FROM public.feature_relationship fr,
    public.feature parent
  WHERE ((fr.object_id = parent.feature_id) AND (fr.type_id = ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE (((cvterm.name)::text = 'derives_from'::text) AND (cvterm.cv_id IN ( SELECT cv.cv_id
                   FROM public.cv
                  WHERE ((cv.name)::text = 'relationship'::text)))))))
UNION ALL
 SELECT fl.feature_id,
    'Target'::text AS type,
    (((((((target.name)::text || ' '::text) || (fl.fmin + 1)) || ' '::text) || fl.fmax) || ' '::text) || fl.strand) AS attribute
   FROM public.featureloc fl,
    public.feature target
  WHERE ((fl.srcfeature_id = target.feature_id) AND (fl.rank <> 0))
UNION ALL
 SELECT feature.feature_id,
    'ID'::text AS type,
    feature.uniquename AS attribute
   FROM public.feature
  WHERE (NOT (feature.type_id IN ( SELECT cvterm.cvterm_id
           FROM public.cvterm
          WHERE ((cvterm.name)::text = 'CDS'::text))))
UNION ALL
 SELECT feature.feature_id,
    'chado_feature_id'::text AS type,
    (feature.feature_id)::character varying AS attribute
   FROM public.feature
UNION ALL
 SELECT feature.feature_id,
    'Name'::text AS type,
    feature.name AS attribute
   FROM public.feature;


ALTER TABLE public.gff3atts OWNER TO kmr44;

--
-- Name: gff3view; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.gff3view AS
 SELECT f.feature_id,
    sf.name AS ref,
    COALESCE(gffdbx.accession, '.'::character varying(255)) AS source,
    cv.name AS type,
    (fl.fmin + 1) AS fstart,
    fl.fmax AS fend,
    COALESCE((af.significance)::text, '.'::text) AS score,
        CASE
            WHEN (fl.strand = '-1'::integer) THEN '-'::text
            WHEN (fl.strand = 1) THEN '+'::text
            ELSE '.'::text
        END AS strand,
    COALESCE((fl.phase)::text, '.'::text) AS phase,
    f.seqlen,
    f.name,
    f.organism_id
   FROM (((((public.feature f
     LEFT JOIN public.featureloc fl ON ((f.feature_id = fl.feature_id)))
     LEFT JOIN public.feature sf ON ((fl.srcfeature_id = sf.feature_id)))
     LEFT JOIN ( SELECT fd.feature_id,
            d.accession
           FROM ((public.feature_dbxref fd
             JOIN public.dbxref d USING (dbxref_id))
             JOIN public.db USING (db_id))
          WHERE ((db.name)::text = 'GFF_source'::text)) gffdbx ON ((f.feature_id = gffdbx.feature_id)))
     LEFT JOIN public.cvterm cv ON ((f.type_id = cv.cvterm_id)))
     LEFT JOIN public.analysisfeature af ON ((f.feature_id = af.feature_id)));


ALTER TABLE public.gff3view OWNER TO kmr44;

--
-- Name: intron_combined_view; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.intron_combined_view AS
 SELECT x1.feature_id AS exon1_id,
    x2.feature_id AS exon2_id,
        CASE
            WHEN (l1.strand = '-1'::integer) THEN l2.fmax
            ELSE l1.fmax
        END AS fmin,
        CASE
            WHEN (l1.strand = '-1'::integer) THEN l1.fmin
            ELSE l2.fmin
        END AS fmax,
    l1.strand,
    l1.srcfeature_id,
    r1.rank AS intron_rank,
    r1.object_id AS transcript_id
   FROM ((((((public.cvterm
     JOIN public.feature x1 ON ((x1.type_id = cvterm.cvterm_id)))
     JOIN public.feature_relationship r1 ON ((x1.feature_id = r1.subject_id)))
     JOIN public.featureloc l1 ON ((x1.feature_id = l1.feature_id)))
     JOIN public.feature x2 ON ((x2.type_id = cvterm.cvterm_id)))
     JOIN public.feature_relationship r2 ON ((x2.feature_id = r2.subject_id)))
     JOIN public.featureloc l2 ON ((x2.feature_id = l2.feature_id)))
  WHERE (((cvterm.name)::text = 'exon'::text) AND ((r2.rank - r1.rank) = 1) AND (r1.object_id = r2.object_id) AND (l1.strand = l2.strand) AND (l1.srcfeature_id = l2.srcfeature_id) AND (l1.locgroup = 0) AND (l2.locgroup = 0));


ALTER TABLE public.intron_combined_view OWNER TO kmr44;

--
-- Name: intronloc_view; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.intronloc_view AS
 SELECT DISTINCT intron_combined_view.exon1_id,
    intron_combined_view.exon2_id,
    intron_combined_view.fmin,
    intron_combined_view.fmax,
    intron_combined_view.strand,
    intron_combined_view.srcfeature_id
   FROM public.intron_combined_view;


ALTER TABLE public.intronloc_view OWNER TO kmr44;

--
-- Name: library; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.library (
    library_id integer NOT NULL,
    organism_id integer NOT NULL,
    name character varying(255),
    uniquename text NOT NULL,
    type_id integer NOT NULL,
    is_obsolete integer DEFAULT 0 NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT now() NOT NULL,
    timelastmodified timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.library OWNER TO kmr44;

--
-- Name: COLUMN library.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.library.type_id IS 'The type_id foreign key links
to a controlled vocabulary of library types. Examples of this would be: "cDNA_library" or "genomic_library"';


--
-- Name: library_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.library_cvterm (
    library_cvterm_id integer NOT NULL,
    library_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.library_cvterm OWNER TO kmr44;

--
-- Name: TABLE library_cvterm; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.library_cvterm IS 'The table library_cvterm links a library to controlled vocabularies which describe the library.  For instance, there might be a link to the anatomy cv for "head" or "testes" for a head or testes library.';


--
-- Name: library_cvterm_library_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.library_cvterm_library_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_cvterm_library_cvterm_id_seq OWNER TO kmr44;

--
-- Name: library_cvterm_library_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.library_cvterm_library_cvterm_id_seq OWNED BY public.library_cvterm.library_cvterm_id;


--
-- Name: library_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.library_dbxref (
    library_dbxref_id integer NOT NULL,
    library_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.library_dbxref OWNER TO kmr44;

--
-- Name: library_dbxref_library_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.library_dbxref_library_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_dbxref_library_dbxref_id_seq OWNER TO kmr44;

--
-- Name: library_dbxref_library_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.library_dbxref_library_dbxref_id_seq OWNED BY public.library_dbxref.library_dbxref_id;


--
-- Name: library_feature; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.library_feature (
    library_feature_id integer NOT NULL,
    library_id integer NOT NULL,
    feature_id integer NOT NULL
);


ALTER TABLE public.library_feature OWNER TO kmr44;

--
-- Name: TABLE library_feature; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.library_feature IS 'library_feature links a library to the clones which are contained in the library.  Examples of such linked features might be "cDNA_clone" or  "genomic_clone".';


--
-- Name: library_feature_library_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.library_feature_library_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_feature_library_feature_id_seq OWNER TO kmr44;

--
-- Name: library_feature_library_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.library_feature_library_feature_id_seq OWNED BY public.library_feature.library_feature_id;


--
-- Name: library_library_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.library_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_library_id_seq OWNER TO kmr44;

--
-- Name: library_library_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.library_library_id_seq OWNED BY public.library.library_id;


--
-- Name: library_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.library_pub (
    library_pub_id integer NOT NULL,
    library_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.library_pub OWNER TO kmr44;

--
-- Name: library_pub_library_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.library_pub_library_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_pub_library_pub_id_seq OWNER TO kmr44;

--
-- Name: library_pub_library_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.library_pub_library_pub_id_seq OWNED BY public.library_pub.library_pub_id;


--
-- Name: library_synonym; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.library_synonym (
    library_synonym_id integer NOT NULL,
    synonym_id integer NOT NULL,
    library_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


ALTER TABLE public.library_synonym OWNER TO kmr44;

--
-- Name: COLUMN library_synonym.pub_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.library_synonym.pub_id IS 'The pub_id link is for
relating the usage of a given synonym to the publication in which it was used.';


--
-- Name: COLUMN library_synonym.is_current; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.library_synonym.is_current IS 'The is_current bit indicates whether the linked synonym is the current -official- symbol for the linked library.';


--
-- Name: COLUMN library_synonym.is_internal; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.library_synonym.is_internal IS 'Typically a synonym
exists so that somebody querying the database with an obsolete name
can find the object they are looking for under its current name.  If
the synonym has been used publicly and deliberately (e.g. in a paper), it my also be listed in reports as a synonym.   If the synonym was not used deliberately (e.g., there was a typo which went public), then the is_internal bit may be set to "true" so that it is known that the synonym is "internal" and should be queryable but should not be listed in reports as a valid synonym.';


--
-- Name: library_synonym_library_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.library_synonym_library_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.library_synonym_library_synonym_id_seq OWNER TO kmr44;

--
-- Name: library_synonym_library_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.library_synonym_library_synonym_id_seq OWNED BY public.library_synonym.library_synonym_id;


--
-- Name: libraryprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.libraryprop (
    libraryprop_id integer NOT NULL,
    library_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.libraryprop OWNER TO kmr44;

--
-- Name: libraryprop_libraryprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.libraryprop_libraryprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.libraryprop_libraryprop_id_seq OWNER TO kmr44;

--
-- Name: libraryprop_libraryprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.libraryprop_libraryprop_id_seq OWNED BY public.libraryprop.libraryprop_id;


--
-- Name: libraryprop_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.libraryprop_pub (
    libraryprop_pub_id integer NOT NULL,
    libraryprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.libraryprop_pub OWNER TO kmr44;

--
-- Name: libraryprop_pub_libraryprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.libraryprop_pub_libraryprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.libraryprop_pub_libraryprop_pub_id_seq OWNER TO kmr44;

--
-- Name: libraryprop_pub_libraryprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.libraryprop_pub_libraryprop_pub_id_seq OWNED BY public.libraryprop_pub.libraryprop_pub_id;


--
-- Name: magedocumentation; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.magedocumentation (
    magedocumentation_id integer NOT NULL,
    mageml_id integer NOT NULL,
    tableinfo_id integer NOT NULL,
    row_id integer NOT NULL,
    mageidentifier text NOT NULL
);


ALTER TABLE public.magedocumentation OWNER TO kmr44;

--
-- Name: magedocumentation_magedocumentation_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.magedocumentation_magedocumentation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.magedocumentation_magedocumentation_id_seq OWNER TO kmr44;

--
-- Name: magedocumentation_magedocumentation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.magedocumentation_magedocumentation_id_seq OWNED BY public.magedocumentation.magedocumentation_id;


--
-- Name: mageml; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.mageml (
    mageml_id integer NOT NULL,
    mage_package text NOT NULL,
    mage_ml text NOT NULL
);


ALTER TABLE public.mageml OWNER TO kmr44;

--
-- Name: TABLE mageml; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.mageml IS 'This table is for storing extra bits of MAGEml in a denormalized form. More normalization would require many more tables.';


--
-- Name: mageml_mageml_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.mageml_mageml_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.mageml_mageml_id_seq OWNER TO kmr44;

--
-- Name: mageml_mageml_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.mageml_mageml_id_seq OWNED BY public.mageml.mageml_id;


--
-- Name: materialized_view; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.materialized_view (
    materialized_view_id integer NOT NULL,
    last_update timestamp without time zone,
    refresh_time integer,
    name character varying(64),
    mv_schema character varying(64),
    mv_table character varying(128),
    mv_specs text,
    indexed text,
    query text,
    special_index text
);


ALTER TABLE public.materialized_view OWNER TO kmr44;

--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.materialized_view_materialized_view_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.materialized_view_materialized_view_id_seq OWNER TO kmr44;

--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.materialized_view_materialized_view_id_seq OWNED BY public.materialized_view.materialized_view_id;


--
-- Name: nd_experiment; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment (
    nd_experiment_id integer NOT NULL,
    nd_geolocation_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_experiment OWNER TO kmr44;

--
-- Name: nd_experiment_contact; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_contact (
    nd_experiment_contact_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    contact_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_contact OWNER TO kmr44;

--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_contact_nd_experiment_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_contact_nd_experiment_contact_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_contact_nd_experiment_contact_id_seq OWNED BY public.nd_experiment_contact.nd_experiment_contact_id;


--
-- Name: nd_experiment_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_dbxref (
    nd_experiment_dbxref_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_dbxref OWNER TO kmr44;

--
-- Name: TABLE nd_experiment_dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_experiment_dbxref IS 'Cross-reference experiment to accessions, images, etc';


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq OWNED BY public.nd_experiment_dbxref.nd_experiment_dbxref_id;


--
-- Name: nd_experiment_genotype; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_genotype (
    nd_experiment_genotype_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    genotype_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_genotype OWNER TO kmr44;

--
-- Name: TABLE nd_experiment_genotype; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_experiment_genotype IS 'Linking table: experiments to the genotypes they produce. There is a one-to-one relationship between an experiment and a genotype since each genotype record should point to one experiment. Add a new experiment_id for each genotype record.';


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_genotype_nd_experiment_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_genotype_nd_experiment_genotype_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_genotype_nd_experiment_genotype_id_seq OWNED BY public.nd_experiment_genotype.nd_experiment_genotype_id;


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_nd_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_nd_experiment_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_nd_experiment_id_seq OWNED BY public.nd_experiment.nd_experiment_id;


--
-- Name: nd_experiment_phenotype; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_phenotype (
    nd_experiment_phenotype_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_phenotype OWNER TO kmr44;

--
-- Name: TABLE nd_experiment_phenotype; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_experiment_phenotype IS 'Linking table: experiments to the phenotypes they produce. There is a one-to-one relationship between an experiment and a phenotype since each phenotype record should point to one experiment. Add a new experiment_id for each phenotype record.';


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq OWNED BY public.nd_experiment_phenotype.nd_experiment_phenotype_id;


--
-- Name: nd_experiment_project; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_project (
    nd_experiment_project_id integer NOT NULL,
    project_id integer NOT NULL,
    nd_experiment_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_project OWNER TO kmr44;

--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_project_nd_experiment_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_project_nd_experiment_project_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_project_nd_experiment_project_id_seq OWNED BY public.nd_experiment_project.nd_experiment_project_id;


--
-- Name: nd_experiment_protocol; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_protocol (
    nd_experiment_protocol_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    nd_protocol_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_protocol OWNER TO kmr44;

--
-- Name: TABLE nd_experiment_protocol; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_experiment_protocol IS 'Linking table: experiments to the protocols they involve.';


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_protocol_nd_experiment_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_protocol_nd_experiment_protocol_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_protocol_nd_experiment_protocol_id_seq OWNED BY public.nd_experiment_protocol.nd_experiment_protocol_id;


--
-- Name: nd_experiment_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_pub (
    nd_experiment_pub_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_pub OWNER TO kmr44;

--
-- Name: TABLE nd_experiment_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_experiment_pub IS 'Linking nd_experiment(s) to publication(s)';


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_pub_nd_experiment_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_pub_nd_experiment_pub_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_pub_nd_experiment_pub_id_seq OWNED BY public.nd_experiment_pub.nd_experiment_pub_id;


--
-- Name: nd_experiment_stock; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_stock (
    nd_experiment_stock_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    stock_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_stock OWNER TO kmr44;

--
-- Name: TABLE nd_experiment_stock; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_experiment_stock IS 'Part of a stock or a clone of a stock that is used in an experiment';


--
-- Name: COLUMN nd_experiment_stock.stock_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_experiment_stock.stock_id IS 'stock used in the extraction or the corresponding stock for the clone';


--
-- Name: nd_experiment_stock_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_stock_dbxref (
    nd_experiment_stock_dbxref_id integer NOT NULL,
    nd_experiment_stock_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.nd_experiment_stock_dbxref OWNER TO kmr44;

--
-- Name: TABLE nd_experiment_stock_dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_experiment_stock_dbxref IS 'Cross-reference experiment_stock to accessions, images, etc';


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq OWNED BY public.nd_experiment_stock_dbxref.nd_experiment_stock_dbxref_id;


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_stock_nd_experiment_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stock_nd_experiment_stock_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_stock_nd_experiment_stock_id_seq OWNED BY public.nd_experiment_stock.nd_experiment_stock_id;


--
-- Name: nd_experiment_stockprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experiment_stockprop (
    nd_experiment_stockprop_id integer NOT NULL,
    nd_experiment_stock_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_experiment_stockprop OWNER TO kmr44;

--
-- Name: TABLE nd_experiment_stockprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_experiment_stockprop IS 'Property/value associations for experiment_stocks. This table can store the properties such as treatment';


--
-- Name: COLUMN nd_experiment_stockprop.nd_experiment_stock_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_experiment_stockprop.nd_experiment_stock_id IS 'The experiment_stock to which the property applies.';


--
-- Name: COLUMN nd_experiment_stockprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_experiment_stockprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_experiment_stockprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_experiment_stockprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_experiment_stockprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_experiment_stockprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq OWNER TO kmr44;

--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq OWNED BY public.nd_experiment_stockprop.nd_experiment_stockprop_id;


--
-- Name: nd_experimentprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_experimentprop (
    nd_experimentprop_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_experimentprop OWNER TO kmr44;

--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_experimentprop_nd_experimentprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_experimentprop_nd_experimentprop_id_seq OWNER TO kmr44;

--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_experimentprop_nd_experimentprop_id_seq OWNED BY public.nd_experimentprop.nd_experimentprop_id;


--
-- Name: nd_geolocation; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_geolocation (
    nd_geolocation_id integer NOT NULL,
    description character varying(255),
    latitude real,
    longitude real,
    geodetic_datum character varying(32),
    altitude real
);


ALTER TABLE public.nd_geolocation OWNER TO kmr44;

--
-- Name: TABLE nd_geolocation; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_geolocation IS 'The geo-referencable location of the stock. NOTE: This entity is subject to change as a more general and possibly more OpenGIS-compliant geolocation module may be introduced into Chado.';


--
-- Name: COLUMN nd_geolocation.description; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_geolocation.description IS 'A textual representation of the location, if this is the original georeference. Optional if the original georeference is available in lat/long coordinates.';


--
-- Name: COLUMN nd_geolocation.latitude; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_geolocation.latitude IS 'The decimal latitude coordinate of the georeference, using positive and negative sign to indicate N and S, respectively.';


--
-- Name: COLUMN nd_geolocation.longitude; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_geolocation.longitude IS 'The decimal longitude coordinate of the georeference, using positive and negative sign to indicate E and W, respectively.';


--
-- Name: COLUMN nd_geolocation.geodetic_datum; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_geolocation.geodetic_datum IS 'The geodetic system on which the geo-reference coordinates are based. For geo-references measured between 1984 and 2010, this will typically be WGS84.';


--
-- Name: COLUMN nd_geolocation.altitude; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_geolocation.altitude IS 'The altitude (elevation) of the location in meters. If the altitude is only known as a range, this is the average, and altitude_dev will hold half of the width of the range.';


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_geolocation_nd_geolocation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_geolocation_nd_geolocation_id_seq OWNER TO kmr44;

--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_geolocation_nd_geolocation_id_seq OWNED BY public.nd_geolocation.nd_geolocation_id;


--
-- Name: nd_geolocationprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_geolocationprop (
    nd_geolocationprop_id integer NOT NULL,
    nd_geolocation_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_geolocationprop OWNER TO kmr44;

--
-- Name: TABLE nd_geolocationprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_geolocationprop IS 'Property/value associations for geolocations. This table can store the properties such as location and environment';


--
-- Name: COLUMN nd_geolocationprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_geolocationprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_geolocationprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_geolocationprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_geolocationprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_geolocationprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_geolocationprop_nd_geolocationprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_geolocationprop_nd_geolocationprop_id_seq OWNER TO kmr44;

--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_geolocationprop_nd_geolocationprop_id_seq OWNED BY public.nd_geolocationprop.nd_geolocationprop_id;


--
-- Name: nd_protocol; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_protocol (
    nd_protocol_id integer NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_protocol OWNER TO kmr44;

--
-- Name: TABLE nd_protocol; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_protocol IS 'A protocol can be anything that is done as part of the experiment.';


--
-- Name: COLUMN nd_protocol.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_protocol.name IS 'The protocol name.';


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_protocol_nd_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocol_nd_protocol_id_seq OWNER TO kmr44;

--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_protocol_nd_protocol_id_seq OWNED BY public.nd_protocol.nd_protocol_id;


--
-- Name: nd_protocol_reagent; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_protocol_reagent (
    nd_protocol_reagent_id integer NOT NULL,
    nd_protocol_id integer NOT NULL,
    reagent_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_protocol_reagent OWNER TO kmr44;

--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_protocol_reagent_nd_protocol_reagent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocol_reagent_nd_protocol_reagent_id_seq OWNER TO kmr44;

--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_protocol_reagent_nd_protocol_reagent_id_seq OWNED BY public.nd_protocol_reagent.nd_protocol_reagent_id;


--
-- Name: nd_protocolprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_protocolprop (
    nd_protocolprop_id integer NOT NULL,
    nd_protocol_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_protocolprop OWNER TO kmr44;

--
-- Name: TABLE nd_protocolprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_protocolprop IS 'Property/value associations for protocol.';


--
-- Name: COLUMN nd_protocolprop.nd_protocol_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_protocolprop.nd_protocol_id IS 'The protocol to which the property applies.';


--
-- Name: COLUMN nd_protocolprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_protocolprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_protocolprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_protocolprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_protocolprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_protocolprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_protocolprop_nd_protocolprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_protocolprop_nd_protocolprop_id_seq OWNER TO kmr44;

--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_protocolprop_nd_protocolprop_id_seq OWNED BY public.nd_protocolprop.nd_protocolprop_id;


--
-- Name: nd_reagent; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_reagent (
    nd_reagent_id integer NOT NULL,
    name character varying(80) NOT NULL,
    type_id integer NOT NULL,
    feature_id integer
);


ALTER TABLE public.nd_reagent OWNER TO kmr44;

--
-- Name: TABLE nd_reagent; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_reagent IS 'A reagent such as a primer, an enzyme, an adapter oligo, a linker oligo. Reagents are used in genotyping experiments, or in any other kind of experiment.';


--
-- Name: COLUMN nd_reagent.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_reagent.name IS 'The name of the reagent. The name should be unique for a given type.';


--
-- Name: COLUMN nd_reagent.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_reagent.type_id IS 'The type of the reagent, for example linker oligomer, or forward primer.';


--
-- Name: COLUMN nd_reagent.feature_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_reagent.feature_id IS 'If the reagent is a primer, the feature that it corresponds to. More generally, the corresponding feature for any reagent that has a sequence that maps to another sequence.';


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_reagent_nd_reagent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagent_nd_reagent_id_seq OWNER TO kmr44;

--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_reagent_nd_reagent_id_seq OWNED BY public.nd_reagent.nd_reagent_id;


--
-- Name: nd_reagent_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_reagent_relationship (
    nd_reagent_relationship_id integer NOT NULL,
    subject_reagent_id integer NOT NULL,
    object_reagent_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.nd_reagent_relationship OWNER TO kmr44;

--
-- Name: TABLE nd_reagent_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.nd_reagent_relationship IS 'Relationships between reagents. Some reagents form a group. i.e., they are used all together or not at all. Examples are adapter/linker/enzyme experiment reagents.';


--
-- Name: COLUMN nd_reagent_relationship.subject_reagent_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_reagent_relationship.subject_reagent_id IS 'The subject reagent in the relationship. In parent/child terminology, the subject is the child. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: COLUMN nd_reagent_relationship.object_reagent_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_reagent_relationship.object_reagent_id IS 'The object reagent in the relationship. In parent/child terminology, the object is the parent. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: COLUMN nd_reagent_relationship.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.nd_reagent_relationship.type_id IS 'The type (or predicate) of the relationship. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_reagent_relationship_nd_reagent_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagent_relationship_nd_reagent_relationship_id_seq OWNER TO kmr44;

--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_reagent_relationship_nd_reagent_relationship_id_seq OWNED BY public.nd_reagent_relationship.nd_reagent_relationship_id;


--
-- Name: nd_reagentprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.nd_reagentprop (
    nd_reagentprop_id integer NOT NULL,
    nd_reagent_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.nd_reagentprop OWNER TO kmr44;

--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.nd_reagentprop_nd_reagentprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.nd_reagentprop_nd_reagentprop_id_seq OWNER TO kmr44;

--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.nd_reagentprop_nd_reagentprop_id_seq OWNED BY public.nd_reagentprop.nd_reagentprop_id;


--
-- Name: organism; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.organism (
    organism_id integer NOT NULL,
    abbreviation character varying(255),
    genus character varying(255) NOT NULL,
    species character varying(255) NOT NULL,
    common_name character varying(255),
    comment text
);


ALTER TABLE public.organism OWNER TO kmr44;

--
-- Name: TABLE organism; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.organism IS 'The organismal taxonomic
classification. Note that phylogenies are represented using the
phylogeny module, and taxonomies can be represented using the cvterm
module or the phylogeny module.';


--
-- Name: COLUMN organism.species; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.organism.species IS 'A type of organism is always
uniquely identified by genus and species. When mapping from the NCBI
taxonomy names.dmp file, this column must be used where it
is present, as the common_name column is not always unique (e.g. environmental
samples). If a particular strain or subspecies is to be represented,
this is appended onto the species name. Follows standard NCBI taxonomy
pattern.';


--
-- Name: organism_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.organism_dbxref (
    organism_dbxref_id integer NOT NULL,
    organism_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.organism_dbxref OWNER TO kmr44;

--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.organism_dbxref_organism_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organism_dbxref_organism_dbxref_id_seq OWNER TO kmr44;

--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.organism_dbxref_organism_dbxref_id_seq OWNED BY public.organism_dbxref.organism_dbxref_id;


--
-- Name: organism_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.organism_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organism_organism_id_seq OWNER TO kmr44;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.organism_organism_id_seq OWNED BY public.organism.organism_id;


--
-- Name: organismprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.organismprop (
    organismprop_id integer NOT NULL,
    organism_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.organismprop OWNER TO kmr44;

--
-- Name: TABLE organismprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.organismprop IS 'Tag-value properties - follows standard chado model.';


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.organismprop_organismprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organismprop_organismprop_id_seq OWNER TO kmr44;

--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.organismprop_organismprop_id_seq OWNED BY public.organismprop.organismprop_id;


--
-- Name: phendesc; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phendesc (
    phendesc_id integer NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    description text NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phendesc OWNER TO kmr44;

--
-- Name: TABLE phendesc; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phendesc IS 'A summary of a _set_ of phenotypic statements for any one gcontext made in any one publication.';


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phendesc_phendesc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phendesc_phendesc_id_seq OWNER TO kmr44;

--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phendesc_phendesc_id_seq OWNED BY public.phendesc.phendesc_id;


--
-- Name: phenotype; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phenotype (
    phenotype_id integer NOT NULL,
    uniquename text NOT NULL,
    name text,
    observable_id integer,
    attr_id integer,
    value text,
    cvalue_id integer,
    assay_id integer
);


ALTER TABLE public.phenotype OWNER TO kmr44;

--
-- Name: TABLE phenotype; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phenotype IS 'A phenotypic statement, or a single
atomic phenotypic observation, is a controlled sentence describing
observable effects of non-wild type function. E.g. Obs=eye, attribute=color, cvalue=red.';


--
-- Name: COLUMN phenotype.observable_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phenotype.observable_id IS 'The entity: e.g. anatomy_part, biological_process.';


--
-- Name: COLUMN phenotype.attr_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phenotype.attr_id IS 'Phenotypic attribute (quality, property, attribute, character) - drawn from PATO.';


--
-- Name: COLUMN phenotype.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phenotype.value IS 'Value of attribute - unconstrained free text. Used only if cvalue_id is not appropriate.';


--
-- Name: COLUMN phenotype.cvalue_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phenotype.cvalue_id IS 'Phenotype attribute value (state).';


--
-- Name: COLUMN phenotype.assay_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phenotype.assay_id IS 'Evidence type.';


--
-- Name: phenotype_comparison; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phenotype_comparison (
    phenotype_comparison_id integer NOT NULL,
    genotype1_id integer NOT NULL,
    environment1_id integer NOT NULL,
    genotype2_id integer NOT NULL,
    environment2_id integer NOT NULL,
    phenotype1_id integer NOT NULL,
    phenotype2_id integer,
    pub_id integer NOT NULL,
    organism_id integer NOT NULL
);


ALTER TABLE public.phenotype_comparison OWNER TO kmr44;

--
-- Name: TABLE phenotype_comparison; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phenotype_comparison IS 'Comparison of phenotypes e.g., genotype1/environment1/phenotype1 "non-suppressible" with respect to genotype2/environment2/phenotype2.';


--
-- Name: phenotype_comparison_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phenotype_comparison_cvterm (
    phenotype_comparison_cvterm_id integer NOT NULL,
    phenotype_comparison_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phenotype_comparison_cvterm OWNER TO kmr44;

--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq OWNER TO kmr44;

--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq OWNED BY public.phenotype_comparison_cvterm.phenotype_comparison_cvterm_id;


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phenotype_comparison_phenotype_comparison_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_comparison_phenotype_comparison_id_seq OWNER TO kmr44;

--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phenotype_comparison_phenotype_comparison_id_seq OWNED BY public.phenotype_comparison.phenotype_comparison_id;


--
-- Name: phenotype_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phenotype_cvterm (
    phenotype_cvterm_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phenotype_cvterm OWNER TO kmr44;

--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phenotype_cvterm_phenotype_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_cvterm_phenotype_cvterm_id_seq OWNER TO kmr44;

--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phenotype_cvterm_phenotype_cvterm_id_seq OWNED BY public.phenotype_cvterm.phenotype_cvterm_id;


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phenotype_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenotype_phenotype_id_seq OWNER TO kmr44;

--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phenotype_phenotype_id_seq OWNED BY public.phenotype.phenotype_id;


--
-- Name: phenstatement; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phenstatement (
    phenstatement_id integer NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phenstatement OWNER TO kmr44;

--
-- Name: TABLE phenstatement; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phenstatement IS 'Phenotypes are things like "larval lethal".  Phenstatements are things like "dpp-1 is recessive larval lethal". So essentially phenstatement is a linking table expressing the relationship between genotype, environment, and phenotype.';


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phenstatement_phenstatement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phenstatement_phenstatement_id_seq OWNER TO kmr44;

--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phenstatement_phenstatement_id_seq OWNED BY public.phenstatement.phenstatement_id;


--
-- Name: phylonode; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phylonode (
    phylonode_id integer NOT NULL,
    phylotree_id integer NOT NULL,
    parent_phylonode_id integer,
    left_idx integer NOT NULL,
    right_idx integer NOT NULL,
    type_id integer,
    feature_id integer,
    label character varying(255),
    distance double precision
);


ALTER TABLE public.phylonode OWNER TO kmr44;

--
-- Name: TABLE phylonode; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phylonode IS 'This is the most pervasive
       element in the phylogeny module, cataloging the "phylonodes" of
       tree graphs. Edges are implied by the parent_phylonode_id
       reflexive closure. For all nodes in a nested set implementation the left and right index will be *between* the parents left and right indexes.';


--
-- Name: COLUMN phylonode.parent_phylonode_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phylonode.parent_phylonode_id IS 'Root phylonode can have null parent_phylonode_id value.';


--
-- Name: COLUMN phylonode.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phylonode.type_id IS 'Type: e.g. root, interior, leaf.';


--
-- Name: COLUMN phylonode.feature_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phylonode.feature_id IS 'Phylonodes can have optional features attached to them e.g. a protein or nucleotide sequence usually attached to a leaf of the phylotree for non-leaf nodes, the feature may be a feature that is an instance of SO:match; this feature is the alignment of all leaf features beneath it.';


--
-- Name: phylonode_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phylonode_dbxref (
    phylonode_dbxref_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE public.phylonode_dbxref OWNER TO kmr44;

--
-- Name: TABLE phylonode_dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phylonode_dbxref IS 'For example, for orthology, paralogy group identifiers; could also be used for NCBI taxonomy; for sequences, refer to phylonode_feature, feature associated dbxrefs.';


--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phylonode_dbxref_phylonode_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_dbxref_phylonode_dbxref_id_seq OWNER TO kmr44;

--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phylonode_dbxref_phylonode_dbxref_id_seq OWNED BY public.phylonode_dbxref.phylonode_dbxref_id;


--
-- Name: phylonode_organism; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phylonode_organism (
    phylonode_organism_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    organism_id integer NOT NULL
);


ALTER TABLE public.phylonode_organism OWNER TO kmr44;

--
-- Name: TABLE phylonode_organism; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phylonode_organism IS 'This linking table should only be used for nodes in taxonomy trees; it provides a mapping between the node and an organism. One node can have zero or one organisms, one organism can have zero or more nodes (although typically it should only have one in the standard NCBI taxonomy tree).';


--
-- Name: COLUMN phylonode_organism.phylonode_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phylonode_organism.phylonode_id IS 'One phylonode cannot refer to >1 organism.';


--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phylonode_organism_phylonode_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_organism_phylonode_organism_id_seq OWNER TO kmr44;

--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phylonode_organism_phylonode_organism_id_seq OWNED BY public.phylonode_organism.phylonode_organism_id;


--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phylonode_phylonode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_phylonode_id_seq OWNER TO kmr44;

--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phylonode_phylonode_id_seq OWNED BY public.phylonode.phylonode_id;


--
-- Name: phylonode_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phylonode_pub (
    phylonode_pub_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phylonode_pub OWNER TO kmr44;

--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phylonode_pub_phylonode_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_pub_phylonode_pub_id_seq OWNER TO kmr44;

--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phylonode_pub_phylonode_pub_id_seq OWNED BY public.phylonode_pub.phylonode_pub_id;


--
-- Name: phylonode_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phylonode_relationship (
    phylonode_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    rank integer,
    phylotree_id integer NOT NULL
);


ALTER TABLE public.phylonode_relationship OWNER TO kmr44;

--
-- Name: TABLE phylonode_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phylonode_relationship IS 'This is for 
relationships that are not strictly hierarchical; for example,
horizontal gene transfer. Most phylogenetic trees are strictly
hierarchical, nevertheless it is here for completeness.';


--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phylonode_relationship_phylonode_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonode_relationship_phylonode_relationship_id_seq OWNER TO kmr44;

--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phylonode_relationship_phylonode_relationship_id_seq OWNED BY public.phylonode_relationship.phylonode_relationship_id;


--
-- Name: phylonodeprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phylonodeprop (
    phylonodeprop_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.phylonodeprop OWNER TO kmr44;

--
-- Name: COLUMN phylonodeprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phylonodeprop.type_id IS 'type_id could designate phylonode hierarchy relationships, for example: species taxonomy (kingdom, order, family, genus, species), "ortholog/paralog", "fold/superfold", etc.';


--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phylonodeprop_phylonodeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylonodeprop_phylonodeprop_id_seq OWNER TO kmr44;

--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phylonodeprop_phylonodeprop_id_seq OWNED BY public.phylonodeprop.phylonodeprop_id;


--
-- Name: phylotree; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phylotree (
    phylotree_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    name character varying(255),
    type_id integer,
    analysis_id integer,
    comment text
);


ALTER TABLE public.phylotree OWNER TO kmr44;

--
-- Name: TABLE phylotree; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phylotree IS 'Global anchor for phylogenetic tree.';


--
-- Name: COLUMN phylotree.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.phylotree.type_id IS 'Type: protein, nucleotide, taxonomy, for example. The type should be any SO type, or "taxonomy".';


--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phylotree_phylotree_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylotree_phylotree_id_seq OWNER TO kmr44;

--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phylotree_phylotree_id_seq OWNED BY public.phylotree.phylotree_id;


--
-- Name: phylotree_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.phylotree_pub (
    phylotree_pub_id integer NOT NULL,
    phylotree_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.phylotree_pub OWNER TO kmr44;

--
-- Name: TABLE phylotree_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.phylotree_pub IS 'Tracks citations global to the tree e.g. multiple sequence alignment supporting tree construction.';


--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.phylotree_pub_phylotree_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phylotree_pub_phylotree_pub_id_seq OWNER TO kmr44;

--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.phylotree_pub_phylotree_pub_id_seq OWNED BY public.phylotree_pub.phylotree_pub_id;


--
-- Name: project; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.project (
    project_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255) NOT NULL
);


ALTER TABLE public.project OWNER TO kmr44;

--
-- Name: project_contact; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.project_contact (
    project_contact_id integer NOT NULL,
    project_id integer NOT NULL,
    contact_id integer NOT NULL
);


ALTER TABLE public.project_contact OWNER TO kmr44;

--
-- Name: TABLE project_contact; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.project_contact IS 'Linking project(s) to contact(s)';


--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.project_contact_project_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_contact_project_contact_id_seq OWNER TO kmr44;

--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.project_contact_project_contact_id_seq OWNED BY public.project_contact.project_contact_id;


--
-- Name: project_project_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.project_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_project_id_seq OWNER TO kmr44;

--
-- Name: project_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.project_project_id_seq OWNED BY public.project.project_id;


--
-- Name: project_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.project_pub (
    project_pub_id integer NOT NULL,
    project_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.project_pub OWNER TO kmr44;

--
-- Name: TABLE project_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.project_pub IS 'Linking project(s) to publication(s)';


--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.project_pub_project_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_pub_project_pub_id_seq OWNER TO kmr44;

--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.project_pub_project_pub_id_seq OWNED BY public.project_pub.project_pub_id;


--
-- Name: project_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.project_relationship (
    project_relationship_id integer NOT NULL,
    subject_project_id integer NOT NULL,
    object_project_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.project_relationship OWNER TO kmr44;

--
-- Name: TABLE project_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.project_relationship IS 'A project can be composed of several smaller scale projects';


--
-- Name: COLUMN project_relationship.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.project_relationship.type_id IS 'The type of relationship being stated, such as "is part of".';


--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.project_relationship_project_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.project_relationship_project_relationship_id_seq OWNER TO kmr44;

--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.project_relationship_project_relationship_id_seq OWNED BY public.project_relationship.project_relationship_id;


--
-- Name: projectprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.projectprop (
    projectprop_id integer NOT NULL,
    project_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.projectprop OWNER TO kmr44;

--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.projectprop_projectprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.projectprop_projectprop_id_seq OWNER TO kmr44;

--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.projectprop_projectprop_id_seq OWNED BY public.projectprop.projectprop_id;


--
-- Name: mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna AS
 SELECT feature.feature_id AS mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'exemplar_mRNA'::text) OR ((cvterm.name)::text = 'capped_mRNA'::text) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'recoded_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text) OR ((cvterm.name)::text = 'mRNA'::text));


ALTER TABLE so.mrna OWNER TO kmr44;

--
-- Name: protein_coding_gene; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.protein_coding_gene AS
 SELECT DISTINCT gene.feature_id,
    gene.dbxref_id,
    gene.organism_id,
    gene.name,
    gene.uniquename,
    gene.residues,
    gene.seqlen,
    gene.md5checksum,
    gene.type_id,
    gene.is_analysis,
    gene.is_obsolete,
    gene.timeaccessioned,
    gene.timelastmodified
   FROM ((public.feature gene
     JOIN public.feature_relationship fr ON ((gene.feature_id = fr.object_id)))
     JOIN so.mrna ON ((mrna.feature_id = fr.subject_id)));


ALTER TABLE public.protein_coding_gene OWNER TO kmr44;

--
-- Name: protocol; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.protocol (
    protocol_id integer NOT NULL,
    type_id integer NOT NULL,
    pub_id integer,
    dbxref_id integer,
    name text NOT NULL,
    uri text,
    protocoldescription text,
    hardwaredescription text,
    softwaredescription text
);


ALTER TABLE public.protocol OWNER TO kmr44;

--
-- Name: TABLE protocol; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.protocol IS 'Procedural notes on how data was prepared and processed.';


--
-- Name: protocol_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.protocol_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.protocol_protocol_id_seq OWNER TO kmr44;

--
-- Name: protocol_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.protocol_protocol_id_seq OWNED BY public.protocol.protocol_id;


--
-- Name: protocolparam; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.protocolparam (
    protocolparam_id integer NOT NULL,
    protocol_id integer NOT NULL,
    name text NOT NULL,
    datatype_id integer,
    unittype_id integer,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.protocolparam OWNER TO kmr44;

--
-- Name: TABLE protocolparam; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.protocolparam IS 'Parameters related to a
protocol. For example, if the protocol is a soak, this might include attributes of bath temperature and duration.';


--
-- Name: protocolparam_protocolparam_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.protocolparam_protocolparam_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.protocolparam_protocolparam_id_seq OWNER TO kmr44;

--
-- Name: protocolparam_protocolparam_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.protocolparam_protocolparam_id_seq OWNED BY public.protocolparam.protocolparam_id;


--
-- Name: pub_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.pub_dbxref (
    pub_dbxref_id integer NOT NULL,
    pub_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.pub_dbxref OWNER TO kmr44;

--
-- Name: TABLE pub_dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.pub_dbxref IS 'Handle links to repositories,
e.g. Pubmed, Biosis, zoorec, OCLC, Medline, ISSN, coden...';


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.pub_dbxref_pub_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_dbxref_pub_dbxref_id_seq OWNER TO kmr44;

--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.pub_dbxref_pub_dbxref_id_seq OWNED BY public.pub_dbxref.pub_dbxref_id;


--
-- Name: pub_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.pub_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_pub_id_seq OWNER TO kmr44;

--
-- Name: pub_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.pub_pub_id_seq OWNED BY public.pub.pub_id;


--
-- Name: pub_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.pub_relationship (
    pub_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE public.pub_relationship OWNER TO kmr44;

--
-- Name: TABLE pub_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.pub_relationship IS 'Handle relationships between
publications, e.g. when one publication makes others obsolete, when one
publication contains errata with respect to other publication(s), or
when one publication also appears in another pub.';


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.pub_relationship_pub_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pub_relationship_pub_relationship_id_seq OWNER TO kmr44;

--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.pub_relationship_pub_relationship_id_seq OWNED BY public.pub_relationship.pub_relationship_id;


--
-- Name: pubauthor; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.pubauthor (
    pubauthor_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer NOT NULL,
    editor boolean DEFAULT false,
    surname character varying(100) NOT NULL,
    givennames character varying(100),
    suffix character varying(100)
);


ALTER TABLE public.pubauthor OWNER TO kmr44;

--
-- Name: TABLE pubauthor; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.pubauthor IS 'An author for a publication. Note the denormalisation (hence lack of _ in table name) - this is deliberate as it is in general too hard to assign IDs to authors.';


--
-- Name: COLUMN pubauthor.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pubauthor.rank IS 'Order of author in author list for this pub - order is important.';


--
-- Name: COLUMN pubauthor.editor; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pubauthor.editor IS 'Indicates whether the author is an editor for linked publication. Note: this is a boolean field but does not follow the normal chado convention for naming booleans.';


--
-- Name: COLUMN pubauthor.givennames; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pubauthor.givennames IS 'First name, initials';


--
-- Name: COLUMN pubauthor.suffix; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.pubauthor.suffix IS 'Jr., Sr., etc';


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.pubauthor_pubauthor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pubauthor_pubauthor_id_seq OWNER TO kmr44;

--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.pubauthor_pubauthor_id_seq OWNED BY public.pubauthor.pubauthor_id;


--
-- Name: pubprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.pubprop (
    pubprop_id integer NOT NULL,
    pub_id integer NOT NULL,
    type_id integer NOT NULL,
    value text NOT NULL,
    rank integer
);


ALTER TABLE public.pubprop OWNER TO kmr44;

--
-- Name: TABLE pubprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.pubprop IS 'Property-value pairs for a pub. Follows standard chado pattern.';


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.pubprop_pubprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pubprop_pubprop_id_seq OWNER TO kmr44;

--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.pubprop_pubprop_id_seq OWNED BY public.pubprop.pubprop_id;


--
-- Name: quantification; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.quantification (
    quantification_id integer NOT NULL,
    acquisition_id integer NOT NULL,
    operator_id integer,
    protocol_id integer,
    analysis_id integer NOT NULL,
    quantificationdate timestamp without time zone DEFAULT now(),
    name text,
    uri text
);


ALTER TABLE public.quantification OWNER TO kmr44;

--
-- Name: TABLE quantification; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.quantification IS 'Quantification is the transformation of an image acquisition to numeric data. This typically involves statistical procedures.';


--
-- Name: quantification_quantification_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.quantification_quantification_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quantification_quantification_id_seq OWNER TO kmr44;

--
-- Name: quantification_quantification_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.quantification_quantification_id_seq OWNED BY public.quantification.quantification_id;


--
-- Name: quantification_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.quantification_relationship (
    quantification_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE public.quantification_relationship OWNER TO kmr44;

--
-- Name: TABLE quantification_relationship; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.quantification_relationship IS 'There may be multiple rounds of quantification, this allows us to keep an audit trail of what values went where.';


--
-- Name: quantification_relationship_quantification_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.quantification_relationship_quantification_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quantification_relationship_quantification_relationship_id_seq OWNER TO kmr44;

--
-- Name: quantification_relationship_quantification_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.quantification_relationship_quantification_relationship_id_seq OWNED BY public.quantification_relationship.quantification_relationship_id;


--
-- Name: quantificationprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.quantificationprop (
    quantificationprop_id integer NOT NULL,
    quantification_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.quantificationprop OWNER TO kmr44;

--
-- Name: TABLE quantificationprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.quantificationprop IS 'Extra quantification properties that are not accounted for in quantification.';


--
-- Name: quantificationprop_quantificationprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.quantificationprop_quantificationprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quantificationprop_quantificationprop_id_seq OWNER TO kmr44;

--
-- Name: quantificationprop_quantificationprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.quantificationprop_quantificationprop_id_seq OWNED BY public.quantificationprop.quantificationprop_id;


--
-- Name: stats_paths_to_root; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.stats_paths_to_root AS
 SELECT cvtermpath.subject_id AS cvterm_id,
    count(DISTINCT cvtermpath.cvtermpath_id) AS total_paths,
    avg(cvtermpath.pathdistance) AS avg_distance,
    min(cvtermpath.pathdistance) AS min_distance,
    max(cvtermpath.pathdistance) AS max_distance
   FROM (public.cvtermpath
     JOIN public.cv_root ON ((cvtermpath.object_id = cv_root.root_cvterm_id)))
  GROUP BY cvtermpath.subject_id;


ALTER TABLE public.stats_paths_to_root OWNER TO kmr44;

--
-- Name: VIEW stats_paths_to_root; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.stats_paths_to_root IS 'per-cvterm statistics on its
placement in the DAG relative to the root. There may be multiple paths
from any term to the root. This gives the total number of paths, and
the average minimum and maximum distances. Here distance is defined by
cvtermpath.pathdistance';


--
-- Name: stock; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock (
    stock_id integer NOT NULL,
    dbxref_id integer,
    organism_id integer,
    name character varying(255),
    uniquename text NOT NULL,
    description text,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL
);


ALTER TABLE public.stock OWNER TO kmr44;

--
-- Name: TABLE stock; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock IS 'Any stock can be globally identified by the
combination of organism, uniquename and stock type. A stock is the physical entities, either living or preserved, held by collections. Stocks belong to a collection; they have IDs, type, organism, description and may have a genotype.';


--
-- Name: COLUMN stock.dbxref_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock.dbxref_id IS 'The dbxref_id is an optional primary stable identifier for this stock. Secondary indentifiers and external dbxrefs go in table: stock_dbxref.';


--
-- Name: COLUMN stock.organism_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock.organism_id IS 'The organism_id is the organism to which the stock belongs. This column should only be left blank if the organism cannot be determined.';


--
-- Name: COLUMN stock.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock.name IS 'The name is a human-readable local name for a stock.';


--
-- Name: COLUMN stock.description; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock.description IS 'The description is the genetic description provided in the stock list.';


--
-- Name: COLUMN stock.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock.type_id IS 'The type_id foreign key links to a controlled vocabulary of stock types. The would include living stock, genomic DNA, preserved specimen. Secondary cvterms for stocks would go in stock_cvterm.';


--
-- Name: stock_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_cvterm (
    stock_cvterm_id integer NOT NULL,
    stock_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_not boolean DEFAULT false NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_cvterm OWNER TO kmr44;

--
-- Name: TABLE stock_cvterm; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock_cvterm IS 'stock_cvterm links a stock to cvterms. This is for secondary cvterms; primary cvterms should use stock.type_id.';


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_cvterm_stock_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_cvterm_stock_cvterm_id_seq OWNER TO kmr44;

--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_cvterm_stock_cvterm_id_seq OWNED BY public.stock_cvterm.stock_cvterm_id;


--
-- Name: stock_cvtermprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_cvtermprop (
    stock_cvtermprop_id integer NOT NULL,
    stock_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_cvtermprop OWNER TO kmr44;

--
-- Name: TABLE stock_cvtermprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock_cvtermprop IS 'Extensible properties for
stock to cvterm associations. Examples: GO evidence codes;
qualifiers; metadata such as the date on which the entry was curated
and the source of the association. See the stockprop table for
meanings of type_id, value and rank.';


--
-- Name: COLUMN stock_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. cvterms may come from the OBO evidence code cv.';


--
-- Name: COLUMN stock_cvtermprop.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN stock_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_cvtermprop.rank IS 'Property-Value
ordering. Any stock_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_cvtermprop_stock_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_cvtermprop_stock_cvtermprop_id_seq OWNER TO kmr44;

--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_cvtermprop_stock_cvtermprop_id_seq OWNED BY public.stock_cvtermprop.stock_cvtermprop_id;


--
-- Name: stock_dbxref; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_dbxref (
    stock_dbxref_id integer NOT NULL,
    stock_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.stock_dbxref OWNER TO kmr44;

--
-- Name: TABLE stock_dbxref; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock_dbxref IS 'stock_dbxref links a stock to dbxrefs. This is for secondary identifiers; primary identifiers should use stock.dbxref_id.';


--
-- Name: COLUMN stock_dbxref.is_current; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_dbxref.is_current IS 'The is_current boolean indicates whether the linked dbxref is the current -official- dbxref for the linked stock.';


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_dbxref_stock_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_dbxref_stock_dbxref_id_seq OWNER TO kmr44;

--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_dbxref_stock_dbxref_id_seq OWNED BY public.stock_dbxref.stock_dbxref_id;


--
-- Name: stock_dbxrefprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_dbxrefprop (
    stock_dbxrefprop_id integer NOT NULL,
    stock_dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_dbxrefprop OWNER TO kmr44;

--
-- Name: TABLE stock_dbxrefprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock_dbxrefprop IS 'A stock_dbxref can have any number of
slot-value property tags attached to it. This is useful for storing properties related to dbxref annotations of stocks, such as evidence codes, and references, and metadata, such as create/modify dates. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stock_dbxrefprop_c1, for
the combination of stock_dbxref_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_dbxrefprop_stock_dbxrefprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_dbxrefprop_stock_dbxrefprop_id_seq OWNER TO kmr44;

--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_dbxrefprop_stock_dbxrefprop_id_seq OWNED BY public.stock_dbxrefprop.stock_dbxrefprop_id;


--
-- Name: stock_genotype; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_genotype (
    stock_genotype_id integer NOT NULL,
    stock_id integer NOT NULL,
    genotype_id integer NOT NULL
);


ALTER TABLE public.stock_genotype OWNER TO kmr44;

--
-- Name: TABLE stock_genotype; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock_genotype IS 'Simple table linking a stock to
a genotype. Features with genotypes can be linked to stocks thru feature_genotype -> genotype -> stock_genotype -> stock.';


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_genotype_stock_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_genotype_stock_genotype_id_seq OWNER TO kmr44;

--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_genotype_stock_genotype_id_seq OWNED BY public.stock_genotype.stock_genotype_id;


--
-- Name: stock_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_pub (
    stock_pub_id integer NOT NULL,
    stock_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stock_pub OWNER TO kmr44;

--
-- Name: TABLE stock_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock_pub IS 'Provenance. Linking table between stocks and, for example, a stocklist computer file.';


--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_pub_stock_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_pub_stock_pub_id_seq OWNER TO kmr44;

--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_pub_stock_pub_id_seq OWNED BY public.stock_pub.stock_pub_id;


--
-- Name: stock_relationship; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_relationship (
    stock_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stock_relationship OWNER TO kmr44;

--
-- Name: COLUMN stock_relationship.subject_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_relationship.subject_id IS 'stock_relationship.subject_id is the subject of the subj-predicate-obj sentence. This is typically the substock.';


--
-- Name: COLUMN stock_relationship.object_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_relationship.object_id IS 'stock_relationship.object_id is the object of the subj-predicate-obj sentence. This is typically the container stock.';


--
-- Name: COLUMN stock_relationship.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_relationship.type_id IS 'stock_relationship.type_id is relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed.';


--
-- Name: COLUMN stock_relationship.value; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_relationship.value IS 'stock_relationship.value is for additional notes or comments.';


--
-- Name: COLUMN stock_relationship.rank; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stock_relationship.rank IS 'stock_relationship.rank is the ordering of subject stocks with respect to the object stock may be important where rank is used to order these; starts from zero.';


--
-- Name: stock_relationship_cvterm; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_relationship_cvterm (
    stock_relationship_cvterm_id integer NOT NULL,
    stock_relationship_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer
);


ALTER TABLE public.stock_relationship_cvterm OWNER TO kmr44;

--
-- Name: TABLE stock_relationship_cvterm; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock_relationship_cvterm IS 'For germplasm maintenance and pedigree data, stock_relationship. type_id will record cvterms such as "is a female parent of", "a parent for mutation", "is a group_id of", "is a source_id of", etc The cvterms for higher categories such as "generative", "derivative" or "maintenance" can be stored in table stock_relationship_cvterm';


--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq OWNER TO kmr44;

--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq OWNED BY public.stock_relationship_cvterm.stock_relationship_cvterm_id;


--
-- Name: stock_relationship_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stock_relationship_pub (
    stock_relationship_pub_id integer NOT NULL,
    stock_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stock_relationship_pub OWNER TO kmr44;

--
-- Name: TABLE stock_relationship_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stock_relationship_pub IS 'Provenance. Attach optional evidence to a stock_relationship in the form of a publication.';


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_relationship_pub_stock_relationship_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_pub_stock_relationship_pub_id_seq OWNER TO kmr44;

--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_relationship_pub_stock_relationship_pub_id_seq OWNED BY public.stock_relationship_pub.stock_relationship_pub_id;


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_relationship_stock_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_relationship_stock_relationship_id_seq OWNER TO kmr44;

--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_relationship_stock_relationship_id_seq OWNED BY public.stock_relationship.stock_relationship_id;


--
-- Name: stock_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stock_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stock_stock_id_seq OWNER TO kmr44;

--
-- Name: stock_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stock_stock_id_seq OWNED BY public.stock.stock_id;


--
-- Name: stockcollection; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stockcollection (
    stockcollection_id integer NOT NULL,
    type_id integer NOT NULL,
    contact_id integer,
    name character varying(255),
    uniquename text NOT NULL
);


ALTER TABLE public.stockcollection OWNER TO kmr44;

--
-- Name: TABLE stockcollection; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stockcollection IS 'The lab or stock center distributing the stocks in their collection.';


--
-- Name: COLUMN stockcollection.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stockcollection.type_id IS 'type_id is the collection type cv.';


--
-- Name: COLUMN stockcollection.contact_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stockcollection.contact_id IS 'contact_id links to the contact information for the collection.';


--
-- Name: COLUMN stockcollection.name; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stockcollection.name IS 'name is the collection.';


--
-- Name: COLUMN stockcollection.uniquename; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stockcollection.uniquename IS 'uniqename is the value of the collection cv.';


--
-- Name: stockcollection_stock; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stockcollection_stock (
    stockcollection_stock_id integer NOT NULL,
    stockcollection_id integer NOT NULL,
    stock_id integer NOT NULL
);


ALTER TABLE public.stockcollection_stock OWNER TO kmr44;

--
-- Name: TABLE stockcollection_stock; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stockcollection_stock IS 'stockcollection_stock links
a stock collection to the stocks which are contained in the collection.';


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stockcollection_stock_stockcollection_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollection_stock_stockcollection_stock_id_seq OWNER TO kmr44;

--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stockcollection_stock_stockcollection_stock_id_seq OWNED BY public.stockcollection_stock.stockcollection_stock_id;


--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stockcollection_stockcollection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollection_stockcollection_id_seq OWNER TO kmr44;

--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stockcollection_stockcollection_id_seq OWNED BY public.stockcollection.stockcollection_id;


--
-- Name: stockcollectionprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stockcollectionprop (
    stockcollectionprop_id integer NOT NULL,
    stockcollection_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stockcollectionprop OWNER TO kmr44;

--
-- Name: TABLE stockcollectionprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stockcollectionprop IS 'The table stockcollectionprop
contains the value of the stock collection such as website/email URLs;
the value of the stock collection order URLs.';


--
-- Name: COLUMN stockcollectionprop.type_id; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON COLUMN public.stockcollectionprop.type_id IS 'The cv for the type_id is "stockcollection property type".';


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stockcollectionprop_stockcollectionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockcollectionprop_stockcollectionprop_id_seq OWNER TO kmr44;

--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stockcollectionprop_stockcollectionprop_id_seq OWNED BY public.stockcollectionprop.stockcollectionprop_id;


--
-- Name: stockprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stockprop (
    stockprop_id integer NOT NULL,
    stock_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.stockprop OWNER TO kmr44;

--
-- Name: TABLE stockprop; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stockprop IS 'A stock can have any number of
slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stockprop_c1, for
the combination of stock_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: stockprop_pub; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.stockprop_pub (
    stockprop_pub_id integer NOT NULL,
    stockprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE public.stockprop_pub OWNER TO kmr44;

--
-- Name: TABLE stockprop_pub; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.stockprop_pub IS 'Provenance. Any stockprop assignment can optionally be supported by a publication.';


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stockprop_pub_stockprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockprop_pub_stockprop_pub_id_seq OWNER TO kmr44;

--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stockprop_pub_stockprop_pub_id_seq OWNED BY public.stockprop_pub.stockprop_pub_id;


--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.stockprop_stockprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stockprop_stockprop_id_seq OWNER TO kmr44;

--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.stockprop_stockprop_id_seq OWNED BY public.stockprop.stockprop_id;


--
-- Name: study; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.study (
    study_id integer NOT NULL,
    contact_id integer NOT NULL,
    pub_id integer,
    dbxref_id integer,
    name text NOT NULL,
    description text
);


ALTER TABLE public.study OWNER TO kmr44;

--
-- Name: study_assay; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.study_assay (
    study_assay_id integer NOT NULL,
    study_id integer NOT NULL,
    assay_id integer NOT NULL
);


ALTER TABLE public.study_assay OWNER TO kmr44;

--
-- Name: study_assay_study_assay_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.study_assay_study_assay_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.study_assay_study_assay_id_seq OWNER TO kmr44;

--
-- Name: study_assay_study_assay_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.study_assay_study_assay_id_seq OWNED BY public.study_assay.study_assay_id;


--
-- Name: study_study_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.study_study_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.study_study_id_seq OWNER TO kmr44;

--
-- Name: study_study_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.study_study_id_seq OWNED BY public.study.study_id;


--
-- Name: studydesign; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.studydesign (
    studydesign_id integer NOT NULL,
    study_id integer NOT NULL,
    description text
);


ALTER TABLE public.studydesign OWNER TO kmr44;

--
-- Name: studydesign_studydesign_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.studydesign_studydesign_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studydesign_studydesign_id_seq OWNER TO kmr44;

--
-- Name: studydesign_studydesign_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.studydesign_studydesign_id_seq OWNED BY public.studydesign.studydesign_id;


--
-- Name: studydesignprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.studydesignprop (
    studydesignprop_id integer NOT NULL,
    studydesign_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.studydesignprop OWNER TO kmr44;

--
-- Name: studydesignprop_studydesignprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.studydesignprop_studydesignprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studydesignprop_studydesignprop_id_seq OWNER TO kmr44;

--
-- Name: studydesignprop_studydesignprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.studydesignprop_studydesignprop_id_seq OWNED BY public.studydesignprop.studydesignprop_id;


--
-- Name: studyfactor; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.studyfactor (
    studyfactor_id integer NOT NULL,
    studydesign_id integer NOT NULL,
    type_id integer,
    name text NOT NULL,
    description text
);


ALTER TABLE public.studyfactor OWNER TO kmr44;

--
-- Name: studyfactor_studyfactor_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.studyfactor_studyfactor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studyfactor_studyfactor_id_seq OWNER TO kmr44;

--
-- Name: studyfactor_studyfactor_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.studyfactor_studyfactor_id_seq OWNED BY public.studyfactor.studyfactor_id;


--
-- Name: studyfactorvalue; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.studyfactorvalue (
    studyfactorvalue_id integer NOT NULL,
    studyfactor_id integer NOT NULL,
    assay_id integer NOT NULL,
    factorvalue text,
    name text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.studyfactorvalue OWNER TO kmr44;

--
-- Name: studyfactorvalue_studyfactorvalue_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.studyfactorvalue_studyfactorvalue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studyfactorvalue_studyfactorvalue_id_seq OWNER TO kmr44;

--
-- Name: studyfactorvalue_studyfactorvalue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.studyfactorvalue_studyfactorvalue_id_seq OWNED BY public.studyfactorvalue.studyfactorvalue_id;


--
-- Name: studyprop; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.studyprop (
    studyprop_id integer NOT NULL,
    study_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.studyprop OWNER TO kmr44;

--
-- Name: studyprop_feature; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.studyprop_feature (
    studyprop_feature_id integer NOT NULL,
    studyprop_id integer NOT NULL,
    feature_id integer NOT NULL,
    type_id integer
);


ALTER TABLE public.studyprop_feature OWNER TO kmr44;

--
-- Name: studyprop_feature_studyprop_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.studyprop_feature_studyprop_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studyprop_feature_studyprop_feature_id_seq OWNER TO kmr44;

--
-- Name: studyprop_feature_studyprop_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.studyprop_feature_studyprop_feature_id_seq OWNED BY public.studyprop_feature.studyprop_feature_id;


--
-- Name: studyprop_studyprop_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.studyprop_studyprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.studyprop_studyprop_id_seq OWNER TO kmr44;

--
-- Name: studyprop_studyprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.studyprop_studyprop_id_seq OWNED BY public.studyprop.studyprop_id;


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.synonym_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.synonym_synonym_id_seq OWNER TO kmr44;

--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.synonym_synonym_id_seq OWNED BY public.synonym.synonym_id;


--
-- Name: tableinfo; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.tableinfo (
    tableinfo_id integer NOT NULL,
    name character varying(30) NOT NULL,
    primary_key_column character varying(30),
    is_view integer DEFAULT 0 NOT NULL,
    view_on_table_id integer,
    superclass_table_id integer,
    is_updateable integer DEFAULT 1 NOT NULL,
    modification_date date DEFAULT now() NOT NULL
);


ALTER TABLE public.tableinfo OWNER TO kmr44;

--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.tableinfo_tableinfo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tableinfo_tableinfo_id_seq OWNER TO kmr44;

--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.tableinfo_tableinfo_id_seq OWNED BY public.tableinfo.tableinfo_id;


--
-- Name: treatment; Type: TABLE; Schema: public; Owner: kmr44
--

CREATE TABLE public.treatment (
    treatment_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    biomaterial_id integer NOT NULL,
    type_id integer NOT NULL,
    protocol_id integer,
    name text
);


ALTER TABLE public.treatment OWNER TO kmr44;

--
-- Name: TABLE treatment; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON TABLE public.treatment IS 'A biomaterial may undergo multiple
treatments. Examples of treatments: apoxia, fluorophore and biotin labeling.';


--
-- Name: treatment_treatment_id_seq; Type: SEQUENCE; Schema: public; Owner: kmr44
--

CREATE SEQUENCE public.treatment_treatment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.treatment_treatment_id_seq OWNER TO kmr44;

--
-- Name: treatment_treatment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: kmr44
--

ALTER SEQUENCE public.treatment_treatment_id_seq OWNED BY public.treatment.treatment_id;


--
-- Name: type_feature_count; Type: VIEW; Schema: public; Owner: kmr44
--

CREATE VIEW public.type_feature_count AS
 SELECT t.name AS type,
    count(*) AS num_features
   FROM (public.cvterm t
     JOIN public.feature ON ((feature.type_id = t.cvterm_id)))
  GROUP BY t.name;


ALTER TABLE public.type_feature_count OWNER TO kmr44;

--
-- Name: VIEW type_feature_count; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON VIEW public.type_feature_count IS 'per-feature-type feature counts';


--
-- Name: a_box; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.a_box AS
 SELECT feature.feature_id AS a_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'A_box'::text));


ALTER TABLE so.a_box OWNER TO kmr44;

--
-- Name: a_box_type_1; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.a_box_type_1 AS
 SELECT feature.feature_id AS a_box_type_1_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_box_type_1'::text);


ALTER TABLE so.a_box_type_1 OWNER TO kmr44;

--
-- Name: a_box_type_2; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.a_box_type_2 AS
 SELECT feature.feature_id AS a_box_type_2_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_box_type_2'::text);


ALTER TABLE so.a_box_type_2 OWNER TO kmr44;

--
-- Name: a_minor_rna_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.a_minor_rna_motif AS
 SELECT feature.feature_id AS a_minor_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_minor_RNA_motif'::text);


ALTER TABLE so.a_minor_rna_motif OWNER TO kmr44;

--
-- Name: a_to_c_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.a_to_c_transversion AS
 SELECT feature.feature_id AS a_to_c_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_C_transversion'::text);


ALTER TABLE so.a_to_c_transversion OWNER TO kmr44;

--
-- Name: a_to_g_transition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.a_to_g_transition AS
 SELECT feature.feature_id AS a_to_g_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_G_transition'::text);


ALTER TABLE so.a_to_g_transition OWNER TO kmr44;

--
-- Name: a_to_t_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.a_to_t_transversion AS
 SELECT feature.feature_id AS a_to_t_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_T_transversion'::text);


ALTER TABLE so.a_to_t_transversion OWNER TO kmr44;

--
-- Name: aberrant_processed_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.aberrant_processed_transcript AS
 SELECT feature.feature_id AS aberrant_processed_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aberrant_processed_transcript'::text);


ALTER TABLE so.aberrant_processed_transcript OWNER TO kmr44;

--
-- Name: active_peptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.active_peptide AS
 SELECT feature.feature_id AS active_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'active_peptide'::text);


ALTER TABLE so.active_peptide OWNER TO kmr44;

--
-- Name: adaptive_island; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.adaptive_island AS
 SELECT feature.feature_id AS adaptive_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'adaptive_island'::text);


ALTER TABLE so.adaptive_island OWNER TO kmr44;

--
-- Name: alanine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alanine AS
 SELECT feature.feature_id AS alanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanine'::text);


ALTER TABLE so.alanine OWNER TO kmr44;

--
-- Name: alanine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alanine_trna_primary_transcript AS
 SELECT feature.feature_id AS alanine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text);


ALTER TABLE so.alanine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: alanyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alanyl_trna AS
 SELECT feature.feature_id AS alanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanyl_tRNA'::text);


ALTER TABLE so.alanyl_trna OWNER TO kmr44;

--
-- Name: allele; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.allele AS
 SELECT feature.feature_id AS allele_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polymorphic_sequence_variant'::text) OR ((cvterm.name)::text = 'allele'::text));


ALTER TABLE so.allele OWNER TO kmr44;

--
-- Name: allelically_excluded; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.allelically_excluded AS
 SELECT feature.feature_id AS allelically_excluded_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allelically_excluded'::text);


ALTER TABLE so.allelically_excluded OWNER TO kmr44;

--
-- Name: allelically_excluded_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.allelically_excluded_gene AS
 SELECT feature.feature_id AS allelically_excluded_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allelically_excluded_gene'::text);


ALTER TABLE so.allelically_excluded_gene OWNER TO kmr44;

--
-- Name: allopolyploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.allopolyploid AS
 SELECT feature.feature_id AS allopolyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allopolyploid'::text);


ALTER TABLE so.allopolyploid OWNER TO kmr44;

--
-- Name: alpha_beta_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alpha_beta_motif AS
 SELECT feature.feature_id AS alpha_beta_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alpha_beta_motif'::text);


ALTER TABLE so.alpha_beta_motif OWNER TO kmr44;

--
-- Name: alpha_helix; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alpha_helix AS
 SELECT feature.feature_id AS alpha_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alpha_helix'::text);


ALTER TABLE so.alpha_helix OWNER TO kmr44;

--
-- Name: alteration_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alteration_attribute AS
 SELECT feature.feature_id AS alteration_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chromosomal_variation_attribute'::text) OR ((cvterm.name)::text = 'insertion_attribute'::text) OR ((cvterm.name)::text = 'inversion_attribute'::text) OR ((cvterm.name)::text = 'translocaton_attribute'::text) OR ((cvterm.name)::text = 'duplication_attribute'::text) OR ((cvterm.name)::text = 'intrachromosomal'::text) OR ((cvterm.name)::text = 'interchromosomal'::text) OR ((cvterm.name)::text = 'tandem'::text) OR ((cvterm.name)::text = 'direct'::text) OR ((cvterm.name)::text = 'inverted'::text) OR ((cvterm.name)::text = 'pericentric'::text) OR ((cvterm.name)::text = 'paracentric'::text) OR ((cvterm.name)::text = 'reciprocal'::text) OR ((cvterm.name)::text = 'insertional'::text) OR ((cvterm.name)::text = 'free'::text) OR ((cvterm.name)::text = 'alteration_attribute'::text));


ALTER TABLE so.alteration_attribute OWNER TO kmr44;

--
-- Name: alternate_sequence_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alternate_sequence_site AS
 SELECT feature.feature_id AS alternate_sequence_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternate_sequence_site'::text);


ALTER TABLE so.alternate_sequence_site OWNER TO kmr44;

--
-- Name: alternatively_spliced; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alternatively_spliced AS
 SELECT feature.feature_id AS alternatively_spliced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternatively_spliced'::text);


ALTER TABLE so.alternatively_spliced OWNER TO kmr44;

--
-- Name: alternatively_spliced_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.alternatively_spliced_transcript AS
 SELECT feature.feature_id AS alternatively_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternatively_spliced_transcript'::text);


ALTER TABLE so.alternatively_spliced_transcript OWNER TO kmr44;

--
-- Name: ambisense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ambisense_ssrna_viral_sequence AS
 SELECT feature.feature_id AS ambisense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text);


ALTER TABLE so.ambisense_ssrna_viral_sequence OWNER TO kmr44;

--
-- Name: amino_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.amino_acid AS
 SELECT feature.feature_id AS amino_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'catalytic_residue'::text) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text) OR ((cvterm.name)::text = 'alanine'::text) OR ((cvterm.name)::text = 'valine'::text) OR ((cvterm.name)::text = 'leucine'::text) OR ((cvterm.name)::text = 'isoleucine'::text) OR ((cvterm.name)::text = 'proline'::text) OR ((cvterm.name)::text = 'tryptophan'::text) OR ((cvterm.name)::text = 'phenylalanine'::text) OR ((cvterm.name)::text = 'methionine'::text) OR ((cvterm.name)::text = 'glycine'::text) OR ((cvterm.name)::text = 'serine'::text) OR ((cvterm.name)::text = 'threonine'::text) OR ((cvterm.name)::text = 'tyrosine'::text) OR ((cvterm.name)::text = 'cysteine'::text) OR ((cvterm.name)::text = 'glutamine'::text) OR ((cvterm.name)::text = 'asparagine'::text) OR ((cvterm.name)::text = 'lysine'::text) OR ((cvterm.name)::text = 'arginine'::text) OR ((cvterm.name)::text = 'histidine'::text) OR ((cvterm.name)::text = 'aspartic_acid'::text) OR ((cvterm.name)::text = 'glutamic_acid'::text) OR ((cvterm.name)::text = 'selenocysteine'::text) OR ((cvterm.name)::text = 'pyrrolysine'::text) OR ((cvterm.name)::text = 'modified_glycine'::text) OR ((cvterm.name)::text = 'modified_L_alanine'::text) OR ((cvterm.name)::text = 'modified_L_asparagine'::text) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text) OR ((cvterm.name)::text = 'modified_L_cysteine'::text) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text) OR ((cvterm.name)::text = 'modified_L_threonine'::text) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text) OR ((cvterm.name)::text = 'modified_L_glutamine'::text) OR ((cvterm.name)::text = 'modified_L_methionine'::text) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text) OR ((cvterm.name)::text = 'modified_L_histidine'::text) OR ((cvterm.name)::text = 'modified_L_serine'::text) OR ((cvterm.name)::text = 'modified_L_lysine'::text) OR ((cvterm.name)::text = 'modified_L_leucine'::text) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text) OR ((cvterm.name)::text = 'modified_L_valine'::text) OR ((cvterm.name)::text = 'modified_L_proline'::text) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text) OR ((cvterm.name)::text = 'modified_L_arginine'::text) OR ((cvterm.name)::text = 'amino_acid'::text));


ALTER TABLE so.amino_acid OWNER TO kmr44;

--
-- Name: amino_acid_deletion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.amino_acid_deletion AS
 SELECT feature.feature_id AS amino_acid_deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amino_acid_deletion'::text);


ALTER TABLE so.amino_acid_deletion OWNER TO kmr44;

--
-- Name: amino_acid_insertion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.amino_acid_insertion AS
 SELECT feature.feature_id AS amino_acid_insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amino_acid_insertion'::text);


ALTER TABLE so.amino_acid_insertion OWNER TO kmr44;

--
-- Name: amino_acid_substitution; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.amino_acid_substitution AS
 SELECT feature.feature_id AS amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'amino_acid_substitution'::text));


ALTER TABLE so.amino_acid_substitution OWNER TO kmr44;

--
-- Name: amplification_origin; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.amplification_origin AS
 SELECT feature.feature_id AS amplification_origin_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amplification_origin'::text);


ALTER TABLE so.amplification_origin OWNER TO kmr44;

--
-- Name: anchor_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.anchor_binding_site AS
 SELECT feature.feature_id AS anchor_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anchor_binding_site'::text);


ALTER TABLE so.anchor_binding_site OWNER TO kmr44;

--
-- Name: anchor_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.anchor_region AS
 SELECT feature.feature_id AS anchor_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anchor_region'::text);


ALTER TABLE so.anchor_region OWNER TO kmr44;

--
-- Name: aneuploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.aneuploid AS
 SELECT feature.feature_id AS aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'hyperploid'::text) OR ((cvterm.name)::text = 'hypoploid'::text) OR ((cvterm.name)::text = 'aneuploid'::text));


ALTER TABLE so.aneuploid OWNER TO kmr44;

--
-- Name: aneuploid_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.aneuploid_chromosome AS
 SELECT feature.feature_id AS aneuploid_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text));


ALTER TABLE so.aneuploid_chromosome OWNER TO kmr44;

--
-- Name: annotation_directed_improved_draft; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.annotation_directed_improved_draft AS
 SELECT feature.feature_id AS annotation_directed_improved_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'annotation_directed_improved_draft'::text);


ALTER TABLE so.annotation_directed_improved_draft OWNER TO kmr44;

--
-- Name: anticodon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.anticodon AS
 SELECT feature.feature_id AS anticodon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anticodon'::text);


ALTER TABLE so.anticodon OWNER TO kmr44;

--
-- Name: anticodon_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.anticodon_loop AS
 SELECT feature.feature_id AS anticodon_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anticodon_loop'::text);


ALTER TABLE so.anticodon_loop OWNER TO kmr44;

--
-- Name: antiparallel_beta_strand; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.antiparallel_beta_strand AS
 SELECT feature.feature_id AS antiparallel_beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antiparallel_beta_strand'::text);


ALTER TABLE so.antiparallel_beta_strand OWNER TO kmr44;

--
-- Name: antisense; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.antisense AS
 SELECT feature.feature_id AS antisense_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antisense'::text);


ALTER TABLE so.antisense OWNER TO kmr44;

--
-- Name: antisense_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.antisense_primary_transcript AS
 SELECT feature.feature_id AS antisense_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antisense_primary_transcript'::text);


ALTER TABLE so.antisense_primary_transcript OWNER TO kmr44;

--
-- Name: antisense_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.antisense_rna AS
 SELECT feature.feature_id AS antisense_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text));


ALTER TABLE so.antisense_rna OWNER TO kmr44;

--
-- Name: apicoplast_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.apicoplast_chromosome AS
 SELECT feature.feature_id AS apicoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_chromosome'::text);


ALTER TABLE so.apicoplast_chromosome OWNER TO kmr44;

--
-- Name: apicoplast_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.apicoplast_gene AS
 SELECT feature.feature_id AS apicoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_gene'::text);


ALTER TABLE so.apicoplast_gene OWNER TO kmr44;

--
-- Name: apicoplast_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.apicoplast_sequence AS
 SELECT feature.feature_id AS apicoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_sequence'::text);


ALTER TABLE so.apicoplast_sequence OWNER TO kmr44;

--
-- Name: aptamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.aptamer AS
 SELECT feature.feature_id AS aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text) OR ((cvterm.name)::text = 'aptamer'::text));


ALTER TABLE so.aptamer OWNER TO kmr44;

--
-- Name: archaeal_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.archaeal_intron AS
 SELECT feature.feature_id AS archaeal_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'archaeal_intron'::text);


ALTER TABLE so.archaeal_intron OWNER TO kmr44;

--
-- Name: archaeosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.archaeosine AS
 SELECT feature.feature_id AS archaeosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'archaeosine'::text);


ALTER TABLE so.archaeosine OWNER TO kmr44;

--
-- Name: arg_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.arg_trna_primary_transcript AS
 SELECT feature.feature_id AS arg_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text);


ALTER TABLE so.arg_trna_primary_transcript OWNER TO kmr44;

--
-- Name: arginine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.arginine AS
 SELECT feature.feature_id AS arginine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginine'::text);


ALTER TABLE so.arginine OWNER TO kmr44;

--
-- Name: arginyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.arginyl_trna AS
 SELECT feature.feature_id AS arginyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginyl_tRNA'::text);


ALTER TABLE so.arginyl_trna OWNER TO kmr44;

--
-- Name: ars; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ars AS
 SELECT feature.feature_id AS ars_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ARS'::text);


ALTER TABLE so.ars OWNER TO kmr44;

--
-- Name: asparagine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asparagine AS
 SELECT feature.feature_id AS asparagine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparagine'::text);


ALTER TABLE so.asparagine OWNER TO kmr44;

--
-- Name: asparagine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asparagine_trna_primary_transcript AS
 SELECT feature.feature_id AS asparagine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text);


ALTER TABLE so.asparagine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: asparaginyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asparaginyl_trna AS
 SELECT feature.feature_id AS asparaginyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparaginyl_tRNA'::text);


ALTER TABLE so.asparaginyl_trna OWNER TO kmr44;

--
-- Name: aspartic_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.aspartic_acid AS
 SELECT feature.feature_id AS aspartic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartic_acid'::text);


ALTER TABLE so.aspartic_acid OWNER TO kmr44;

--
-- Name: aspartic_acid_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.aspartic_acid_trna_primary_transcript AS
 SELECT feature.feature_id AS aspartic_acid_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text);


ALTER TABLE so.aspartic_acid_trna_primary_transcript OWNER TO kmr44;

--
-- Name: aspartyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.aspartyl_trna AS
 SELECT feature.feature_id AS aspartyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartyl_tRNA'::text);


ALTER TABLE so.aspartyl_trna OWNER TO kmr44;

--
-- Name: aspe_primer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.aspe_primer AS
 SELECT feature.feature_id AS aspe_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ASPE_primer'::text);


ALTER TABLE so.aspe_primer OWNER TO kmr44;

--
-- Name: assembly; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.assembly AS
 SELECT feature.feature_id AS assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'sequence_assembly'::text) OR ((cvterm.name)::text = 'fragment_assembly'::text) OR ((cvterm.name)::text = 'supercontig'::text) OR ((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'tiling_path'::text) OR ((cvterm.name)::text = 'virtual_sequence'::text) OR ((cvterm.name)::text = 'golden_path'::text) OR ((cvterm.name)::text = 'ultracontig'::text) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text) OR ((cvterm.name)::text = 'fingerprint_map'::text) OR ((cvterm.name)::text = 'STS_map'::text) OR ((cvterm.name)::text = 'RH_map'::text) OR ((cvterm.name)::text = 'assembly'::text));


ALTER TABLE so.assembly OWNER TO kmr44;

--
-- Name: assembly_component; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.assembly_component AS
 SELECT feature.feature_id AS assembly_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'read'::text) OR ((cvterm.name)::text = 'restriction_fragment'::text) OR ((cvterm.name)::text = 'golden_path_fragment'::text) OR ((cvterm.name)::text = 'tiling_path_fragment'::text) OR ((cvterm.name)::text = 'gap'::text) OR ((cvterm.name)::text = 'sonicate_fragment'::text) OR ((cvterm.name)::text = 'paired_end_fragment'::text) OR ((cvterm.name)::text = 'read_pair'::text) OR ((cvterm.name)::text = 'contig_read'::text) OR ((cvterm.name)::text = 'BAC_end'::text) OR ((cvterm.name)::text = 'dye_terminator_read'::text) OR ((cvterm.name)::text = 'pyrosequenced_read'::text) OR ((cvterm.name)::text = 'ligation_based_read'::text) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text) OR ((cvterm.name)::text = 'PAC_end'::text) OR ((cvterm.name)::text = 'YAC_end'::text) OR ((cvterm.name)::text = 'clone_end'::text) OR ((cvterm.name)::text = 'RFLP_fragment'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'assembly_component'::text));


ALTER TABLE so.assembly_component OWNER TO kmr44;

--
-- Name: assembly_error_correction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.assembly_error_correction AS
 SELECT feature.feature_id AS assembly_error_correction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assembly_error_correction'::text);


ALTER TABLE so.assembly_error_correction OWNER TO kmr44;

--
-- Name: assortment_derived_aneuploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.assortment_derived_aneuploid AS
 SELECT feature.feature_id AS assortment_derived_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_aneuploid'::text);


ALTER TABLE so.assortment_derived_aneuploid OWNER TO kmr44;

--
-- Name: assortment_derived_deficiency; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.assortment_derived_deficiency AS
 SELECT feature.feature_id AS assortment_derived_deficiency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_deficiency'::text);


ALTER TABLE so.assortment_derived_deficiency OWNER TO kmr44;

--
-- Name: assortment_derived_deficiency_plus_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.assortment_derived_deficiency_plus_duplication AS
 SELECT feature.feature_id AS assortment_derived_deficiency_plus_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text);


ALTER TABLE so.assortment_derived_deficiency_plus_duplication OWNER TO kmr44;

--
-- Name: assortment_derived_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.assortment_derived_duplication AS
 SELECT feature.feature_id AS assortment_derived_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_duplication'::text);


ALTER TABLE so.assortment_derived_duplication OWNER TO kmr44;

--
-- Name: assortment_derived_variation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.assortment_derived_variation AS
 SELECT feature.feature_id AS assortment_derived_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'assortment_derived_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text) OR ((cvterm.name)::text = 'assortment_derived_variation'::text));


ALTER TABLE so.assortment_derived_variation OWNER TO kmr44;

--
-- Name: asx_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asx_motif AS
 SELECT feature.feature_id AS asx_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_motif'::text);


ALTER TABLE so.asx_motif OWNER TO kmr44;

--
-- Name: asx_turn; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asx_turn AS
 SELECT feature.feature_id AS asx_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn'::text));


ALTER TABLE so.asx_turn OWNER TO kmr44;

--
-- Name: asx_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asx_turn_left_handed_type_one AS
 SELECT feature.feature_id AS asx_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text);


ALTER TABLE so.asx_turn_left_handed_type_one OWNER TO kmr44;

--
-- Name: asx_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asx_turn_left_handed_type_two AS
 SELECT feature.feature_id AS asx_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text);


ALTER TABLE so.asx_turn_left_handed_type_two OWNER TO kmr44;

--
-- Name: asx_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asx_turn_right_handed_type_one AS
 SELECT feature.feature_id AS asx_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text);


ALTER TABLE so.asx_turn_right_handed_type_one OWNER TO kmr44;

--
-- Name: asx_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asx_turn_right_handed_type_two AS
 SELECT feature.feature_id AS asx_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text);


ALTER TABLE so.asx_turn_right_handed_type_two OWNER TO kmr44;

--
-- Name: asymmetric_rna_internal_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.asymmetric_rna_internal_loop AS
 SELECT feature.feature_id AS asymmetric_rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text));


ALTER TABLE so.asymmetric_rna_internal_loop OWNER TO kmr44;

--
-- Name: attb_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.attb_site AS
 SELECT feature.feature_id AS attb_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attB_site'::text);


ALTER TABLE so.attb_site OWNER TO kmr44;

--
-- Name: attc_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.attc_site AS
 SELECT feature.feature_id AS attc_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attC_site'::text);


ALTER TABLE so.attc_site OWNER TO kmr44;

--
-- Name: attctn_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.attctn_site AS
 SELECT feature.feature_id AS attctn_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attCtn_site'::text);


ALTER TABLE so.attctn_site OWNER TO kmr44;

--
-- Name: attenuator; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.attenuator AS
 SELECT feature.feature_id AS attenuator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attenuator'::text);


ALTER TABLE so.attenuator OWNER TO kmr44;

--
-- Name: atti_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.atti_site AS
 SELECT feature.feature_id AS atti_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attI_site'::text);


ALTER TABLE so.atti_site OWNER TO kmr44;

--
-- Name: attl_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.attl_site AS
 SELECT feature.feature_id AS attl_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attL_site'::text);


ALTER TABLE so.attl_site OWNER TO kmr44;

--
-- Name: attp_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.attp_site AS
 SELECT feature.feature_id AS attp_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attP_site'::text);


ALTER TABLE so.attp_site OWNER TO kmr44;

--
-- Name: attr_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.attr_site AS
 SELECT feature.feature_id AS attr_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attR_site'::text);


ALTER TABLE so.attr_site OWNER TO kmr44;

--
-- Name: au_rich_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.au_rich_element AS
 SELECT feature.feature_id AS au_rich_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'AU_rich_element'::text);


ALTER TABLE so.au_rich_element OWNER TO kmr44;

--
-- Name: autocatalytically_spliced_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.autocatalytically_spliced_intron AS
 SELECT feature.feature_id AS autocatalytically_spliced_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text) OR ((cvterm.name)::text = 'group_III_intron'::text) OR ((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text));


ALTER TABLE so.autocatalytically_spliced_intron OWNER TO kmr44;

--
-- Name: autopolyploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.autopolyploid AS
 SELECT feature.feature_id AS autopolyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'autopolyploid'::text);


ALTER TABLE so.autopolyploid OWNER TO kmr44;

--
-- Name: autoregulated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.autoregulated AS
 SELECT feature.feature_id AS autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'autoregulated'::text));


ALTER TABLE so.autoregulated OWNER TO kmr44;

--
-- Name: autosynaptic_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.autosynaptic_chromosome AS
 SELECT feature.feature_id AS autosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text));


ALTER TABLE so.autosynaptic_chromosome OWNER TO kmr44;

--
-- Name: b_box; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.b_box AS
 SELECT feature.feature_id AS b_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'B_box'::text);


ALTER TABLE so.b_box OWNER TO kmr44;

--
-- Name: bac; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bac AS
 SELECT feature.feature_id AS bac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC'::text);


ALTER TABLE so.bac OWNER TO kmr44;

--
-- Name: bac_cloned_genomic_insert; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bac_cloned_genomic_insert AS
 SELECT feature.feature_id AS bac_cloned_genomic_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text);


ALTER TABLE so.bac_cloned_genomic_insert OWNER TO kmr44;

--
-- Name: bac_end; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bac_end AS
 SELECT feature.feature_id AS bac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC_end'::text);


ALTER TABLE so.bac_end OWNER TO kmr44;

--
-- Name: bacterial_rnapol_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bacterial_rnapol_promoter AS
 SELECT feature.feature_id AS bacterial_rnapol_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text));


ALTER TABLE so.bacterial_rnapol_promoter OWNER TO kmr44;

--
-- Name: bacterial_rnapol_promoter_sigma54; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bacterial_rnapol_promoter_sigma54 AS
 SELECT feature.feature_id AS bacterial_rnapol_promoter_sigma54_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text);


ALTER TABLE so.bacterial_rnapol_promoter_sigma54 OWNER TO kmr44;

--
-- Name: bacterial_rnapol_promoter_sigma_70; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bacterial_rnapol_promoter_sigma_70 AS
 SELECT feature.feature_id AS bacterial_rnapol_promoter_sigma_70_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text);


ALTER TABLE so.bacterial_rnapol_promoter_sigma_70 OWNER TO kmr44;

--
-- Name: bacterial_terminator; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bacterial_terminator AS
 SELECT feature.feature_id AS bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text));


ALTER TABLE so.bacterial_terminator OWNER TO kmr44;

--
-- Name: base; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.base AS
 SELECT feature.feature_id AS base_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'modified_RNA_base_feature'::text) OR ((cvterm.name)::text = 'inosine'::text) OR ((cvterm.name)::text = 'seven_methylguanine'::text) OR ((cvterm.name)::text = 'ribothymidine'::text) OR ((cvterm.name)::text = 'modified_adenosine'::text) OR ((cvterm.name)::text = 'modified_cytidine'::text) OR ((cvterm.name)::text = 'modified_guanosine'::text) OR ((cvterm.name)::text = 'modified_uridine'::text) OR ((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text) OR ((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text) OR ((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'two_thiocytidine'::text) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text) OR ((cvterm.name)::text = 'five_formylcytidine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'lysidine'::text) OR ((cvterm.name)::text = 'N4_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_methylguanosine'::text) OR ((cvterm.name)::text = 'seven_methylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text) OR ((cvterm.name)::text = 'wybutosine'::text) OR ((cvterm.name)::text = 'peroxywybutosine'::text) OR ((cvterm.name)::text = 'hydroxywybutosine'::text) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text) OR ((cvterm.name)::text = 'wyosine'::text) OR ((cvterm.name)::text = 'methylwyosine'::text) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'four_demethylwyosine'::text) OR ((cvterm.name)::text = 'isowyosine'::text) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'archaeosine'::text) OR ((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text) OR ((cvterm.name)::text = 'five_methyluridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_thiouridine'::text) OR ((cvterm.name)::text = 'four_thiouridine'::text) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text) OR ((cvterm.name)::text = 'five_methoxyuridine'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'three_methyluridine'::text) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'base'::text));


ALTER TABLE so.base OWNER TO kmr44;

--
-- Name: base_call_error_correction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.base_call_error_correction AS
 SELECT feature.feature_id AS base_call_error_correction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'base_call_error_correction'::text);


ALTER TABLE so.base_call_error_correction OWNER TO kmr44;

--
-- Name: base_pair; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.base_pair AS
 SELECT feature.feature_id AS base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'WC_base_pair'::text) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'wobble_base_pair'::text) OR ((cvterm.name)::text = 'base_pair'::text));


ALTER TABLE so.base_pair OWNER TO kmr44;

--
-- Name: benign_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.benign_variant AS
 SELECT feature.feature_id AS benign_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'benign_variant'::text);


ALTER TABLE so.benign_variant OWNER TO kmr44;

--
-- Name: beta_bulge; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_bulge AS
 SELECT feature.feature_id AS beta_bulge_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge'::text);


ALTER TABLE so.beta_bulge OWNER TO kmr44;

--
-- Name: beta_bulge_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_bulge_loop AS
 SELECT feature.feature_id AS beta_bulge_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text) OR ((cvterm.name)::text = 'beta_bulge_loop'::text));


ALTER TABLE so.beta_bulge_loop OWNER TO kmr44;

--
-- Name: beta_bulge_loop_five; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_bulge_loop_five AS
 SELECT feature.feature_id AS beta_bulge_loop_five_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge_loop_five'::text);


ALTER TABLE so.beta_bulge_loop_five OWNER TO kmr44;

--
-- Name: beta_bulge_loop_six; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_bulge_loop_six AS
 SELECT feature.feature_id AS beta_bulge_loop_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge_loop_six'::text);


ALTER TABLE so.beta_bulge_loop_six OWNER TO kmr44;

--
-- Name: beta_strand; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_strand AS
 SELECT feature.feature_id AS beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text) OR ((cvterm.name)::text = 'beta_strand'::text));


ALTER TABLE so.beta_strand OWNER TO kmr44;

--
-- Name: beta_turn; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn AS
 SELECT feature.feature_id AS beta_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'beta_turn'::text));


ALTER TABLE so.beta_turn OWNER TO kmr44;

--
-- Name: beta_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_left_handed_type_one AS
 SELECT feature.feature_id AS beta_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text);


ALTER TABLE so.beta_turn_left_handed_type_one OWNER TO kmr44;

--
-- Name: beta_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_left_handed_type_two AS
 SELECT feature.feature_id AS beta_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text);


ALTER TABLE so.beta_turn_left_handed_type_two OWNER TO kmr44;

--
-- Name: beta_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_right_handed_type_one AS
 SELECT feature.feature_id AS beta_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text);


ALTER TABLE so.beta_turn_right_handed_type_one OWNER TO kmr44;

--
-- Name: beta_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_right_handed_type_two AS
 SELECT feature.feature_id AS beta_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text);


ALTER TABLE so.beta_turn_right_handed_type_two OWNER TO kmr44;

--
-- Name: beta_turn_type_eight; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_type_eight AS
 SELECT feature.feature_id AS beta_turn_type_eight_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_eight'::text);


ALTER TABLE so.beta_turn_type_eight OWNER TO kmr44;

--
-- Name: beta_turn_type_six; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_type_six AS
 SELECT feature.feature_id AS beta_turn_type_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text));


ALTER TABLE so.beta_turn_type_six OWNER TO kmr44;

--
-- Name: beta_turn_type_six_a; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_type_six_a AS
 SELECT feature.feature_id AS beta_turn_type_six_a_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text));


ALTER TABLE so.beta_turn_type_six_a OWNER TO kmr44;

--
-- Name: beta_turn_type_six_a_one; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_type_six_a_one AS
 SELECT feature.feature_id AS beta_turn_type_six_a_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text);


ALTER TABLE so.beta_turn_type_six_a_one OWNER TO kmr44;

--
-- Name: beta_turn_type_six_a_two; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_type_six_a_two AS
 SELECT feature.feature_id AS beta_turn_type_six_a_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text);


ALTER TABLE so.beta_turn_type_six_a_two OWNER TO kmr44;

--
-- Name: beta_turn_type_six_b; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.beta_turn_type_six_b AS
 SELECT feature.feature_id AS beta_turn_type_six_b_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_b'::text);


ALTER TABLE so.beta_turn_type_six_b OWNER TO kmr44;

--
-- Name: bidirectional_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bidirectional_promoter AS
 SELECT feature.feature_id AS bidirectional_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bidirectional_promoter'::text);


ALTER TABLE so.bidirectional_promoter OWNER TO kmr44;

--
-- Name: binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.binding_site AS
 SELECT feature.feature_id AS binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'protein_binding_site'::text) OR ((cvterm.name)::text = 'epitope'::text) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text) OR ((cvterm.name)::text = 'metal_binding_site'::text) OR ((cvterm.name)::text = 'ligand_binding_site'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'histone_binding_site'::text) OR ((cvterm.name)::text = 'insulator_binding_site'::text) OR ((cvterm.name)::text = 'enhancer_binding_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'miRNA_target_site'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text) OR ((cvterm.name)::text = 'primer_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'binding_site'::text));


ALTER TABLE so.binding_site OWNER TO kmr44;

--
-- Name: biochemical_region_of_peptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.biochemical_region_of_peptide AS
 SELECT feature.feature_id AS biochemical_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text) OR ((cvterm.name)::text = 'molecular_contact_region'::text) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text));


ALTER TABLE so.biochemical_region_of_peptide OWNER TO kmr44;

--
-- Name: biological_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.biological_region AS
 SELECT feature.feature_id AS biological_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'linkage_group'::text) OR ((cvterm.name)::text = 'polypeptide'::text) OR ((cvterm.name)::text = 'deletion'::text) OR ((cvterm.name)::text = 'origin_of_replication'::text) OR ((cvterm.name)::text = 'recombination_feature'::text) OR ((cvterm.name)::text = 'CpG_island'::text) OR ((cvterm.name)::text = 'pseudogene'::text) OR ((cvterm.name)::text = 'binding_site'::text) OR ((cvterm.name)::text = 'pseudogenic_region'::text) OR ((cvterm.name)::text = 'cap'::text) OR ((cvterm.name)::text = 'intergenic_region'::text) OR ((cvterm.name)::text = 'oligo_U_tail'::text) OR ((cvterm.name)::text = 'polyA_sequence'::text) OR ((cvterm.name)::text = 'repeat_region'::text) OR ((cvterm.name)::text = 'insertion'::text) OR ((cvterm.name)::text = 'gene'::text) OR ((cvterm.name)::text = 'repeat_unit'::text) OR ((cvterm.name)::text = 'QTL'::text) OR ((cvterm.name)::text = 'chromosome_part'::text) OR ((cvterm.name)::text = 'gene_member_region'::text) OR ((cvterm.name)::text = 'transcript_region'::text) OR ((cvterm.name)::text = 'polypeptide_region'::text) OR ((cvterm.name)::text = 'gene_component_region'::text) OR ((cvterm.name)::text = 'mobile_genetic_element'::text) OR ((cvterm.name)::text = 'replicon'::text) OR ((cvterm.name)::text = 'base'::text) OR ((cvterm.name)::text = 'amino_acid'::text) OR ((cvterm.name)::text = 'genetic_marker'::text) OR ((cvterm.name)::text = 'sequence_motif'::text) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text) OR ((cvterm.name)::text = 'open_chromatin_region'::text) OR ((cvterm.name)::text = 'gene_group'::text) OR ((cvterm.name)::text = 'substitution'::text) OR ((cvterm.name)::text = 'inversion'::text) OR ((cvterm.name)::text = 'retron'::text) OR ((cvterm.name)::text = 'G_quartet'::text) OR ((cvterm.name)::text = 'base_pair'::text) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'pseudoknot'::text) OR ((cvterm.name)::text = 'WC_base_pair'::text) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'wobble_base_pair'::text) OR ((cvterm.name)::text = 'stem_loop'::text) OR ((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'i_motif'::text) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text) OR ((cvterm.name)::text = 'H_pseudoknot'::text) OR ((cvterm.name)::text = 'D_loop'::text) OR ((cvterm.name)::text = 'ARS'::text) OR ((cvterm.name)::text = 'oriT'::text) OR ((cvterm.name)::text = 'amplification_origin'::text) OR ((cvterm.name)::text = 'oriV'::text) OR ((cvterm.name)::text = 'oriC'::text) OR ((cvterm.name)::text = 'recombination_hotspot'::text) OR ((cvterm.name)::text = 'haplotype_block'::text) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text) OR ((cvterm.name)::text = 'iDNA'::text) OR ((cvterm.name)::text = 'specific_recombination_site'::text) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text) OR ((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text) OR ((cvterm.name)::text = 'inversion_site_part'::text) OR ((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text) OR ((cvterm.name)::text = 'attB_site'::text) OR ((cvterm.name)::text = 'attL_site'::text) OR ((cvterm.name)::text = 'attR_site'::text) OR ((cvterm.name)::text = 'attC_site'::text) OR ((cvterm.name)::text = 'attCtn_site'::text) OR ((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text) OR ((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text) OR ((cvterm.name)::text = 'processed_pseudogene'::text) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text) OR ((cvterm.name)::text = 'cassette_pseudogene'::text) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text) OR ((cvterm.name)::text = 'unitary_pseudogene'::text) OR ((cvterm.name)::text = 'protein_binding_site'::text) OR ((cvterm.name)::text = 'epitope'::text) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text) OR ((cvterm.name)::text = 'metal_binding_site'::text) OR ((cvterm.name)::text = 'ligand_binding_site'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'histone_binding_site'::text) OR ((cvterm.name)::text = 'insulator_binding_site'::text) OR ((cvterm.name)::text = 'enhancer_binding_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'miRNA_target_site'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text) OR ((cvterm.name)::text = 'primer_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'decayed_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text) OR ((cvterm.name)::text = 'long_terminal_repeat'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'inverted_repeat'::text) OR ((cvterm.name)::text = 'direct_repeat'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'dispersed_repeat'::text) OR ((cvterm.name)::text = 'tandem_repeat'::text) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text) OR ((cvterm.name)::text = 'Y_prime_element'::text) OR ((cvterm.name)::text = 'telomeric_repeat'::text) OR ((cvterm.name)::text = 'nested_repeat'::text) OR ((cvterm.name)::text = 'centromeric_repeat'::text) OR ((cvterm.name)::text = 'five_prime_LTR'::text) OR ((cvterm.name)::text = 'three_prime_LTR'::text) OR ((cvterm.name)::text = 'solo_LTR'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'target_site_duplication'::text) OR ((cvterm.name)::text = 'CRISPR'::text) OR ((cvterm.name)::text = 'satellite_DNA'::text) OR ((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text) OR ((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text) OR ((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text) OR ((cvterm.name)::text = 'nuclear_gene'::text) OR ((cvterm.name)::text = 'mt_gene'::text) OR ((cvterm.name)::text = 'plastid_gene'::text) OR ((cvterm.name)::text = 'nucleomorph_gene'::text) OR ((cvterm.name)::text = 'plasmid_gene'::text) OR ((cvterm.name)::text = 'proviral_gene'::text) OR ((cvterm.name)::text = 'transposable_element_gene'::text) OR ((cvterm.name)::text = 'silenced_gene'::text) OR ((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'foreign_gene'::text) OR ((cvterm.name)::text = 'fusion_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text) OR ((cvterm.name)::text = 'rescue_gene'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text) OR ((cvterm.name)::text = 'transgene'::text) OR ((cvterm.name)::text = 'predicted_gene'::text) OR ((cvterm.name)::text = 'protein_coding_gene'::text) OR ((cvterm.name)::text = 'retrogene'::text) OR ((cvterm.name)::text = 'ncRNA_gene'::text) OR ((cvterm.name)::text = 'cryptic_gene'::text) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'gene_cassette'::text) OR ((cvterm.name)::text = 'kinetoplast_gene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'apicoplast_gene'::text) OR ((cvterm.name)::text = 'ct_gene'::text) OR ((cvterm.name)::text = 'chromoplast_gene'::text) OR ((cvterm.name)::text = 'cyanelle_gene'::text) OR ((cvterm.name)::text = 'leucoplast_gene'::text) OR ((cvterm.name)::text = 'proplastid_gene'::text) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'floxed_gene'::text) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'gRNA_gene'::text) OR ((cvterm.name)::text = 'miRNA_gene'::text) OR ((cvterm.name)::text = 'scRNA_gene'::text) OR ((cvterm.name)::text = 'snoRNA_gene'::text) OR ((cvterm.name)::text = 'snRNA_gene'::text) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text) OR ((cvterm.name)::text = 'stRNA_gene'::text) OR ((cvterm.name)::text = 'tmRNA_gene'::text) OR ((cvterm.name)::text = 'tRNA_gene'::text) OR ((cvterm.name)::text = 'rRNA_gene'::text) OR ((cvterm.name)::text = 'piRNA_gene'::text) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text) OR ((cvterm.name)::text = 'lincRNA_gene'::text) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text) OR ((cvterm.name)::text = 'chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosome_band'::text) OR ((cvterm.name)::text = 'interband'::text) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text) OR ((cvterm.name)::text = 'matrix_attachment_site'::text) OR ((cvterm.name)::text = 'centromere'::text) OR ((cvterm.name)::text = 'telomere'::text) OR ((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text) OR ((cvterm.name)::text = 'transcript'::text) OR ((cvterm.name)::text = 'regulatory_region'::text) OR ((cvterm.name)::text = 'polycistronic_transcript'::text) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'primary_transcript'::text) OR ((cvterm.name)::text = 'mature_transcript'::text) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_transcript'::text) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text) OR ((cvterm.name)::text = 'edited_transcript'::text) OR ((cvterm.name)::text = 'processed_transcript'::text) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text) OR ((cvterm.name)::text = 'capped_primary_transcript'::text) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'exemplar_mRNA'::text) OR ((cvterm.name)::text = 'capped_mRNA'::text) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'recoded_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text) OR ((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text) OR ((cvterm.name)::text = 'tRNA'::text) OR ((cvterm.name)::text = 'snRNA'::text) OR ((cvterm.name)::text = 'snoRNA'::text) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text) OR ((cvterm.name)::text = 'RNase_P_RNA'::text) OR ((cvterm.name)::text = 'telomerase_RNA'::text) OR ((cvterm.name)::text = 'vault_RNA'::text) OR ((cvterm.name)::text = 'Y_RNA'::text) OR ((cvterm.name)::text = 'rasiRNA'::text) OR ((cvterm.name)::text = 'SRP_RNA'::text) OR ((cvterm.name)::text = 'guide_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text) OR ((cvterm.name)::text = 'siRNA'::text) OR ((cvterm.name)::text = 'stRNA'::text) OR ((cvterm.name)::text = 'class_II_RNA'::text) OR ((cvterm.name)::text = 'class_I_RNA'::text) OR ((cvterm.name)::text = 'piRNA'::text) OR ((cvterm.name)::text = 'lincRNA'::text) OR ((cvterm.name)::text = 'tasiRNA'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text) OR ((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text) OR ((cvterm.name)::text = 'glycyl_tRNA'::text) OR ((cvterm.name)::text = 'histidyl_tRNA'::text) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text) OR ((cvterm.name)::text = 'leucyl_tRNA'::text) OR ((cvterm.name)::text = 'lysyl_tRNA'::text) OR ((cvterm.name)::text = 'methionyl_tRNA'::text) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text) OR ((cvterm.name)::text = 'prolyl_tRNA'::text) OR ((cvterm.name)::text = 'seryl_tRNA'::text) OR ((cvterm.name)::text = 'threonyl_tRNA'::text) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text) OR ((cvterm.name)::text = 'valyl_tRNA'::text) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text) OR ((cvterm.name)::text = 'arginyl_tRNA'::text) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text) OR ((cvterm.name)::text = 'U4_snRNA'::text) OR ((cvterm.name)::text = 'U4atac_snRNA'::text) OR ((cvterm.name)::text = 'U5_snRNA'::text) OR ((cvterm.name)::text = 'U6_snRNA'::text) OR ((cvterm.name)::text = 'U6atac_snRNA'::text) OR ((cvterm.name)::text = 'U11_snRNA'::text) OR ((cvterm.name)::text = 'U12_snRNA'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text) OR ((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text) OR ((cvterm.name)::text = 'OxyS_RNA'::text) OR ((cvterm.name)::text = 'RprA_RNA'::text) OR ((cvterm.name)::text = 'RRE_RNA'::text) OR ((cvterm.name)::text = 'spot_42_RNA'::text) OR ((cvterm.name)::text = 'tmRNA'::text) OR ((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text) OR ((cvterm.name)::text = 'replication_regulatory_region'::text) OR ((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text) OR ((cvterm.name)::text = 'CRM'::text) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text) OR ((cvterm.name)::text = 'ISRE'::text) OR ((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text) OR ((cvterm.name)::text = 'silencer'::text) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text) OR ((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'exon'::text) OR ((cvterm.name)::text = 'edited_transcript_feature'::text) OR ((cvterm.name)::text = 'mature_transcript_region'::text) OR ((cvterm.name)::text = 'primary_transcript_region'::text) OR ((cvterm.name)::text = 'exon_region'::text) OR ((cvterm.name)::text = 'anchor_binding_site'::text) OR ((cvterm.name)::text = 'coding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text) OR ((cvterm.name)::text = 'interior_exon'::text) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text) OR ((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'pre_edited_region'::text) OR ((cvterm.name)::text = 'editing_block'::text) OR ((cvterm.name)::text = 'editing_domain'::text) OR ((cvterm.name)::text = 'unedited_region'::text) OR ((cvterm.name)::text = 'mRNA_region'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text) OR ((cvterm.name)::text = 'guide_RNA_region'::text) OR ((cvterm.name)::text = 'tRNA_region'::text) OR ((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text) OR ((cvterm.name)::text = 'UTR'::text) OR ((cvterm.name)::text = 'CDS'::text) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text) OR ((cvterm.name)::text = 'UTR_region'::text) OR ((cvterm.name)::text = 'CDS_region'::text) OR ((cvterm.name)::text = 'translational_frameshift'::text) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'kozak_sequence'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text) OR ((cvterm.name)::text = 'internal_UTR'::text) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text) OR ((cvterm.name)::text = 'CDS_independently_known'::text) OR ((cvterm.name)::text = 'CDS_predicted'::text) OR ((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text) OR ((cvterm.name)::text = 'Bruno_response_element'::text) OR ((cvterm.name)::text = 'iron_responsive_element'::text) OR ((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text) OR ((cvterm.name)::text = 'codon'::text) OR ((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text) OR ((cvterm.name)::text = 'stop_codon'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text) OR ((cvterm.name)::text = 'stop_codon_signal'::text) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text) OR ((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text) OR ((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text) OR ((cvterm.name)::text = 'CCA_tail'::text) OR ((cvterm.name)::text = 'DHU_loop'::text) OR ((cvterm.name)::text = 'T_loop'::text) OR ((cvterm.name)::text = 'splice_site'::text) OR ((cvterm.name)::text = 'intron'::text) OR ((cvterm.name)::text = 'clip'::text) OR ((cvterm.name)::text = 'TSS'::text) OR ((cvterm.name)::text = 'transcription_end_site'::text) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text) OR ((cvterm.name)::text = 'intron_domain'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'outron'::text) OR ((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text) OR ((cvterm.name)::text = 'cryptic_splice_site'::text) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'recursive_splice_site'::text) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text) OR ((cvterm.name)::text = 'three_prime_intron'::text) OR ((cvterm.name)::text = 'twintron'::text) OR ((cvterm.name)::text = 'UTR_intron'::text) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text) OR ((cvterm.name)::text = 'spliceosomal_intron'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text) OR ((cvterm.name)::text = 'group_III_intron'::text) OR ((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text) OR ((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text) OR ((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text) OR ((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text) OR ((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text) OR ((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text) OR ((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text) OR ((cvterm.name)::text = 'miRNA_loop'::text) OR ((cvterm.name)::text = 'miRNA_antiguide'::text) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'mature_protein_region'::text) OR ((cvterm.name)::text = 'immature_peptide_region'::text) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text) OR ((cvterm.name)::text = 'peptide_localization_signal'::text) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text) OR ((cvterm.name)::text = 'active_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'membrane_structure'::text) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text) OR ((cvterm.name)::text = 'beta_bulge_loop'::text) OR ((cvterm.name)::text = 'beta_strand'::text) OR ((cvterm.name)::text = 'peptide_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop'::text) OR ((cvterm.name)::text = 'serine_threonine_motif'::text) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text) OR ((cvterm.name)::text = 'alpha_beta_motif'::text) OR ((cvterm.name)::text = 'peptide_coil'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text) OR ((cvterm.name)::text = 'three_ten_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text) OR ((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text) OR ((cvterm.name)::text = 'gamma_turn'::text) OR ((cvterm.name)::text = 'serine_threonine_turn'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text) OR ((cvterm.name)::text = 'natural_variant_site'::text) OR ((cvterm.name)::text = 'mutated_variant_site'::text) OR ((cvterm.name)::text = 'alternate_sequence_site'::text) OR ((cvterm.name)::text = 'signal_peptide'::text) OR ((cvterm.name)::text = 'transit_peptide'::text) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text) OR ((cvterm.name)::text = 'nuclear_export_signal'::text) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text) OR ((cvterm.name)::text = 'intein'::text) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text) OR ((cvterm.name)::text = 'propeptide'::text) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text) OR ((cvterm.name)::text = 'n_terminal_region'::text) OR ((cvterm.name)::text = 'c_terminal_region'::text) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text) OR ((cvterm.name)::text = 'polypeptide_repeat'::text) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text) OR ((cvterm.name)::text = 'molecular_contact_region'::text) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'non_transcribed_region'::text) OR ((cvterm.name)::text = 'gene_fragment'::text) OR ((cvterm.name)::text = 'TSS_region'::text) OR ((cvterm.name)::text = 'gene_segment'::text) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'transposable_element'::text) OR ((cvterm.name)::text = 'proviral_region'::text) OR ((cvterm.name)::text = 'integron'::text) OR ((cvterm.name)::text = 'genomic_island'::text) OR ((cvterm.name)::text = 'integrated_plasmid'::text) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text) OR ((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'nested_transposon'::text) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text) OR ((cvterm.name)::text = 'conjugative_transposon'::text) OR ((cvterm.name)::text = 'helitron'::text) OR ((cvterm.name)::text = 'p_element'::text) OR ((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text) OR ((cvterm.name)::text = 'polinton'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text) OR ((cvterm.name)::text = 'adaptive_island'::text) OR ((cvterm.name)::text = 'symbiosis_island'::text) OR ((cvterm.name)::text = 'cryptic_prophage'::text) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text) OR ((cvterm.name)::text = 'plasmid'::text) OR ((cvterm.name)::text = 'chromosome'::text) OR ((cvterm.name)::text = 'vector_replicon'::text) OR ((cvterm.name)::text = 'maxicircle'::text) OR ((cvterm.name)::text = 'minicircle'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'episome'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text) OR ((cvterm.name)::text = 'nuclear_chromosome'::text) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text) OR ((cvterm.name)::text = 'DNA_chromosome'::text) OR ((cvterm.name)::text = 'RNA_chromosome'::text) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'YAC'::text) OR ((cvterm.name)::text = 'BAC'::text) OR ((cvterm.name)::text = 'PAC'::text) OR ((cvterm.name)::text = 'cosmid'::text) OR ((cvterm.name)::text = 'phagemid'::text) OR ((cvterm.name)::text = 'fosmid'::text) OR ((cvterm.name)::text = 'lambda_vector'::text) OR ((cvterm.name)::text = 'plasmid_vector'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text) OR ((cvterm.name)::text = 'inosine'::text) OR ((cvterm.name)::text = 'seven_methylguanine'::text) OR ((cvterm.name)::text = 'ribothymidine'::text) OR ((cvterm.name)::text = 'modified_adenosine'::text) OR ((cvterm.name)::text = 'modified_cytidine'::text) OR ((cvterm.name)::text = 'modified_guanosine'::text) OR ((cvterm.name)::text = 'modified_uridine'::text) OR ((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text) OR ((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text) OR ((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'two_thiocytidine'::text) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text) OR ((cvterm.name)::text = 'five_formylcytidine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'lysidine'::text) OR ((cvterm.name)::text = 'N4_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_methylguanosine'::text) OR ((cvterm.name)::text = 'seven_methylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text) OR ((cvterm.name)::text = 'wybutosine'::text) OR ((cvterm.name)::text = 'peroxywybutosine'::text) OR ((cvterm.name)::text = 'hydroxywybutosine'::text) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text) OR ((cvterm.name)::text = 'wyosine'::text) OR ((cvterm.name)::text = 'methylwyosine'::text) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'four_demethylwyosine'::text) OR ((cvterm.name)::text = 'isowyosine'::text) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'archaeosine'::text) OR ((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text) OR ((cvterm.name)::text = 'five_methyluridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_thiouridine'::text) OR ((cvterm.name)::text = 'four_thiouridine'::text) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text) OR ((cvterm.name)::text = 'five_methoxyuridine'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'three_methyluridine'::text) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'catalytic_residue'::text) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text) OR ((cvterm.name)::text = 'alanine'::text) OR ((cvterm.name)::text = 'valine'::text) OR ((cvterm.name)::text = 'leucine'::text) OR ((cvterm.name)::text = 'isoleucine'::text) OR ((cvterm.name)::text = 'proline'::text) OR ((cvterm.name)::text = 'tryptophan'::text) OR ((cvterm.name)::text = 'phenylalanine'::text) OR ((cvterm.name)::text = 'methionine'::text) OR ((cvterm.name)::text = 'glycine'::text) OR ((cvterm.name)::text = 'serine'::text) OR ((cvterm.name)::text = 'threonine'::text) OR ((cvterm.name)::text = 'tyrosine'::text) OR ((cvterm.name)::text = 'cysteine'::text) OR ((cvterm.name)::text = 'glutamine'::text) OR ((cvterm.name)::text = 'asparagine'::text) OR ((cvterm.name)::text = 'lysine'::text) OR ((cvterm.name)::text = 'arginine'::text) OR ((cvterm.name)::text = 'histidine'::text) OR ((cvterm.name)::text = 'aspartic_acid'::text) OR ((cvterm.name)::text = 'glutamic_acid'::text) OR ((cvterm.name)::text = 'selenocysteine'::text) OR ((cvterm.name)::text = 'pyrrolysine'::text) OR ((cvterm.name)::text = 'modified_glycine'::text) OR ((cvterm.name)::text = 'modified_L_alanine'::text) OR ((cvterm.name)::text = 'modified_L_asparagine'::text) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text) OR ((cvterm.name)::text = 'modified_L_cysteine'::text) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text) OR ((cvterm.name)::text = 'modified_L_threonine'::text) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text) OR ((cvterm.name)::text = 'modified_L_glutamine'::text) OR ((cvterm.name)::text = 'modified_L_methionine'::text) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text) OR ((cvterm.name)::text = 'modified_L_histidine'::text) OR ((cvterm.name)::text = 'modified_L_serine'::text) OR ((cvterm.name)::text = 'modified_L_lysine'::text) OR ((cvterm.name)::text = 'modified_L_leucine'::text) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text) OR ((cvterm.name)::text = 'modified_L_valine'::text) OR ((cvterm.name)::text = 'modified_L_proline'::text) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text) OR ((cvterm.name)::text = 'modified_L_arginine'::text) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text) OR ((cvterm.name)::text = 'DArT_marker'::text) OR ((cvterm.name)::text = 'nucleotide_motif'::text) OR ((cvterm.name)::text = 'DNA_motif'::text) OR ((cvterm.name)::text = 'RNA_motif'::text) OR ((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text) OR ((cvterm.name)::text = 'minus_10_signal'::text) OR ((cvterm.name)::text = 'minus_35_signal'::text) OR ((cvterm.name)::text = 'DRE_motif'::text) OR ((cvterm.name)::text = 'E_box_motif'::text) OR ((cvterm.name)::text = 'INR1_motif'::text) OR ((cvterm.name)::text = 'GAGA_motif'::text) OR ((cvterm.name)::text = 'octamer_motif'::text) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text) OR ((cvterm.name)::text = 'promoter_element'::text) OR ((cvterm.name)::text = 'DCE_SI'::text) OR ((cvterm.name)::text = 'DCE_SII'::text) OR ((cvterm.name)::text = 'DCE_SIII'::text) OR ((cvterm.name)::text = 'minus_12_signal'::text) OR ((cvterm.name)::text = 'minus_24_signal'::text) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text) OR ((cvterm.name)::text = 'DMv5_motif'::text) OR ((cvterm.name)::text = 'DMv3_motif'::text) OR ((cvterm.name)::text = 'DMv2_motif'::text) OR ((cvterm.name)::text = 'DPE1_motif'::text) OR ((cvterm.name)::text = 'DMv1_motif'::text) OR ((cvterm.name)::text = 'NDM2_motif'::text) OR ((cvterm.name)::text = 'NDM3_motif'::text) OR ((cvterm.name)::text = 'core_promoter_element'::text) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text) OR ((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text) OR ((cvterm.name)::text = 'BREu_motif'::text) OR ((cvterm.name)::text = 'TATA_box'::text) OR ((cvterm.name)::text = 'A_box'::text) OR ((cvterm.name)::text = 'B_box'::text) OR ((cvterm.name)::text = 'C_box'::text) OR ((cvterm.name)::text = 'MTE'::text) OR ((cvterm.name)::text = 'BREd_motif'::text) OR ((cvterm.name)::text = 'DCE'::text) OR ((cvterm.name)::text = 'intermediate_element'::text) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text) OR ((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'modified_base'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'methylated_base_feature'::text) OR ((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'operon'::text) OR ((cvterm.name)::text = 'mating_type_region'::text) OR ((cvterm.name)::text = 'gene_array'::text) OR ((cvterm.name)::text = 'gene_subarray'::text) OR ((cvterm.name)::text = 'gene_cassette_array'::text) OR ((cvterm.name)::text = 'regulon'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text) OR ((cvterm.name)::text = 'SNV'::text) OR ((cvterm.name)::text = 'complex_substitution'::text) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text) OR ((cvterm.name)::text = 'transition'::text) OR ((cvterm.name)::text = 'transversion'::text) OR ((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text) OR ((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'biological_region'::text));


ALTER TABLE so.biological_region OWNER TO kmr44;

--
-- Name: biomaterial_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.biomaterial_region AS
 SELECT feature.feature_id AS biomaterial_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'reagent'::text) OR ((cvterm.name)::text = 'engineered_region'::text) OR ((cvterm.name)::text = 'PCR_product'::text) OR ((cvterm.name)::text = 'clone'::text) OR ((cvterm.name)::text = 'rescue_region'::text) OR ((cvterm.name)::text = 'oligo'::text) OR ((cvterm.name)::text = 'clone_insert'::text) OR ((cvterm.name)::text = 'cloned_region'::text) OR ((cvterm.name)::text = 'databank_entry'::text) OR ((cvterm.name)::text = 'RAPD'::text) OR ((cvterm.name)::text = 'genomic_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text) OR ((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'aptamer'::text) OR ((cvterm.name)::text = 'probe'::text) OR ((cvterm.name)::text = 'tag'::text) OR ((cvterm.name)::text = 'ss_oligo'::text) OR ((cvterm.name)::text = 'ds_oligo'::text) OR ((cvterm.name)::text = 'DNAzyme'::text) OR ((cvterm.name)::text = 'synthetic_oligo'::text) OR ((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text) OR ((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text) OR ((cvterm.name)::text = 'EST'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text) OR ((cvterm.name)::text = 'UST'::text) OR ((cvterm.name)::text = 'RST'::text) OR ((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text) OR ((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text) OR ((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text) OR ((cvterm.name)::text = 'reverse_primer'::text) OR ((cvterm.name)::text = 'ASPE_primer'::text) OR ((cvterm.name)::text = 'dCAPS_primer'::text) OR ((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text) OR ((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text) OR ((cvterm.name)::text = 'LNA_oligo'::text) OR ((cvterm.name)::text = 'TNA_oligo'::text) OR ((cvterm.name)::text = 'GNA_oligo'::text) OR ((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_region'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'biomaterial_region'::text));


ALTER TABLE so.biomaterial_region OWNER TO kmr44;

--
-- Name: bipartite_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bipartite_duplication AS
 SELECT feature.feature_id AS bipartite_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bipartite_duplication'::text);


ALTER TABLE so.bipartite_duplication OWNER TO kmr44;

--
-- Name: bipartite_inversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bipartite_inversion AS
 SELECT feature.feature_id AS bipartite_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bipartite_inversion'::text);


ALTER TABLE so.bipartite_inversion OWNER TO kmr44;

--
-- Name: blocked_reading_frame; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.blocked_reading_frame AS
 SELECT feature.feature_id AS blocked_reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blocked_reading_frame'::text);


ALTER TABLE so.blocked_reading_frame OWNER TO kmr44;

--
-- Name: blunt_end_restriction_enzyme_cleavage_junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.blunt_end_restriction_enzyme_cleavage_junction AS
 SELECT feature.feature_id AS blunt_end_restriction_enzyme_cleavage_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text);


ALTER TABLE so.blunt_end_restriction_enzyme_cleavage_junction OWNER TO kmr44;

--
-- Name: blunt_end_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.blunt_end_restriction_enzyme_cleavage_site AS
 SELECT feature.feature_id AS blunt_end_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text);


ALTER TABLE so.blunt_end_restriction_enzyme_cleavage_site OWNER TO kmr44;

--
-- Name: bound_by_factor; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bound_by_factor AS
 SELECT feature.feature_id AS bound_by_factor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'bound_by_protein'::text) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text) OR ((cvterm.name)::text = 'bound_by_factor'::text));


ALTER TABLE so.bound_by_factor OWNER TO kmr44;

--
-- Name: bound_by_nucleic_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bound_by_nucleic_acid AS
 SELECT feature.feature_id AS bound_by_nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bound_by_nucleic_acid'::text);


ALTER TABLE so.bound_by_nucleic_acid OWNER TO kmr44;

--
-- Name: bound_by_protein; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bound_by_protein AS
 SELECT feature.feature_id AS bound_by_protein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bound_by_protein'::text);


ALTER TABLE so.bound_by_protein OWNER TO kmr44;

--
-- Name: branch_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.branch_site AS
 SELECT feature.feature_id AS branch_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'branch_site'::text);


ALTER TABLE so.branch_site OWNER TO kmr44;

--
-- Name: bred_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bred_motif AS
 SELECT feature.feature_id AS bred_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BREd_motif'::text);


ALTER TABLE so.bred_motif OWNER TO kmr44;

--
-- Name: breu_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.breu_motif AS
 SELECT feature.feature_id AS breu_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BREu_motif'::text);


ALTER TABLE so.breu_motif OWNER TO kmr44;

--
-- Name: bruno_response_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.bruno_response_element AS
 SELECT feature.feature_id AS bruno_response_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Bruno_response_element'::text);


ALTER TABLE so.bruno_response_element OWNER TO kmr44;

--
-- Name: c_box; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_box AS
 SELECT feature.feature_id AS c_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_box'::text);


ALTER TABLE so.c_box OWNER TO kmr44;

--
-- Name: c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_cluster AS
 SELECT feature.feature_id AS c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_cluster'::text);


ALTER TABLE so.c_cluster OWNER TO kmr44;

--
-- Name: c_d_box_snorna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_d_box_snorna AS
 SELECT feature.feature_id AS c_d_box_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text));


ALTER TABLE so.c_d_box_snorna OWNER TO kmr44;

--
-- Name: c_d_box_snorna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_d_box_snorna_encoding AS
 SELECT feature.feature_id AS c_d_box_snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text);


ALTER TABLE so.c_d_box_snorna_encoding OWNER TO kmr44;

--
-- Name: c_d_box_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_d_box_snorna_primary_transcript AS
 SELECT feature.feature_id AS c_d_box_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text);


ALTER TABLE so.c_d_box_snorna_primary_transcript OWNER TO kmr44;

--
-- Name: c_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_gene AS
 SELECT feature.feature_id AS c_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_gene'::text);


ALTER TABLE so.c_gene OWNER TO kmr44;

--
-- Name: c_terminal_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_terminal_region AS
 SELECT feature.feature_id AS c_terminal_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'c_terminal_region'::text);


ALTER TABLE so.c_terminal_region OWNER TO kmr44;

--
-- Name: c_to_a_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_to_a_transversion AS
 SELECT feature.feature_id AS c_to_a_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_A_transversion'::text);


ALTER TABLE so.c_to_a_transversion OWNER TO kmr44;

--
-- Name: c_to_g_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_to_g_transversion AS
 SELECT feature.feature_id AS c_to_g_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_G_transversion'::text);


ALTER TABLE so.c_to_g_transversion OWNER TO kmr44;

--
-- Name: c_to_t_transition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_to_t_transition AS
 SELECT feature.feature_id AS c_to_t_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text));


ALTER TABLE so.c_to_t_transition OWNER TO kmr44;

--
-- Name: c_to_t_transition_at_pcpg_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.c_to_t_transition_at_pcpg_site AS
 SELECT feature.feature_id AS c_to_t_transition_at_pcpg_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text);


ALTER TABLE so.c_to_t_transition_at_pcpg_site OWNER TO kmr44;

--
-- Name: caat_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.caat_signal AS
 SELECT feature.feature_id AS caat_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CAAT_signal'::text);


ALTER TABLE so.caat_signal OWNER TO kmr44;

--
-- Name: canonical_five_prime_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.canonical_five_prime_splice_site AS
 SELECT feature.feature_id AS canonical_five_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text);


ALTER TABLE so.canonical_five_prime_splice_site OWNER TO kmr44;

--
-- Name: canonical_three_prime_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.canonical_three_prime_splice_site AS
 SELECT feature.feature_id AS canonical_three_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text);


ALTER TABLE so.canonical_three_prime_splice_site OWNER TO kmr44;

--
-- Name: cap; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cap AS
 SELECT feature.feature_id AS cap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cap'::text);


ALTER TABLE so.cap OWNER TO kmr44;

--
-- Name: capped; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.capped AS
 SELECT feature.feature_id AS capped_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped'::text);


ALTER TABLE so.capped OWNER TO kmr44;

--
-- Name: capped_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.capped_mrna AS
 SELECT feature.feature_id AS capped_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped_mRNA'::text);


ALTER TABLE so.capped_mrna OWNER TO kmr44;

--
-- Name: capped_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.capped_primary_transcript AS
 SELECT feature.feature_id AS capped_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped_primary_transcript'::text);


ALTER TABLE so.capped_primary_transcript OWNER TO kmr44;

--
-- Name: cassette_array_member; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cassette_array_member AS
 SELECT feature.feature_id AS cassette_array_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cassette_array_member'::text);


ALTER TABLE so.cassette_array_member OWNER TO kmr44;

--
-- Name: cassette_pseudogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cassette_pseudogene AS
 SELECT feature.feature_id AS cassette_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cassette_pseudogene'::text);


ALTER TABLE so.cassette_pseudogene OWNER TO kmr44;

--
-- Name: catalytic_residue; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.catalytic_residue AS
 SELECT feature.feature_id AS catalytic_residue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catalytic_residue'::text);


ALTER TABLE so.catalytic_residue OWNER TO kmr44;

--
-- Name: catmat_left_handed_four; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.catmat_left_handed_four AS
 SELECT feature.feature_id AS catmat_left_handed_four_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_left_handed_four'::text);


ALTER TABLE so.catmat_left_handed_four OWNER TO kmr44;

--
-- Name: catmat_left_handed_three; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.catmat_left_handed_three AS
 SELECT feature.feature_id AS catmat_left_handed_three_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_left_handed_three'::text);


ALTER TABLE so.catmat_left_handed_three OWNER TO kmr44;

--
-- Name: catmat_right_handed_four; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.catmat_right_handed_four AS
 SELECT feature.feature_id AS catmat_right_handed_four_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_right_handed_four'::text);


ALTER TABLE so.catmat_right_handed_four OWNER TO kmr44;

--
-- Name: catmat_right_handed_three; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.catmat_right_handed_three AS
 SELECT feature.feature_id AS catmat_right_handed_three_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_right_handed_three'::text);


ALTER TABLE so.catmat_right_handed_three OWNER TO kmr44;

--
-- Name: cca_tail; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cca_tail AS
 SELECT feature.feature_id AS cca_tail_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CCA_tail'::text);


ALTER TABLE so.cca_tail OWNER TO kmr44;

--
-- Name: cdna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cdna AS
 SELECT feature.feature_id AS cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'single_stranded_cDNA'::text) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text) OR ((cvterm.name)::text = 'cDNA'::text));


ALTER TABLE so.cdna OWNER TO kmr44;

--
-- Name: cdna_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cdna_clone AS
 SELECT feature.feature_id AS cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text));


ALTER TABLE so.cdna_clone OWNER TO kmr44;

--
-- Name: cdna_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cdna_match AS
 SELECT feature.feature_id AS cdna_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cDNA_match'::text);


ALTER TABLE so.cdna_match OWNER TO kmr44;

--
-- Name: cds; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cds AS
 SELECT feature.feature_id AS cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text) OR ((cvterm.name)::text = 'CDS_independently_known'::text) OR ((cvterm.name)::text = 'CDS_predicted'::text) OR ((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'CDS'::text));


ALTER TABLE so.cds OWNER TO kmr44;

--
-- Name: cds_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cds_fragment AS
 SELECT feature.feature_id AS cds_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_fragment'::text);


ALTER TABLE so.cds_fragment OWNER TO kmr44;

--
-- Name: cds_independently_known; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cds_independently_known AS
 SELECT feature.feature_id AS cds_independently_known_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_independently_known'::text);


ALTER TABLE so.cds_independently_known OWNER TO kmr44;

--
-- Name: cds_predicted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cds_predicted AS
 SELECT feature.feature_id AS cds_predicted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'CDS_predicted'::text));


ALTER TABLE so.cds_predicted OWNER TO kmr44;

--
-- Name: cds_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cds_region AS
 SELECT feature.feature_id AS cds_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text) OR ((cvterm.name)::text = 'codon'::text) OR ((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text) OR ((cvterm.name)::text = 'stop_codon'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'CDS_region'::text));


ALTER TABLE so.cds_region OWNER TO kmr44;

--
-- Name: cds_supported_by_domain_match_data; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cds_supported_by_domain_match_data AS
 SELECT feature.feature_id AS cds_supported_by_domain_match_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text);


ALTER TABLE so.cds_supported_by_domain_match_data OWNER TO kmr44;

--
-- Name: cds_supported_by_est_or_cdna_data; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cds_supported_by_est_or_cdna_data AS
 SELECT feature.feature_id AS cds_supported_by_est_or_cdna_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text);


ALTER TABLE so.cds_supported_by_est_or_cdna_data OWNER TO kmr44;

--
-- Name: cds_supported_by_sequence_similarity_data; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cds_supported_by_sequence_similarity_data AS
 SELECT feature.feature_id AS cds_supported_by_sequence_similarity_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text));


ALTER TABLE so.cds_supported_by_sequence_similarity_data OWNER TO kmr44;

--
-- Name: central_hydrophobic_region_of_signal_peptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.central_hydrophobic_region_of_signal_peptide AS
 SELECT feature.feature_id AS central_hydrophobic_region_of_signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text);


ALTER TABLE so.central_hydrophobic_region_of_signal_peptide OWNER TO kmr44;

--
-- Name: centromere; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.centromere AS
 SELECT feature.feature_id AS centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text) OR ((cvterm.name)::text = 'centromere'::text));


ALTER TABLE so.centromere OWNER TO kmr44;

--
-- Name: centromere_dna_element_i; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.centromere_dna_element_i AS
 SELECT feature.feature_id AS centromere_dna_element_i_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_I'::text);


ALTER TABLE so.centromere_dna_element_i OWNER TO kmr44;

--
-- Name: centromere_dna_element_ii; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.centromere_dna_element_ii AS
 SELECT feature.feature_id AS centromere_dna_element_ii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_II'::text);


ALTER TABLE so.centromere_dna_element_ii OWNER TO kmr44;

--
-- Name: centromere_dna_element_iii; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.centromere_dna_element_iii AS
 SELECT feature.feature_id AS centromere_dna_element_iii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_III'::text);


ALTER TABLE so.centromere_dna_element_iii OWNER TO kmr44;

--
-- Name: centromeric_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.centromeric_repeat AS
 SELECT feature.feature_id AS centromeric_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text) OR ((cvterm.name)::text = 'centromeric_repeat'::text));


ALTER TABLE so.centromeric_repeat OWNER TO kmr44;

--
-- Name: chimeric_cdna_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chimeric_cdna_clone AS
 SELECT feature.feature_id AS chimeric_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chimeric_cDNA_clone'::text);


ALTER TABLE so.chimeric_cdna_clone OWNER TO kmr44;

--
-- Name: chip_seq_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chip_seq_region AS
 SELECT feature.feature_id AS chip_seq_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CHiP_seq_region'::text);


ALTER TABLE so.chip_seq_region OWNER TO kmr44;

--
-- Name: chloroplast_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chloroplast_chromosome AS
 SELECT feature.feature_id AS chloroplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chloroplast_chromosome'::text);


ALTER TABLE so.chloroplast_chromosome OWNER TO kmr44;

--
-- Name: chloroplast_dna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chloroplast_dna AS
 SELECT feature.feature_id AS chloroplast_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chloroplast_DNA'::text);


ALTER TABLE so.chloroplast_dna OWNER TO kmr44;

--
-- Name: chloroplast_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chloroplast_sequence AS
 SELECT feature.feature_id AS chloroplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chloroplast_DNA'::text) OR ((cvterm.name)::text = 'chloroplast_sequence'::text));


ALTER TABLE so.chloroplast_sequence OWNER TO kmr44;

--
-- Name: chromoplast_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromoplast_chromosome AS
 SELECT feature.feature_id AS chromoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_chromosome'::text);


ALTER TABLE so.chromoplast_chromosome OWNER TO kmr44;

--
-- Name: chromoplast_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromoplast_gene AS
 SELECT feature.feature_id AS chromoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_gene'::text);


ALTER TABLE so.chromoplast_gene OWNER TO kmr44;

--
-- Name: chromoplast_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromoplast_sequence AS
 SELECT feature.feature_id AS chromoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_sequence'::text);


ALTER TABLE so.chromoplast_sequence OWNER TO kmr44;

--
-- Name: chromosomal_deletion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomal_deletion AS
 SELECT feature.feature_id AS chromosomal_deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'chromosomal_deletion'::text));


ALTER TABLE so.chromosomal_deletion OWNER TO kmr44;

--
-- Name: chromosomal_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomal_duplication AS
 SELECT feature.feature_id AS chromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'interchromosomal_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text) OR ((cvterm.name)::text = 'insertional_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text) OR ((cvterm.name)::text = 'chromosomal_duplication'::text));


ALTER TABLE so.chromosomal_duplication OWNER TO kmr44;

--
-- Name: chromosomal_inversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomal_inversion AS
 SELECT feature.feature_id AS chromosomal_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text) OR ((cvterm.name)::text = 'paracentric_inversion'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'bipartite_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text));


ALTER TABLE so.chromosomal_inversion OWNER TO kmr44;

--
-- Name: chromosomal_regulatory_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomal_regulatory_element AS
 SELECT feature.feature_id AS chromosomal_regulatory_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'matrix_attachment_site'::text) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text));


ALTER TABLE so.chromosomal_regulatory_element OWNER TO kmr44;

--
-- Name: chromosomal_structural_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomal_structural_element AS
 SELECT feature.feature_id AS chromosomal_structural_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'centromere'::text) OR ((cvterm.name)::text = 'telomere'::text) OR ((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text));


ALTER TABLE so.chromosomal_structural_element OWNER TO kmr44;

--
-- Name: chromosomal_translocation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomal_translocation AS
 SELECT feature.feature_id AS chromosomal_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'cyclic_translocation'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'chromosomal_translocation'::text));


ALTER TABLE so.chromosomal_translocation OWNER TO kmr44;

--
-- Name: chromosomal_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomal_transposition AS
 SELECT feature.feature_id AS chromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'chromosomal_transposition'::text));


ALTER TABLE so.chromosomal_transposition OWNER TO kmr44;

--
-- Name: chromosomal_variation_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomal_variation_attribute AS
 SELECT feature.feature_id AS chromosomal_variation_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'intrachromosomal'::text) OR ((cvterm.name)::text = 'interchromosomal'::text) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text));


ALTER TABLE so.chromosomal_variation_attribute OWNER TO kmr44;

--
-- Name: chromosomally_aberrant_genome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosomally_aberrant_genome AS
 SELECT feature.feature_id AS chromosomally_aberrant_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text);


ALTER TABLE so.chromosomally_aberrant_genome OWNER TO kmr44;

--
-- Name: chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome AS
 SELECT feature.feature_id AS chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mitochondrial_chromosome'::text) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text) OR ((cvterm.name)::text = 'nuclear_chromosome'::text) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text) OR ((cvterm.name)::text = 'DNA_chromosome'::text) OR ((cvterm.name)::text = 'RNA_chromosome'::text) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'chromosome'::text));


ALTER TABLE so.chromosome OWNER TO kmr44;

--
-- Name: chromosome_arm; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_arm AS
 SELECT feature.feature_id AS chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_arm'::text);


ALTER TABLE so.chromosome_arm OWNER TO kmr44;

--
-- Name: chromosome_band; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_band AS
 SELECT feature.feature_id AS chromosome_band_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_band'::text);


ALTER TABLE so.chromosome_band OWNER TO kmr44;

--
-- Name: chromosome_breakage_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_breakage_sequence AS
 SELECT feature.feature_id AS chromosome_breakage_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_breakage_sequence'::text);


ALTER TABLE so.chromosome_breakage_sequence OWNER TO kmr44;

--
-- Name: chromosome_breakpoint; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_breakpoint AS
 SELECT feature.feature_id AS chromosome_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inversion_breakpoint'::text) OR ((cvterm.name)::text = 'translocation_breakpoint'::text) OR ((cvterm.name)::text = 'insertion_breakpoint'::text) OR ((cvterm.name)::text = 'deletion_breakpoint'::text) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text));


ALTER TABLE so.chromosome_breakpoint OWNER TO kmr44;

--
-- Name: chromosome_fission; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_fission AS
 SELECT feature.feature_id AS chromosome_fission_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_fission'::text);


ALTER TABLE so.chromosome_fission OWNER TO kmr44;

--
-- Name: chromosome_number_variation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_number_variation AS
 SELECT feature.feature_id AS chromosome_number_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'aneuploid'::text) OR ((cvterm.name)::text = 'polyploid'::text) OR ((cvterm.name)::text = 'hyperploid'::text) OR ((cvterm.name)::text = 'hypoploid'::text) OR ((cvterm.name)::text = 'autopolyploid'::text) OR ((cvterm.name)::text = 'allopolyploid'::text) OR ((cvterm.name)::text = 'chromosome_number_variation'::text));


ALTER TABLE so.chromosome_number_variation OWNER TO kmr44;

--
-- Name: chromosome_part; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_part AS
 SELECT feature.feature_id AS chromosome_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosome_band'::text) OR ((cvterm.name)::text = 'interband'::text) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text) OR ((cvterm.name)::text = 'matrix_attachment_site'::text) OR ((cvterm.name)::text = 'centromere'::text) OR ((cvterm.name)::text = 'telomere'::text) OR ((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text) OR ((cvterm.name)::text = 'chromosome_part'::text));


ALTER TABLE so.chromosome_part OWNER TO kmr44;

--
-- Name: chromosome_structure_variation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_structure_variation AS
 SELECT feature.feature_id AS chromosome_structure_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'free_chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosomal_transposition'::text) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text) OR ((cvterm.name)::text = 'chromosomal_duplication'::text) OR ((cvterm.name)::text = 'compound_chromosome'::text) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'chromosomal_deletion'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'ring_chromosome'::text) OR ((cvterm.name)::text = 'chromosome_fission'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text) OR ((cvterm.name)::text = 'paracentric_inversion'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'bipartite_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'chromosomal_translocation'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'cyclic_translocation'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text) OR ((cvterm.name)::text = 'insertional_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text));


ALTER TABLE so.chromosome_structure_variation OWNER TO kmr44;

--
-- Name: chromosome_variation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.chromosome_variation AS
 SELECT feature.feature_id AS chromosome_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'assortment_derived_variation'::text) OR ((cvterm.name)::text = 'chromosome_number_variation'::text) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text) OR ((cvterm.name)::text = 'aneuploid'::text) OR ((cvterm.name)::text = 'polyploid'::text) OR ((cvterm.name)::text = 'hyperploid'::text) OR ((cvterm.name)::text = 'hypoploid'::text) OR ((cvterm.name)::text = 'autopolyploid'::text) OR ((cvterm.name)::text = 'allopolyploid'::text) OR ((cvterm.name)::text = 'free_chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosomal_transposition'::text) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text) OR ((cvterm.name)::text = 'chromosomal_duplication'::text) OR ((cvterm.name)::text = 'compound_chromosome'::text) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'chromosomal_deletion'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'ring_chromosome'::text) OR ((cvterm.name)::text = 'chromosome_fission'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text) OR ((cvterm.name)::text = 'paracentric_inversion'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'bipartite_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'chromosomal_translocation'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'cyclic_translocation'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text) OR ((cvterm.name)::text = 'insertional_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'chromosome_variation'::text));


ALTER TABLE so.chromosome_variation OWNER TO kmr44;

--
-- Name: circular; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.circular AS
 SELECT feature.feature_id AS circular_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular'::text);


ALTER TABLE so.circular OWNER TO kmr44;

--
-- Name: circular_double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.circular_double_stranded_dna_chromosome AS
 SELECT feature.feature_id AS circular_double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text);


ALTER TABLE so.circular_double_stranded_dna_chromosome OWNER TO kmr44;

--
-- Name: circular_double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.circular_double_stranded_rna_chromosome AS
 SELECT feature.feature_id AS circular_double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text);


ALTER TABLE so.circular_double_stranded_rna_chromosome OWNER TO kmr44;

--
-- Name: circular_single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.circular_single_stranded_dna_chromosome AS
 SELECT feature.feature_id AS circular_single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text);


ALTER TABLE so.circular_single_stranded_dna_chromosome OWNER TO kmr44;

--
-- Name: circular_single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.circular_single_stranded_rna_chromosome AS
 SELECT feature.feature_id AS circular_single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text);


ALTER TABLE so.circular_single_stranded_rna_chromosome OWNER TO kmr44;

--
-- Name: cis_regulatory_frameshift_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cis_regulatory_frameshift_element AS
 SELECT feature.feature_id AS cis_regulatory_frameshift_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text);


ALTER TABLE so.cis_regulatory_frameshift_element OWNER TO kmr44;

--
-- Name: cis_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cis_splice_site AS
 SELECT feature.feature_id AS cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'recursive_splice_site'::text) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'cis_splice_site'::text));


ALTER TABLE so.cis_splice_site OWNER TO kmr44;

--
-- Name: class_i_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.class_i_rna AS
 SELECT feature.feature_id AS class_i_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'class_I_RNA'::text);


ALTER TABLE so.class_i_rna OWNER TO kmr44;

--
-- Name: class_ii_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.class_ii_rna AS
 SELECT feature.feature_id AS class_ii_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'class_II_RNA'::text);


ALTER TABLE so.class_ii_rna OWNER TO kmr44;

--
-- Name: cleaved_for_gpi_anchor_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cleaved_for_gpi_anchor_region AS
 SELECT feature.feature_id AS cleaved_for_gpi_anchor_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text);


ALTER TABLE so.cleaved_for_gpi_anchor_region OWNER TO kmr44;

--
-- Name: cleaved_initiator_methionine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cleaved_initiator_methionine AS
 SELECT feature.feature_id AS cleaved_initiator_methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cleaved_initiator_methionine'::text);


ALTER TABLE so.cleaved_initiator_methionine OWNER TO kmr44;

--
-- Name: cleaved_peptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cleaved_peptide_region AS
 SELECT feature.feature_id AS cleaved_peptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cleaved_initiator_methionine'::text) OR ((cvterm.name)::text = 'intein'::text) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text) OR ((cvterm.name)::text = 'propeptide'::text) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text) OR ((cvterm.name)::text = 'n_terminal_region'::text) OR ((cvterm.name)::text = 'c_terminal_region'::text) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text));


ALTER TABLE so.cleaved_peptide_region OWNER TO kmr44;

--
-- Name: clip; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.clip AS
 SELECT feature.feature_id AS clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text) OR ((cvterm.name)::text = 'clip'::text));


ALTER TABLE so.clip OWNER TO kmr44;

--
-- Name: clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.clone AS
 SELECT feature.feature_id AS clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'genomic_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text) OR ((cvterm.name)::text = 'clone'::text));


ALTER TABLE so.clone OWNER TO kmr44;

--
-- Name: clone_end; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.clone_end AS
 SELECT feature.feature_id AS clone_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_end'::text);


ALTER TABLE so.clone_end OWNER TO kmr44;

--
-- Name: clone_insert; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.clone_insert AS
 SELECT feature.feature_id AS clone_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cloned_cDNA_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'clone_insert'::text));


ALTER TABLE so.clone_insert OWNER TO kmr44;

--
-- Name: clone_insert_end; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.clone_insert_end AS
 SELECT feature.feature_id AS clone_insert_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_insert_end'::text);


ALTER TABLE so.clone_insert_end OWNER TO kmr44;

--
-- Name: clone_insert_start; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.clone_insert_start AS
 SELECT feature.feature_id AS clone_insert_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_insert_start'::text);


ALTER TABLE so.clone_insert_start OWNER TO kmr44;

--
-- Name: cloned_cdna_insert; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cloned_cdna_insert AS
 SELECT feature.feature_id AS cloned_cdna_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cloned_cDNA_insert'::text);


ALTER TABLE so.cloned_cdna_insert OWNER TO kmr44;

--
-- Name: cloned_genomic_insert; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cloned_genomic_insert AS
 SELECT feature.feature_id AS cloned_genomic_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text));


ALTER TABLE so.cloned_genomic_insert OWNER TO kmr44;

--
-- Name: cloned_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cloned_region AS
 SELECT feature.feature_id AS cloned_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cloned_region'::text);


ALTER TABLE so.cloned_region OWNER TO kmr44;

--
-- Name: coding_conserved_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.coding_conserved_region AS
 SELECT feature.feature_id AS coding_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_conserved_region'::text);


ALTER TABLE so.coding_conserved_region OWNER TO kmr44;

--
-- Name: coding_end; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.coding_end AS
 SELECT feature.feature_id AS coding_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_end'::text);


ALTER TABLE so.coding_end OWNER TO kmr44;

--
-- Name: coding_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.coding_exon AS
 SELECT feature.feature_id AS coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text) OR ((cvterm.name)::text = 'coding_exon'::text));


ALTER TABLE so.coding_exon OWNER TO kmr44;

--
-- Name: coding_region_of_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.coding_region_of_exon AS
 SELECT feature.feature_id AS coding_region_of_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text));


ALTER TABLE so.coding_region_of_exon OWNER TO kmr44;

--
-- Name: coding_sequence_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.coding_sequence_variant AS
 SELECT feature.feature_id AS coding_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text) OR ((cvterm.name)::text = 'inframe_variant'::text) OR ((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text) OR ((cvterm.name)::text = 'synonymous_codon'::text) OR ((cvterm.name)::text = 'terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text) OR ((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text) OR ((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text) OR ((cvterm.name)::text = 'coding_sequence_variant'::text));


ALTER TABLE so.coding_sequence_variant OWNER TO kmr44;

--
-- Name: coding_start; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.coding_start AS
 SELECT feature.feature_id AS coding_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_start'::text);


ALTER TABLE so.coding_start OWNER TO kmr44;

--
-- Name: codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.codon AS
 SELECT feature.feature_id AS codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text) OR ((cvterm.name)::text = 'stop_codon'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'codon'::text));


ALTER TABLE so.codon OWNER TO kmr44;

--
-- Name: codon_redefined; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.codon_redefined AS
 SELECT feature.feature_id AS codon_redefined_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'codon_redefined'::text);


ALTER TABLE so.codon_redefined OWNER TO kmr44;

--
-- Name: codon_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.codon_variant AS
 SELECT feature.feature_id AS codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text) OR ((cvterm.name)::text = 'synonymous_codon'::text) OR ((cvterm.name)::text = 'terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text) OR ((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'codon_variant'::text));


ALTER TABLE so.codon_variant OWNER TO kmr44;

--
-- Name: coiled_coil; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.coiled_coil AS
 SELECT feature.feature_id AS coiled_coil_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coiled_coil'::text);


ALTER TABLE so.coiled_coil OWNER TO kmr44;

--
-- Name: cointegrated_plasmid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cointegrated_plasmid AS
 SELECT feature.feature_id AS cointegrated_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cointegrated_plasmid'::text);


ALTER TABLE so.cointegrated_plasmid OWNER TO kmr44;

--
-- Name: common_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.common_variant AS
 SELECT feature.feature_id AS common_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'common_variant'::text);


ALTER TABLE so.common_variant OWNER TO kmr44;

--
-- Name: compensatory_transcript_secondary_structure_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.compensatory_transcript_secondary_structure_variant AS
 SELECT feature.feature_id AS compensatory_transcript_secondary_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text);


ALTER TABLE so.compensatory_transcript_secondary_structure_variant OWNER TO kmr44;

--
-- Name: complex_3d_structural_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.complex_3d_structural_variant AS
 SELECT feature.feature_id AS complex_3d_structural_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_3D_structural_variant'::text);


ALTER TABLE so.complex_3d_structural_variant OWNER TO kmr44;

--
-- Name: complex_change_in_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.complex_change_in_transcript AS
 SELECT feature.feature_id AS complex_change_in_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_change_in_transcript'::text);


ALTER TABLE so.complex_change_in_transcript OWNER TO kmr44;

--
-- Name: complex_change_of_translational_product_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.complex_change_of_translational_product_variant AS
 SELECT feature.feature_id AS complex_change_of_translational_product_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text);


ALTER TABLE so.complex_change_of_translational_product_variant OWNER TO kmr44;

--
-- Name: complex_chromosomal_mutation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.complex_chromosomal_mutation AS
 SELECT feature.feature_id AS complex_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_chromosomal_mutation'::text);


ALTER TABLE so.complex_chromosomal_mutation OWNER TO kmr44;

--
-- Name: complex_structural_alteration; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.complex_structural_alteration AS
 SELECT feature.feature_id AS complex_structural_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_structural_alteration'::text);


ALTER TABLE so.complex_structural_alteration OWNER TO kmr44;

--
-- Name: complex_substitution; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.complex_substitution AS
 SELECT feature.feature_id AS complex_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_substitution'::text);


ALTER TABLE so.complex_substitution OWNER TO kmr44;

--
-- Name: compositionally_biased_region_of_peptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.compositionally_biased_region_of_peptide AS
 SELECT feature.feature_id AS compositionally_biased_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text);


ALTER TABLE so.compositionally_biased_region_of_peptide OWNER TO kmr44;

--
-- Name: compound_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.compound_chromosome AS
 SELECT feature.feature_id AS compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'compound_chromosome_arm'::text) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text) OR ((cvterm.name)::text = 'compound_chromosome'::text));


ALTER TABLE so.compound_chromosome OWNER TO kmr44;

--
-- Name: compound_chromosome_arm; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.compound_chromosome_arm AS
 SELECT feature.feature_id AS compound_chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compound_chromosome_arm'::text);


ALTER TABLE so.compound_chromosome_arm OWNER TO kmr44;

--
-- Name: conformational_change_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.conformational_change_variant AS
 SELECT feature.feature_id AS conformational_change_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conformational_change_variant'::text);


ALTER TABLE so.conformational_change_variant OWNER TO kmr44;

--
-- Name: conformational_switch; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.conformational_switch AS
 SELECT feature.feature_id AS conformational_switch_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conformational_switch'::text);


ALTER TABLE so.conformational_switch OWNER TO kmr44;

--
-- Name: conjugative_transposon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.conjugative_transposon AS
 SELECT feature.feature_id AS conjugative_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conjugative_transposon'::text);


ALTER TABLE so.conjugative_transposon OWNER TO kmr44;

--
-- Name: consensus; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.consensus AS
 SELECT feature.feature_id AS consensus_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'consensus'::text);


ALTER TABLE so.consensus OWNER TO kmr44;

--
-- Name: consensus_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.consensus_mrna AS
 SELECT feature.feature_id AS consensus_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'consensus_mRNA'::text);


ALTER TABLE so.consensus_mrna OWNER TO kmr44;

--
-- Name: consensus_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.consensus_region AS
 SELECT feature.feature_id AS consensus_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'consensus_region'::text));


ALTER TABLE so.consensus_region OWNER TO kmr44;

--
-- Name: conservative_amino_acid_substitution; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.conservative_amino_acid_substitution AS
 SELECT feature.feature_id AS conservative_amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text);


ALTER TABLE so.conservative_amino_acid_substitution OWNER TO kmr44;

--
-- Name: conservative_missense_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.conservative_missense_codon AS
 SELECT feature.feature_id AS conservative_missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conservative_missense_codon'::text);


ALTER TABLE so.conservative_missense_codon OWNER TO kmr44;

--
-- Name: conserved; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.conserved AS
 SELECT feature.feature_id AS conserved_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'homologous'::text) OR ((cvterm.name)::text = 'syntenic'::text) OR ((cvterm.name)::text = 'orthologous'::text) OR ((cvterm.name)::text = 'paralogous'::text) OR ((cvterm.name)::text = 'conserved'::text));


ALTER TABLE so.conserved OWNER TO kmr44;

--
-- Name: conserved_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.conserved_region AS
 SELECT feature.feature_id AS conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'coding_conserved_region'::text) OR ((cvterm.name)::text = 'nc_conserved_region'::text) OR ((cvterm.name)::text = 'RR_tract'::text) OR ((cvterm.name)::text = 'homologous_region'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text) OR ((cvterm.name)::text = 'X_element'::text) OR ((cvterm.name)::text = 'U_box'::text) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text) OR ((cvterm.name)::text = 'syntenic_region'::text) OR ((cvterm.name)::text = 'paralogous_region'::text) OR ((cvterm.name)::text = 'orthologous_region'::text) OR ((cvterm.name)::text = 'conserved_region'::text));


ALTER TABLE so.conserved_region OWNER TO kmr44;

--
-- Name: contig; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.contig AS
 SELECT feature.feature_id AS contig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig'::text);


ALTER TABLE so.contig OWNER TO kmr44;

--
-- Name: contig_collection; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.contig_collection AS
 SELECT feature.feature_id AS contig_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig_collection'::text);


ALTER TABLE so.contig_collection OWNER TO kmr44;

--
-- Name: contig_read; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.contig_read AS
 SELECT feature.feature_id AS contig_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig_read'::text);


ALTER TABLE so.contig_read OWNER TO kmr44;

--
-- Name: copy_number_change; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.copy_number_change AS
 SELECT feature.feature_id AS copy_number_change_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_change'::text);


ALTER TABLE so.copy_number_change OWNER TO kmr44;

--
-- Name: copy_number_gain; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.copy_number_gain AS
 SELECT feature.feature_id AS copy_number_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_gain'::text);


ALTER TABLE so.copy_number_gain OWNER TO kmr44;

--
-- Name: copy_number_loss; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.copy_number_loss AS
 SELECT feature.feature_id AS copy_number_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_loss'::text);


ALTER TABLE so.copy_number_loss OWNER TO kmr44;

--
-- Name: copy_number_variation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.copy_number_variation AS
 SELECT feature.feature_id AS copy_number_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'copy_number_gain'::text) OR ((cvterm.name)::text = 'copy_number_loss'::text) OR ((cvterm.name)::text = 'copy_number_variation'::text));


ALTER TABLE so.copy_number_variation OWNER TO kmr44;

--
-- Name: core_promoter_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.core_promoter_element AS
 SELECT feature.feature_id AS core_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text) OR ((cvterm.name)::text = 'BREu_motif'::text) OR ((cvterm.name)::text = 'TATA_box'::text) OR ((cvterm.name)::text = 'A_box'::text) OR ((cvterm.name)::text = 'B_box'::text) OR ((cvterm.name)::text = 'C_box'::text) OR ((cvterm.name)::text = 'MTE'::text) OR ((cvterm.name)::text = 'BREd_motif'::text) OR ((cvterm.name)::text = 'DCE'::text) OR ((cvterm.name)::text = 'intermediate_element'::text) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'core_promoter_element'::text));


ALTER TABLE so.core_promoter_element OWNER TO kmr44;

--
-- Name: cosmid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cosmid AS
 SELECT feature.feature_id AS cosmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cosmid'::text);


ALTER TABLE so.cosmid OWNER TO kmr44;

--
-- Name: cpg_island; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cpg_island AS
 SELECT feature.feature_id AS cpg_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CpG_island'::text);


ALTER TABLE so.cpg_island OWNER TO kmr44;

--
-- Name: crispr; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.crispr AS
 SELECT feature.feature_id AS crispr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CRISPR'::text);


ALTER TABLE so.crispr OWNER TO kmr44;

--
-- Name: crm; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.crm AS
 SELECT feature.feature_id AS crm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text) OR ((cvterm.name)::text = 'silencer'::text) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'CRM'::text));


ALTER TABLE so.crm OWNER TO kmr44;

--
-- Name: cross_genome_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cross_genome_match AS
 SELECT feature.feature_id AS cross_genome_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cross_genome_match'::text);


ALTER TABLE so.cross_genome_match OWNER TO kmr44;

--
-- Name: cryptic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cryptic AS
 SELECT feature.feature_id AS cryptic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic'::text);


ALTER TABLE so.cryptic OWNER TO kmr44;

--
-- Name: cryptic_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cryptic_gene AS
 SELECT feature.feature_id AS cryptic_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'cryptic_gene'::text));


ALTER TABLE so.cryptic_gene OWNER TO kmr44;

--
-- Name: cryptic_prophage; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cryptic_prophage AS
 SELECT feature.feature_id AS cryptic_prophage_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_prophage'::text);


ALTER TABLE so.cryptic_prophage OWNER TO kmr44;

--
-- Name: cryptic_splice_acceptor; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cryptic_splice_acceptor AS
 SELECT feature.feature_id AS cryptic_splice_acceptor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_acceptor'::text);


ALTER TABLE so.cryptic_splice_acceptor OWNER TO kmr44;

--
-- Name: cryptic_splice_donor; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cryptic_splice_donor AS
 SELECT feature.feature_id AS cryptic_splice_donor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_donor'::text);


ALTER TABLE so.cryptic_splice_donor OWNER TO kmr44;

--
-- Name: cryptic_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cryptic_splice_site AS
 SELECT feature.feature_id AS cryptic_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_site'::text);


ALTER TABLE so.cryptic_splice_site OWNER TO kmr44;

--
-- Name: cryptic_splice_site_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cryptic_splice_site_variant AS
 SELECT feature.feature_id AS cryptic_splice_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cryptic_splice_acceptor'::text) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text));


ALTER TABLE so.cryptic_splice_site_variant OWNER TO kmr44;

--
-- Name: cryptogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cryptogene AS
 SELECT feature.feature_id AS cryptogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptogene'::text);


ALTER TABLE so.cryptogene OWNER TO kmr44;

--
-- Name: csrb_rsmb_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.csrb_rsmb_rna AS
 SELECT feature.feature_id AS csrb_rsmb_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text);


ALTER TABLE so.csrb_rsmb_rna OWNER TO kmr44;

--
-- Name: ct_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ct_gene AS
 SELECT feature.feature_id AS ct_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ct_gene'::text);


ALTER TABLE so.ct_gene OWNER TO kmr44;

--
-- Name: ctg_start_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ctg_start_codon AS
 SELECT feature.feature_id AS ctg_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CTG_start_codon'::text);


ALTER TABLE so.ctg_start_codon OWNER TO kmr44;

--
-- Name: cyanelle_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cyanelle_chromosome AS
 SELECT feature.feature_id AS cyanelle_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_chromosome'::text);


ALTER TABLE so.cyanelle_chromosome OWNER TO kmr44;

--
-- Name: cyanelle_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cyanelle_gene AS
 SELECT feature.feature_id AS cyanelle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_gene'::text);


ALTER TABLE so.cyanelle_gene OWNER TO kmr44;

--
-- Name: cyanelle_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cyanelle_sequence AS
 SELECT feature.feature_id AS cyanelle_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_sequence'::text);


ALTER TABLE so.cyanelle_sequence OWNER TO kmr44;

--
-- Name: cyclic_translocation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cyclic_translocation AS
 SELECT feature.feature_id AS cyclic_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyclic_translocation'::text);


ALTER TABLE so.cyclic_translocation OWNER TO kmr44;

--
-- Name: cysteine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cysteine AS
 SELECT feature.feature_id AS cysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteine'::text);


ALTER TABLE so.cysteine OWNER TO kmr44;

--
-- Name: cysteine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cysteine_trna_primary_transcript AS
 SELECT feature.feature_id AS cysteine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text);


ALTER TABLE so.cysteine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: cysteinyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cysteinyl_trna AS
 SELECT feature.feature_id AS cysteinyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteinyl_tRNA'::text);


ALTER TABLE so.cysteinyl_trna OWNER TO kmr44;

--
-- Name: cytoplasmic_polypeptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.cytoplasmic_polypeptide_region AS
 SELECT feature.feature_id AS cytoplasmic_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text);


ALTER TABLE so.cytoplasmic_polypeptide_region OWNER TO kmr44;

--
-- Name: d_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_cluster AS
 SELECT feature.feature_id AS d_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_cluster'::text);


ALTER TABLE so.d_cluster OWNER TO kmr44;

--
-- Name: d_dj_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_dj_c_cluster AS
 SELECT feature.feature_id AS d_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_C_cluster'::text);


ALTER TABLE so.d_dj_c_cluster OWNER TO kmr44;

--
-- Name: d_dj_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_dj_cluster AS
 SELECT feature.feature_id AS d_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_cluster'::text);


ALTER TABLE so.d_dj_cluster OWNER TO kmr44;

--
-- Name: d_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_dj_j_c_cluster AS
 SELECT feature.feature_id AS d_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text);


ALTER TABLE so.d_dj_j_c_cluster OWNER TO kmr44;

--
-- Name: d_dj_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_dj_j_cluster AS
 SELECT feature.feature_id AS d_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_J_cluster'::text);


ALTER TABLE so.d_dj_j_cluster OWNER TO kmr44;

--
-- Name: d_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_gene AS
 SELECT feature.feature_id AS d_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_gene'::text);


ALTER TABLE so.d_gene OWNER TO kmr44;

--
-- Name: d_gene_recombination_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_gene_recombination_feature AS
 SELECT feature.feature_id AS d_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text));


ALTER TABLE so.d_gene_recombination_feature OWNER TO kmr44;

--
-- Name: d_interchr_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_interchr_transposition AS
 SELECT feature.feature_id AS d_interchr_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text);


ALTER TABLE so.d_interchr_transposition OWNER TO kmr44;

--
-- Name: d_intrachr_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_intrachr_transposition AS
 SELECT feature.feature_id AS d_intrachr_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text);


ALTER TABLE so.d_intrachr_transposition OWNER TO kmr44;

--
-- Name: d_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_j_c_cluster AS
 SELECT feature.feature_id AS d_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_J_C_cluster'::text);


ALTER TABLE so.d_j_c_cluster OWNER TO kmr44;

--
-- Name: d_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_j_cluster AS
 SELECT feature.feature_id AS d_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_J_cluster'::text);


ALTER TABLE so.d_j_cluster OWNER TO kmr44;

--
-- Name: d_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.d_loop AS
 SELECT feature.feature_id AS d_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_loop'::text);


ALTER TABLE so.d_loop OWNER TO kmr44;

--
-- Name: dart_marker; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dart_marker AS
 SELECT feature.feature_id AS dart_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DArT_marker'::text);


ALTER TABLE so.dart_marker OWNER TO kmr44;

--
-- Name: databank_entry; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.databank_entry AS
 SELECT feature.feature_id AS databank_entry_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'databank_entry'::text);


ALTER TABLE so.databank_entry OWNER TO kmr44;

--
-- Name: dcaps_primer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dcaps_primer AS
 SELECT feature.feature_id AS dcaps_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dCAPS_primer'::text);


ALTER TABLE so.dcaps_primer OWNER TO kmr44;

--
-- Name: dce; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dce AS
 SELECT feature.feature_id AS dce_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE'::text);


ALTER TABLE so.dce OWNER TO kmr44;

--
-- Name: dce_si; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dce_si AS
 SELECT feature.feature_id AS dce_si_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SI'::text);


ALTER TABLE so.dce_si OWNER TO kmr44;

--
-- Name: dce_sii; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dce_sii AS
 SELECT feature.feature_id AS dce_sii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SII'::text);


ALTER TABLE so.dce_sii OWNER TO kmr44;

--
-- Name: dce_siii; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dce_siii AS
 SELECT feature.feature_id AS dce_siii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SIII'::text);


ALTER TABLE so.dce_siii OWNER TO kmr44;

--
-- Name: de_novo_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.de_novo_variant AS
 SELECT feature.feature_id AS de_novo_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'de_novo_variant'::text);


ALTER TABLE so.de_novo_variant OWNER TO kmr44;

--
-- Name: decayed_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.decayed_exon AS
 SELECT feature.feature_id AS decayed_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decayed_exon'::text);


ALTER TABLE so.decayed_exon OWNER TO kmr44;

--
-- Name: decreased_polyadenylation_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.decreased_polyadenylation_variant AS
 SELECT feature.feature_id AS decreased_polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text);


ALTER TABLE so.decreased_polyadenylation_variant OWNER TO kmr44;

--
-- Name: decreased_transcript_level_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.decreased_transcript_level_variant AS
 SELECT feature.feature_id AS decreased_transcript_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcript_level_variant'::text);


ALTER TABLE so.decreased_transcript_level_variant OWNER TO kmr44;

--
-- Name: decreased_transcript_stability_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.decreased_transcript_stability_variant AS
 SELECT feature.feature_id AS decreased_transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text);


ALTER TABLE so.decreased_transcript_stability_variant OWNER TO kmr44;

--
-- Name: decreased_transcription_rate_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.decreased_transcription_rate_variant AS
 SELECT feature.feature_id AS decreased_transcription_rate_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text);


ALTER TABLE so.decreased_transcription_rate_variant OWNER TO kmr44;

--
-- Name: decreased_translational_product_level; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.decreased_translational_product_level AS
 SELECT feature.feature_id AS decreased_translational_product_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_translational_product_level'::text);


ALTER TABLE so.decreased_translational_product_level OWNER TO kmr44;

--
-- Name: defective_conjugative_transposon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.defective_conjugative_transposon AS
 SELECT feature.feature_id AS defective_conjugative_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'defective_conjugative_transposon'::text);


ALTER TABLE so.defective_conjugative_transposon OWNER TO kmr44;

--
-- Name: deficient_inversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.deficient_inversion AS
 SELECT feature.feature_id AS deficient_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_inversion'::text);


ALTER TABLE so.deficient_inversion OWNER TO kmr44;

--
-- Name: deficient_translocation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.deficient_translocation AS
 SELECT feature.feature_id AS deficient_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_translocation'::text);


ALTER TABLE so.deficient_translocation OWNER TO kmr44;

--
-- Name: deletion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.deletion AS
 SELECT feature.feature_id AS deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion'::text);


ALTER TABLE so.deletion OWNER TO kmr44;

--
-- Name: deletion_breakpoint; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.deletion_breakpoint AS
 SELECT feature.feature_id AS deletion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion_breakpoint'::text);


ALTER TABLE so.deletion_breakpoint OWNER TO kmr44;

--
-- Name: deletion_junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.deletion_junction AS
 SELECT feature.feature_id AS deletion_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion_junction'::text);


ALTER TABLE so.deletion_junction OWNER TO kmr44;

--
-- Name: designed_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.designed_sequence AS
 SELECT feature.feature_id AS designed_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'designed_sequence'::text);


ALTER TABLE so.designed_sequence OWNER TO kmr44;

--
-- Name: dexstrosynaptic_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dexstrosynaptic_chromosome AS
 SELECT feature.feature_id AS dexstrosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text);


ALTER TABLE so.dexstrosynaptic_chromosome OWNER TO kmr44;

--
-- Name: dhu_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dhu_loop AS
 SELECT feature.feature_id AS dhu_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DHU_loop'::text);


ALTER TABLE so.dhu_loop OWNER TO kmr44;

--
-- Name: dicistronic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dicistronic AS
 SELECT feature.feature_id AS dicistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic'::text);


ALTER TABLE so.dicistronic OWNER TO kmr44;

--
-- Name: dicistronic_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dicistronic_mrna AS
 SELECT feature.feature_id AS dicistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic_mRNA'::text);


ALTER TABLE so.dicistronic_mrna OWNER TO kmr44;

--
-- Name: dicistronic_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dicistronic_primary_transcript AS
 SELECT feature.feature_id AS dicistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic_primary_transcript'::text);


ALTER TABLE so.dicistronic_primary_transcript OWNER TO kmr44;

--
-- Name: dicistronic_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dicistronic_transcript AS
 SELECT feature.feature_id AS dicistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_transcript'::text));


ALTER TABLE so.dicistronic_transcript OWNER TO kmr44;

--
-- Name: dif_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dif_site AS
 SELECT feature.feature_id AS dif_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dif_site'::text);


ALTER TABLE so.dif_site OWNER TO kmr44;

--
-- Name: dihydrouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dihydrouridine AS
 SELECT feature.feature_id AS dihydrouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dihydrouridine'::text);


ALTER TABLE so.dihydrouridine OWNER TO kmr44;

--
-- Name: dinucleotide_repeat_microsatellite_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dinucleotide_repeat_microsatellite_feature AS
 SELECT feature.feature_id AS dinucleotide_repeat_microsatellite_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text);


ALTER TABLE so.dinucleotide_repeat_microsatellite_feature OWNER TO kmr44;

--
-- Name: diplotype; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.diplotype AS
 SELECT feature.feature_id AS diplotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'diplotype'::text);


ALTER TABLE so.diplotype OWNER TO kmr44;

--
-- Name: direct; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.direct AS
 SELECT feature.feature_id AS direct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'direct'::text);


ALTER TABLE so.direct OWNER TO kmr44;

--
-- Name: direct_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.direct_repeat AS
 SELECT feature.feature_id AS direct_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'target_site_duplication'::text) OR ((cvterm.name)::text = 'CRISPR'::text) OR ((cvterm.name)::text = 'direct_repeat'::text));


ALTER TABLE so.direct_repeat OWNER TO kmr44;

--
-- Name: direct_tandem_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.direct_tandem_duplication AS
 SELECT feature.feature_id AS direct_tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'direct_tandem_duplication'::text);


ALTER TABLE so.direct_tandem_duplication OWNER TO kmr44;

--
-- Name: direction_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.direction_attribute AS
 SELECT feature.feature_id AS direction_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'forward'::text) OR ((cvterm.name)::text = 'reverse'::text) OR ((cvterm.name)::text = 'direction_attribute'::text));


ALTER TABLE so.direction_attribute OWNER TO kmr44;

--
-- Name: disease_associated_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.disease_associated_variant AS
 SELECT feature.feature_id AS disease_associated_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'disease_associated_variant'::text);


ALTER TABLE so.disease_associated_variant OWNER TO kmr44;

--
-- Name: disease_causing_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.disease_causing_variant AS
 SELECT feature.feature_id AS disease_causing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'disease_causing_variant'::text);


ALTER TABLE so.disease_causing_variant OWNER TO kmr44;

--
-- Name: dispersed_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dispersed_repeat AS
 SELECT feature.feature_id AS dispersed_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dispersed_repeat'::text);


ALTER TABLE so.dispersed_repeat OWNER TO kmr44;

--
-- Name: distal_promoter_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.distal_promoter_element AS
 SELECT feature.feature_id AS distal_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'distal_promoter_element'::text);


ALTER TABLE so.distal_promoter_element OWNER TO kmr44;

--
-- Name: distant_three_prime_recoding_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.distant_three_prime_recoding_signal AS
 SELECT feature.feature_id AS distant_three_prime_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text);


ALTER TABLE so.distant_three_prime_recoding_signal OWNER TO kmr44;

--
-- Name: dj_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dj_c_cluster AS
 SELECT feature.feature_id AS dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_C_cluster'::text);


ALTER TABLE so.dj_c_cluster OWNER TO kmr44;

--
-- Name: dj_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dj_gene AS
 SELECT feature.feature_id AS dj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_gene'::text);


ALTER TABLE so.dj_gene OWNER TO kmr44;

--
-- Name: dj_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dj_j_c_cluster AS
 SELECT feature.feature_id AS dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_J_C_cluster'::text);


ALTER TABLE so.dj_j_c_cluster OWNER TO kmr44;

--
-- Name: dj_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dj_j_cluster AS
 SELECT feature.feature_id AS dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_J_cluster'::text);


ALTER TABLE so.dj_j_cluster OWNER TO kmr44;

--
-- Name: dmv1_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dmv1_motif AS
 SELECT feature.feature_id AS dmv1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv1_motif'::text);


ALTER TABLE so.dmv1_motif OWNER TO kmr44;

--
-- Name: dmv2_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dmv2_motif AS
 SELECT feature.feature_id AS dmv2_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv2_motif'::text);


ALTER TABLE so.dmv2_motif OWNER TO kmr44;

--
-- Name: dmv3_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dmv3_motif AS
 SELECT feature.feature_id AS dmv3_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv3_motif'::text);


ALTER TABLE so.dmv3_motif OWNER TO kmr44;

--
-- Name: dmv4_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dmv4_motif AS
 SELECT feature.feature_id AS dmv4_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv4_motif'::text);


ALTER TABLE so.dmv4_motif OWNER TO kmr44;

--
-- Name: dmv5_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dmv5_motif AS
 SELECT feature.feature_id AS dmv5_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv5_motif'::text);


ALTER TABLE so.dmv5_motif OWNER TO kmr44;

--
-- Name: dna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dna AS
 SELECT feature.feature_id AS dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cDNA'::text) OR ((cvterm.name)::text = 'genomic_DNA'::text) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text) OR ((cvterm.name)::text = 'DNA'::text));


ALTER TABLE so.dna OWNER TO kmr44;

--
-- Name: dna_aptamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dna_aptamer AS
 SELECT feature.feature_id AS dna_aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNA_aptamer'::text);


ALTER TABLE so.dna_aptamer OWNER TO kmr44;

--
-- Name: dna_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dna_binding_site AS
 SELECT feature.feature_id AS dna_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text));


ALTER TABLE so.dna_binding_site OWNER TO kmr44;

--
-- Name: dna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dna_chromosome AS
 SELECT feature.feature_id AS dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'DNA_chromosome'::text));


ALTER TABLE so.dna_chromosome OWNER TO kmr44;

--
-- Name: dna_constraint_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dna_constraint_sequence AS
 SELECT feature.feature_id AS dna_constraint_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNA_constraint_sequence'::text);


ALTER TABLE so.dna_constraint_sequence OWNER TO kmr44;

--
-- Name: dna_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dna_motif AS
 SELECT feature.feature_id AS dna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text) OR ((cvterm.name)::text = 'minus_10_signal'::text) OR ((cvterm.name)::text = 'minus_35_signal'::text) OR ((cvterm.name)::text = 'DRE_motif'::text) OR ((cvterm.name)::text = 'E_box_motif'::text) OR ((cvterm.name)::text = 'INR1_motif'::text) OR ((cvterm.name)::text = 'GAGA_motif'::text) OR ((cvterm.name)::text = 'octamer_motif'::text) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text) OR ((cvterm.name)::text = 'promoter_element'::text) OR ((cvterm.name)::text = 'DCE_SI'::text) OR ((cvterm.name)::text = 'DCE_SII'::text) OR ((cvterm.name)::text = 'DCE_SIII'::text) OR ((cvterm.name)::text = 'minus_12_signal'::text) OR ((cvterm.name)::text = 'minus_24_signal'::text) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text) OR ((cvterm.name)::text = 'DMv5_motif'::text) OR ((cvterm.name)::text = 'DMv3_motif'::text) OR ((cvterm.name)::text = 'DMv2_motif'::text) OR ((cvterm.name)::text = 'DPE1_motif'::text) OR ((cvterm.name)::text = 'DMv1_motif'::text) OR ((cvterm.name)::text = 'NDM2_motif'::text) OR ((cvterm.name)::text = 'NDM3_motif'::text) OR ((cvterm.name)::text = 'core_promoter_element'::text) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text) OR ((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text) OR ((cvterm.name)::text = 'BREu_motif'::text) OR ((cvterm.name)::text = 'TATA_box'::text) OR ((cvterm.name)::text = 'A_box'::text) OR ((cvterm.name)::text = 'B_box'::text) OR ((cvterm.name)::text = 'C_box'::text) OR ((cvterm.name)::text = 'MTE'::text) OR ((cvterm.name)::text = 'BREd_motif'::text) OR ((cvterm.name)::text = 'DCE'::text) OR ((cvterm.name)::text = 'intermediate_element'::text) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text) OR ((cvterm.name)::text = 'DNA_motif'::text));


ALTER TABLE so.dna_motif OWNER TO kmr44;

--
-- Name: dna_sequence_secondary_structure; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dna_sequence_secondary_structure AS
 SELECT feature.feature_id AS dna_sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'i_motif'::text) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text));


ALTER TABLE so.dna_sequence_secondary_structure OWNER TO kmr44;

--
-- Name: dna_transposon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dna_transposon AS
 SELECT feature.feature_id AS dna_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text) OR ((cvterm.name)::text = 'conjugative_transposon'::text) OR ((cvterm.name)::text = 'helitron'::text) OR ((cvterm.name)::text = 'p_element'::text) OR ((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text) OR ((cvterm.name)::text = 'polinton'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text));


ALTER TABLE so.dna_transposon OWNER TO kmr44;

--
-- Name: dnasei_hypersensitive_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dnasei_hypersensitive_site AS
 SELECT feature.feature_id AS dnasei_hypersensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text);


ALTER TABLE so.dnasei_hypersensitive_site OWNER TO kmr44;

--
-- Name: dnazyme; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dnazyme AS
 SELECT feature.feature_id AS dnazyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNAzyme'::text);


ALTER TABLE so.dnazyme OWNER TO kmr44;

--
-- Name: double; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.double AS
 SELECT feature.feature_id AS double_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'double'::text);


ALTER TABLE so.double OWNER TO kmr44;

--
-- Name: double_stranded_cdna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.double_stranded_cdna AS
 SELECT feature.feature_id AS double_stranded_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'double_stranded_cDNA'::text);


ALTER TABLE so.double_stranded_cdna OWNER TO kmr44;

--
-- Name: double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.double_stranded_dna_chromosome AS
 SELECT feature.feature_id AS double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text));


ALTER TABLE so.double_stranded_dna_chromosome OWNER TO kmr44;

--
-- Name: double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.double_stranded_rna_chromosome AS
 SELECT feature.feature_id AS double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text));


ALTER TABLE so.double_stranded_rna_chromosome OWNER TO kmr44;

--
-- Name: downstream_gene_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.downstream_gene_variant AS
 SELECT feature.feature_id AS downstream_gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '5KB_downstream_variant'::text) OR ((cvterm.name)::text = '500B_downstream_variant'::text) OR ((cvterm.name)::text = 'downstream_gene_variant'::text));


ALTER TABLE so.downstream_gene_variant OWNER TO kmr44;

--
-- Name: dpe1_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dpe1_motif AS
 SELECT feature.feature_id AS dpe1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DPE1_motif'::text);


ALTER TABLE so.dpe1_motif OWNER TO kmr44;

--
-- Name: dpe_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dpe_motif AS
 SELECT feature.feature_id AS dpe_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DPE_motif'::text);


ALTER TABLE so.dpe_motif OWNER TO kmr44;

--
-- Name: dre_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dre_motif AS
 SELECT feature.feature_id AS dre_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DRE_motif'::text);


ALTER TABLE so.dre_motif OWNER TO kmr44;

--
-- Name: ds_dna_viral_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ds_dna_viral_sequence AS
 SELECT feature.feature_id AS ds_dna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text);


ALTER TABLE so.ds_dna_viral_sequence OWNER TO kmr44;

--
-- Name: ds_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ds_oligo AS
 SELECT feature.feature_id AS ds_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text) OR ((cvterm.name)::text = 'ds_oligo'::text));


ALTER TABLE so.ds_oligo OWNER TO kmr44;

--
-- Name: ds_rna_viral_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ds_rna_viral_sequence AS
 SELECT feature.feature_id AS ds_rna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text);


ALTER TABLE so.ds_rna_viral_sequence OWNER TO kmr44;

--
-- Name: dsra_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dsra_rna AS
 SELECT feature.feature_id AS dsra_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text));


ALTER TABLE so.dsra_rna OWNER TO kmr44;

--
-- Name: duplicated_pseudogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.duplicated_pseudogene AS
 SELECT feature.feature_id AS duplicated_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'duplicated_pseudogene'::text);


ALTER TABLE so.duplicated_pseudogene OWNER TO kmr44;

--
-- Name: duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.duplication AS
 SELECT feature.feature_id AS duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text) OR ((cvterm.name)::text = 'duplication'::text));


ALTER TABLE so.duplication OWNER TO kmr44;

--
-- Name: duplication_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.duplication_attribute AS
 SELECT feature.feature_id AS duplication_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'free'::text) OR ((cvterm.name)::text = 'duplication_attribute'::text));


ALTER TABLE so.duplication_attribute OWNER TO kmr44;

--
-- Name: dye_terminator_read; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.dye_terminator_read AS
 SELECT feature.feature_id AS dye_terminator_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dye_terminator_read'::text);


ALTER TABLE so.dye_terminator_read OWNER TO kmr44;

--
-- Name: e_box_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.e_box_motif AS
 SELECT feature.feature_id AS e_box_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'E_box_motif'::text);


ALTER TABLE so.e_box_motif OWNER TO kmr44;

--
-- Name: edited; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.edited AS
 SELECT feature.feature_id AS edited_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited'::text);


ALTER TABLE so.edited OWNER TO kmr44;

--
-- Name: edited_cds; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.edited_cds AS
 SELECT feature.feature_id AS edited_cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_CDS'::text);


ALTER TABLE so.edited_cds OWNER TO kmr44;

--
-- Name: edited_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.edited_mrna AS
 SELECT feature.feature_id AS edited_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_mRNA'::text);


ALTER TABLE so.edited_mrna OWNER TO kmr44;

--
-- Name: edited_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.edited_transcript AS
 SELECT feature.feature_id AS edited_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'edited_transcript'::text));


ALTER TABLE so.edited_transcript OWNER TO kmr44;

--
-- Name: edited_transcript_by_a_to_i_substitution; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.edited_transcript_by_a_to_i_substitution AS
 SELECT feature.feature_id AS edited_transcript_by_a_to_i_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text);


ALTER TABLE so.edited_transcript_by_a_to_i_substitution OWNER TO kmr44;

--
-- Name: edited_transcript_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.edited_transcript_feature AS
 SELECT feature.feature_id AS edited_transcript_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pre_edited_region'::text) OR ((cvterm.name)::text = 'editing_block'::text) OR ((cvterm.name)::text = 'editing_domain'::text) OR ((cvterm.name)::text = 'unedited_region'::text) OR ((cvterm.name)::text = 'edited_transcript_feature'::text));


ALTER TABLE so.edited_transcript_feature OWNER TO kmr44;

--
-- Name: editing_block; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.editing_block AS
 SELECT feature.feature_id AS editing_block_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_block'::text);


ALTER TABLE so.editing_block OWNER TO kmr44;

--
-- Name: editing_domain; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.editing_domain AS
 SELECT feature.feature_id AS editing_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_domain'::text);


ALTER TABLE so.editing_domain OWNER TO kmr44;

--
-- Name: editing_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.editing_variant AS
 SELECT feature.feature_id AS editing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_variant'::text);


ALTER TABLE so.editing_variant OWNER TO kmr44;

--
-- Name: elongated_in_frame_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.elongated_in_frame_polypeptide_c_terminal AS
 SELECT feature.feature_id AS elongated_in_frame_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text);


ALTER TABLE so.elongated_in_frame_polypeptide_c_terminal OWNER TO kmr44;

--
-- Name: elongated_in_frame_polypeptide_n_terminal_elongation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.elongated_in_frame_polypeptide_n_terminal_elongation AS
 SELECT feature.feature_id AS elongated_in_frame_polypeptide_n_terminal_elongation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text);


ALTER TABLE so.elongated_in_frame_polypeptide_n_terminal_elongation OWNER TO kmr44;

--
-- Name: elongated_out_of_frame_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.elongated_out_of_frame_polypeptide_c_terminal AS
 SELECT feature.feature_id AS elongated_out_of_frame_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text);


ALTER TABLE so.elongated_out_of_frame_polypeptide_c_terminal OWNER TO kmr44;

--
-- Name: elongated_out_of_frame_polypeptide_n_terminal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.elongated_out_of_frame_polypeptide_n_terminal AS
 SELECT feature.feature_id AS elongated_out_of_frame_polypeptide_n_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text);


ALTER TABLE so.elongated_out_of_frame_polypeptide_n_terminal OWNER TO kmr44;

--
-- Name: elongated_polypeptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.elongated_polypeptide AS
 SELECT feature.feature_id AS elongated_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide'::text));


ALTER TABLE so.elongated_polypeptide OWNER TO kmr44;

--
-- Name: elongated_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.elongated_polypeptide_c_terminal AS
 SELECT feature.feature_id AS elongated_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text));


ALTER TABLE so.elongated_polypeptide_c_terminal OWNER TO kmr44;

--
-- Name: elongated_polypeptide_n_terminal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.elongated_polypeptide_n_terminal AS
 SELECT feature.feature_id AS elongated_polypeptide_n_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text));


ALTER TABLE so.elongated_polypeptide_n_terminal OWNER TO kmr44;

--
-- Name: encodes_1_polypeptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_1_polypeptide AS
 SELECT feature.feature_id AS encodes_1_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_1_polypeptide'::text);


ALTER TABLE so.encodes_1_polypeptide OWNER TO kmr44;

--
-- Name: encodes_alternate_transcription_start_sites; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_alternate_transcription_start_sites AS
 SELECT feature.feature_id AS encodes_alternate_transcription_start_sites_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text);


ALTER TABLE so.encodes_alternate_transcription_start_sites OWNER TO kmr44;

--
-- Name: encodes_alternately_spliced_transcripts; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_alternately_spliced_transcripts AS
 SELECT feature.feature_id AS encodes_alternately_spliced_transcripts_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'encodes_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text));


ALTER TABLE so.encodes_alternately_spliced_transcripts OWNER TO kmr44;

--
-- Name: encodes_different_polypeptides_different_stop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_different_polypeptides_different_stop AS
 SELECT feature.feature_id AS encodes_different_polypeptides_different_stop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text);


ALTER TABLE so.encodes_different_polypeptides_different_stop OWNER TO kmr44;

--
-- Name: encodes_disjoint_polypeptides; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_disjoint_polypeptides AS
 SELECT feature.feature_id AS encodes_disjoint_polypeptides_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text);


ALTER TABLE so.encodes_disjoint_polypeptides OWNER TO kmr44;

--
-- Name: encodes_greater_than_1_polypeptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_greater_than_1_polypeptide AS
 SELECT feature.feature_id AS encodes_greater_than_1_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text));


ALTER TABLE so.encodes_greater_than_1_polypeptide OWNER TO kmr44;

--
-- Name: encodes_overlapping_peptides; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_overlapping_peptides AS
 SELECT feature.feature_id AS encodes_overlapping_peptides_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text));


ALTER TABLE so.encodes_overlapping_peptides OWNER TO kmr44;

--
-- Name: encodes_overlapping_peptides_different_start; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_overlapping_peptides_different_start AS
 SELECT feature.feature_id AS encodes_overlapping_peptides_different_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text);


ALTER TABLE so.encodes_overlapping_peptides_different_start OWNER TO kmr44;

--
-- Name: encodes_overlapping_polypeptides_different_start_and_stop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.encodes_overlapping_polypeptides_different_start_and_stop AS
 SELECT feature.feature_id AS encodes_overlapping_polypeptides_different_start_and_stop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text);


ALTER TABLE so.encodes_overlapping_polypeptides_different_start_and_stop OWNER TO kmr44;

--
-- Name: endogenous_retroviral_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.endogenous_retroviral_gene AS
 SELECT feature.feature_id AS endogenous_retroviral_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endogenous_retroviral_gene'::text);


ALTER TABLE so.endogenous_retroviral_gene OWNER TO kmr44;

--
-- Name: endogenous_retroviral_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.endogenous_retroviral_sequence AS
 SELECT feature.feature_id AS endogenous_retroviral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text);


ALTER TABLE so.endogenous_retroviral_sequence OWNER TO kmr44;

--
-- Name: endonuclease_spliced_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.endonuclease_spliced_intron AS
 SELECT feature.feature_id AS endonuclease_spliced_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text));


ALTER TABLE so.endonuclease_spliced_intron OWNER TO kmr44;

--
-- Name: endosomal_localization_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.endosomal_localization_signal AS
 SELECT feature.feature_id AS endosomal_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endosomal_localization_signal'::text);


ALTER TABLE so.endosomal_localization_signal OWNER TO kmr44;

--
-- Name: engineered; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered AS
 SELECT feature.feature_id AS engineered_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered'::text);


ALTER TABLE so.engineered OWNER TO kmr44;

--
-- Name: engineered_episome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_episome AS
 SELECT feature.feature_id AS engineered_episome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_episome'::text);


ALTER TABLE so.engineered_episome OWNER TO kmr44;

--
-- Name: engineered_foreign_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_foreign_gene AS
 SELECT feature.feature_id AS engineered_foreign_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text));


ALTER TABLE so.engineered_foreign_gene OWNER TO kmr44;

--
-- Name: engineered_foreign_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_foreign_region AS
 SELECT feature.feature_id AS engineered_foreign_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_region'::text));


ALTER TABLE so.engineered_foreign_region OWNER TO kmr44;

--
-- Name: engineered_foreign_repetitive_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_foreign_repetitive_element AS
 SELECT feature.feature_id AS engineered_foreign_repetitive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text);


ALTER TABLE so.engineered_foreign_repetitive_element OWNER TO kmr44;

--
-- Name: engineered_foreign_transposable_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_foreign_transposable_element AS
 SELECT feature.feature_id AS engineered_foreign_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text);


ALTER TABLE so.engineered_foreign_transposable_element OWNER TO kmr44;

--
-- Name: engineered_foreign_transposable_element_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_foreign_transposable_element_gene AS
 SELECT feature.feature_id AS engineered_foreign_transposable_element_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text);


ALTER TABLE so.engineered_foreign_transposable_element_gene OWNER TO kmr44;

--
-- Name: engineered_fusion_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_fusion_gene AS
 SELECT feature.feature_id AS engineered_fusion_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_fusion_gene'::text);


ALTER TABLE so.engineered_fusion_gene OWNER TO kmr44;

--
-- Name: engineered_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_gene AS
 SELECT feature.feature_id AS engineered_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_gene'::text));


ALTER TABLE so.engineered_gene OWNER TO kmr44;

--
-- Name: engineered_insert; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_insert AS
 SELECT feature.feature_id AS engineered_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_insert'::text);


ALTER TABLE so.engineered_insert OWNER TO kmr44;

--
-- Name: engineered_plasmid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_plasmid AS
 SELECT feature.feature_id AS engineered_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text));


ALTER TABLE so.engineered_plasmid OWNER TO kmr44;

--
-- Name: engineered_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_region AS
 SELECT feature.feature_id AS engineered_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_region'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_region'::text));


ALTER TABLE so.engineered_region OWNER TO kmr44;

--
-- Name: engineered_rescue_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_rescue_region AS
 SELECT feature.feature_id AS engineered_rescue_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_rescue_region'::text);


ALTER TABLE so.engineered_rescue_region OWNER TO kmr44;

--
-- Name: engineered_tag; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_tag AS
 SELECT feature.feature_id AS engineered_tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_tag'::text);


ALTER TABLE so.engineered_tag OWNER TO kmr44;

--
-- Name: engineered_transposable_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.engineered_transposable_element AS
 SELECT feature.feature_id AS engineered_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text));


ALTER TABLE so.engineered_transposable_element OWNER TO kmr44;

--
-- Name: enhancer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.enhancer AS
 SELECT feature.feature_id AS enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'enhancer'::text));


ALTER TABLE so.enhancer OWNER TO kmr44;

--
-- Name: enhancer_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.enhancer_binding_site AS
 SELECT feature.feature_id AS enhancer_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_binding_site'::text);


ALTER TABLE so.enhancer_binding_site OWNER TO kmr44;

--
-- Name: enhancer_bound_by_factor; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.enhancer_bound_by_factor AS
 SELECT feature.feature_id AS enhancer_bound_by_factor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_bound_by_factor'::text);


ALTER TABLE so.enhancer_bound_by_factor OWNER TO kmr44;

--
-- Name: enhancer_trap_construct; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.enhancer_trap_construct AS
 SELECT feature.feature_id AS enhancer_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_trap_construct'::text);


ALTER TABLE so.enhancer_trap_construct OWNER TO kmr44;

--
-- Name: enzymatic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.enzymatic AS
 SELECT feature.feature_id AS enzymatic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'ribozymic'::text) OR ((cvterm.name)::text = 'enzymatic'::text));


ALTER TABLE so.enzymatic OWNER TO kmr44;

--
-- Name: enzymatic_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.enzymatic_rna AS
 SELECT feature.feature_id AS enzymatic_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text));


ALTER TABLE so.enzymatic_rna OWNER TO kmr44;

--
-- Name: epigenetically_modified; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.epigenetically_modified AS
 SELECT feature.feature_id AS epigenetically_modified_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'allelically_excluded'::text) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'epigenetically_modified'::text));


ALTER TABLE so.epigenetically_modified OWNER TO kmr44;

--
-- Name: epigenetically_modified_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.epigenetically_modified_gene AS
 SELECT feature.feature_id AS epigenetically_modified_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text));


ALTER TABLE so.epigenetically_modified_gene OWNER TO kmr44;

--
-- Name: epigenetically_modified_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.epigenetically_modified_region AS
 SELECT feature.feature_id AS epigenetically_modified_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'modified_base'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'methylated_base_feature'::text) OR ((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text));


ALTER TABLE so.epigenetically_modified_region OWNER TO kmr44;

--
-- Name: episome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.episome AS
 SELECT feature.feature_id AS episome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'episome'::text));


ALTER TABLE so.episome OWNER TO kmr44;

--
-- Name: epitope; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.epitope AS
 SELECT feature.feature_id AS epitope_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'epitope'::text);


ALTER TABLE so.epitope OWNER TO kmr44;

--
-- Name: epoxyqueuosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.epoxyqueuosine AS
 SELECT feature.feature_id AS epoxyqueuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'epoxyqueuosine'::text);


ALTER TABLE so.epoxyqueuosine OWNER TO kmr44;

--
-- Name: est; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.est AS
 SELECT feature.feature_id AS est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text) OR ((cvterm.name)::text = 'UST'::text) OR ((cvterm.name)::text = 'RST'::text) OR ((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text) OR ((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text) OR ((cvterm.name)::text = 'EST'::text));


ALTER TABLE so.est OWNER TO kmr44;

--
-- Name: est_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.est_match AS
 SELECT feature.feature_id AS est_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'EST_match'::text);


ALTER TABLE so.est_match OWNER TO kmr44;

--
-- Name: eukaryotic_terminator; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.eukaryotic_terminator AS
 SELECT feature.feature_id AS eukaryotic_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text));


ALTER TABLE so.eukaryotic_terminator OWNER TO kmr44;

--
-- Name: exemplar; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exemplar AS
 SELECT feature.feature_id AS exemplar_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exemplar'::text);


ALTER TABLE so.exemplar OWNER TO kmr44;

--
-- Name: exemplar_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exemplar_mrna AS
 SELECT feature.feature_id AS exemplar_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exemplar_mRNA'::text);


ALTER TABLE so.exemplar_mrna OWNER TO kmr44;

--
-- Name: exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exon AS
 SELECT feature.feature_id AS exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'coding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text) OR ((cvterm.name)::text = 'interior_exon'::text) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text) OR ((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'exon'::text));


ALTER TABLE so.exon OWNER TO kmr44;

--
-- Name: exon_junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exon_junction AS
 SELECT feature.feature_id AS exon_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_junction'::text);


ALTER TABLE so.exon_junction OWNER TO kmr44;

--
-- Name: exon_loss; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exon_loss AS
 SELECT feature.feature_id AS exon_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_loss'::text);


ALTER TABLE so.exon_loss OWNER TO kmr44;

--
-- Name: exon_of_single_exon_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exon_of_single_exon_gene AS
 SELECT feature.feature_id AS exon_of_single_exon_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_of_single_exon_gene'::text);


ALTER TABLE so.exon_of_single_exon_gene OWNER TO kmr44;

--
-- Name: exon_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exon_region AS
 SELECT feature.feature_id AS exon_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'noncoding_region_of_exon'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'exon_region'::text));


ALTER TABLE so.exon_region OWNER TO kmr44;

--
-- Name: exon_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exon_variant AS
 SELECT feature.feature_id AS exon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'coding_sequence_variant'::text) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text) OR ((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text) OR ((cvterm.name)::text = 'inframe_variant'::text) OR ((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text) OR ((cvterm.name)::text = 'synonymous_codon'::text) OR ((cvterm.name)::text = 'terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text) OR ((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text) OR ((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text) OR ((cvterm.name)::text = 'exon_variant'::text));


ALTER TABLE so.exon_variant OWNER TO kmr44;

--
-- Name: exonic_splice_enhancer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.exonic_splice_enhancer AS
 SELECT feature.feature_id AS exonic_splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exonic_splice_enhancer'::text);


ALTER TABLE so.exonic_splice_enhancer OWNER TO kmr44;

--
-- Name: experimental_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.experimental_feature AS
 SELECT feature.feature_id AS experimental_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'match_part'::text) OR ((cvterm.name)::text = 'assembly_component'::text) OR ((cvterm.name)::text = 'conserved_region'::text) OR ((cvterm.name)::text = 'match'::text) OR ((cvterm.name)::text = 'remark'::text) OR ((cvterm.name)::text = 'reading_frame'::text) OR ((cvterm.name)::text = 'consensus_region'::text) OR ((cvterm.name)::text = 'low_complexity_region'::text) OR ((cvterm.name)::text = 'assembly'::text) OR ((cvterm.name)::text = 'transcribed_fragment'::text) OR ((cvterm.name)::text = 'transcribed_cluster'::text) OR ((cvterm.name)::text = 'high_identity_region'::text) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text) OR ((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'read'::text) OR ((cvterm.name)::text = 'restriction_fragment'::text) OR ((cvterm.name)::text = 'golden_path_fragment'::text) OR ((cvterm.name)::text = 'tiling_path_fragment'::text) OR ((cvterm.name)::text = 'gap'::text) OR ((cvterm.name)::text = 'sonicate_fragment'::text) OR ((cvterm.name)::text = 'paired_end_fragment'::text) OR ((cvterm.name)::text = 'read_pair'::text) OR ((cvterm.name)::text = 'contig_read'::text) OR ((cvterm.name)::text = 'BAC_end'::text) OR ((cvterm.name)::text = 'dye_terminator_read'::text) OR ((cvterm.name)::text = 'pyrosequenced_read'::text) OR ((cvterm.name)::text = 'ligation_based_read'::text) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text) OR ((cvterm.name)::text = 'PAC_end'::text) OR ((cvterm.name)::text = 'YAC_end'::text) OR ((cvterm.name)::text = 'clone_end'::text) OR ((cvterm.name)::text = 'RFLP_fragment'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'coding_conserved_region'::text) OR ((cvterm.name)::text = 'nc_conserved_region'::text) OR ((cvterm.name)::text = 'RR_tract'::text) OR ((cvterm.name)::text = 'homologous_region'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text) OR ((cvterm.name)::text = 'X_element'::text) OR ((cvterm.name)::text = 'U_box'::text) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text) OR ((cvterm.name)::text = 'syntenic_region'::text) OR ((cvterm.name)::text = 'paralogous_region'::text) OR ((cvterm.name)::text = 'orthologous_region'::text) OR ((cvterm.name)::text = 'nucleotide_match'::text) OR ((cvterm.name)::text = 'protein_match'::text) OR ((cvterm.name)::text = 'expressed_sequence_match'::text) OR ((cvterm.name)::text = 'cross_genome_match'::text) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text) OR ((cvterm.name)::text = 'primer_match'::text) OR ((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text) OR ((cvterm.name)::text = 'UST_match'::text) OR ((cvterm.name)::text = 'RST_match'::text) OR ((cvterm.name)::text = 'sequence_difference'::text) OR ((cvterm.name)::text = 'experimental_result_region'::text) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text) OR ((cvterm.name)::text = 'possible_base_call_error'::text) OR ((cvterm.name)::text = 'possible_assembly_error'::text) OR ((cvterm.name)::text = 'assembly_error_correction'::text) OR ((cvterm.name)::text = 'base_call_error_correction'::text) OR ((cvterm.name)::text = 'overlapping_feature_set'::text) OR ((cvterm.name)::text = 'no_output'::text) OR ((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'non_adjacent_residues'::text) OR ((cvterm.name)::text = 'non_terminal_residue'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text) OR ((cvterm.name)::text = 'sequence_uncertainty'::text) OR ((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'ORF'::text) OR ((cvterm.name)::text = 'blocked_reading_frame'::text) OR ((cvterm.name)::text = 'mini_gene'::text) OR ((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'sequence_assembly'::text) OR ((cvterm.name)::text = 'fragment_assembly'::text) OR ((cvterm.name)::text = 'supercontig'::text) OR ((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'tiling_path'::text) OR ((cvterm.name)::text = 'virtual_sequence'::text) OR ((cvterm.name)::text = 'golden_path'::text) OR ((cvterm.name)::text = 'ultracontig'::text) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text) OR ((cvterm.name)::text = 'fingerprint_map'::text) OR ((cvterm.name)::text = 'STS_map'::text) OR ((cvterm.name)::text = 'RH_map'::text) OR ((cvterm.name)::text = 'unigene_cluster'::text) OR ((cvterm.name)::text = 'CHiP_seq_region'::text) OR ((cvterm.name)::text = 'experimental_feature'::text));


ALTER TABLE so.experimental_feature OWNER TO kmr44;

--
-- Name: experimental_feature_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.experimental_feature_attribute AS
 SELECT feature.feature_id AS experimental_feature_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'score'::text) OR ((cvterm.name)::text = 'quality_value'::text) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text));


ALTER TABLE so.experimental_feature_attribute OWNER TO kmr44;

--
-- Name: experimental_result_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.experimental_result_region AS
 SELECT feature.feature_id AS experimental_result_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'overlapping_feature_set'::text) OR ((cvterm.name)::text = 'no_output'::text) OR ((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'experimental_result_region'::text));


ALTER TABLE so.experimental_result_region OWNER TO kmr44;

--
-- Name: experimentally_defined_binding_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.experimentally_defined_binding_region AS
 SELECT feature.feature_id AS experimentally_defined_binding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'CHiP_seq_region'::text) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text));


ALTER TABLE so.experimentally_defined_binding_region OWNER TO kmr44;

--
-- Name: experimentally_determined; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.experimentally_determined AS
 SELECT feature.feature_id AS experimentally_determined_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'experimentally_determined'::text);


ALTER TABLE so.experimentally_determined OWNER TO kmr44;

--
-- Name: expressed_sequence_assembly; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.expressed_sequence_assembly AS
 SELECT feature.feature_id AS expressed_sequence_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'expressed_sequence_assembly'::text);


ALTER TABLE so.expressed_sequence_assembly OWNER TO kmr44;

--
-- Name: expressed_sequence_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.expressed_sequence_match AS
 SELECT feature.feature_id AS expressed_sequence_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text) OR ((cvterm.name)::text = 'UST_match'::text) OR ((cvterm.name)::text = 'RST_match'::text) OR ((cvterm.name)::text = 'expressed_sequence_match'::text));


ALTER TABLE so.expressed_sequence_match OWNER TO kmr44;

--
-- Name: external_transcribed_spacer_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.external_transcribed_spacer_region AS
 SELECT feature.feature_id AS external_transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'external_transcribed_spacer_region'::text);


ALTER TABLE so.external_transcribed_spacer_region OWNER TO kmr44;

--
-- Name: extrachromosomal_mobile_genetic_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.extrachromosomal_mobile_genetic_element AS
 SELECT feature.feature_id AS extrachromosomal_mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text));


ALTER TABLE so.extrachromosomal_mobile_genetic_element OWNER TO kmr44;

--
-- Name: extramembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.extramembrane_polypeptide_region AS
 SELECT feature.feature_id AS extramembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text));


ALTER TABLE so.extramembrane_polypeptide_region OWNER TO kmr44;

--
-- Name: feature_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.feature_attribute AS
 SELECT feature.feature_id AS feature_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transcript_attribute'::text) OR ((cvterm.name)::text = 'bound_by_factor'::text) OR ((cvterm.name)::text = 'flanked'::text) OR ((cvterm.name)::text = 'gene_attribute'::text) OR ((cvterm.name)::text = 'retrotransposed'::text) OR ((cvterm.name)::text = 'transgenic'::text) OR ((cvterm.name)::text = 'natural'::text) OR ((cvterm.name)::text = 'engineered'::text) OR ((cvterm.name)::text = 'foreign'::text) OR ((cvterm.name)::text = 'fusion'::text) OR ((cvterm.name)::text = 'rescue'::text) OR ((cvterm.name)::text = 'wild_type'::text) OR ((cvterm.name)::text = 'conserved'::text) OR ((cvterm.name)::text = 'status'::text) OR ((cvterm.name)::text = 'intermediate'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged'::text) OR ((cvterm.name)::text = 'cryptic'::text) OR ((cvterm.name)::text = 'strand_attribute'::text) OR ((cvterm.name)::text = 'direction_attribute'::text) OR ((cvterm.name)::text = 'enzymatic'::text) OR ((cvterm.name)::text = 'mobile'::text) OR ((cvterm.name)::text = 'alteration_attribute'::text) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text) OR ((cvterm.name)::text = 'edited'::text) OR ((cvterm.name)::text = 'capped'::text) OR ((cvterm.name)::text = 'mRNA_attribute'::text) OR ((cvterm.name)::text = 'trans_spliced'::text) OR ((cvterm.name)::text = 'alternatively_spliced'::text) OR ((cvterm.name)::text = 'monocistronic'::text) OR ((cvterm.name)::text = 'polycistronic'::text) OR ((cvterm.name)::text = 'polyadenylated'::text) OR ((cvterm.name)::text = 'exemplar'::text) OR ((cvterm.name)::text = 'frameshift'::text) OR ((cvterm.name)::text = 'recoded'::text) OR ((cvterm.name)::text = 'minus_1_frameshift'::text) OR ((cvterm.name)::text = 'minus_2_frameshift'::text) OR ((cvterm.name)::text = 'plus_1_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_framshift'::text) OR ((cvterm.name)::text = 'codon_redefined'::text) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'translationally_frameshifted'::text) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'dicistronic'::text) OR ((cvterm.name)::text = 'bound_by_protein'::text) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text) OR ((cvterm.name)::text = 'floxed'::text) OR ((cvterm.name)::text = 'FRT_flanked'::text) OR ((cvterm.name)::text = 'protein_coding'::text) OR ((cvterm.name)::text = 'non_protein_coding'::text) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text) OR ((cvterm.name)::text = 'gene_array_member'::text) OR ((cvterm.name)::text = 'regulated'::text) OR ((cvterm.name)::text = 'epigenetically_modified'::text) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text) OR ((cvterm.name)::text = 'intein_containing'::text) OR ((cvterm.name)::text = 'miRNA_encoding'::text) OR ((cvterm.name)::text = 'rRNA_encoding'::text) OR ((cvterm.name)::text = 'scRNA_encoding'::text) OR ((cvterm.name)::text = 'snoRNA_encoding'::text) OR ((cvterm.name)::text = 'snRNA_encoding'::text) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text) OR ((cvterm.name)::text = 'stRNA_encoding'::text) OR ((cvterm.name)::text = 'tmRNA_encoding'::text) OR ((cvterm.name)::text = 'tRNA_encoding'::text) OR ((cvterm.name)::text = 'gRNA_encoding'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'overlapping'::text) OR ((cvterm.name)::text = 'inside_intron'::text) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'antisense'::text) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text) OR ((cvterm.name)::text = 'operon_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text) OR ((cvterm.name)::text = 'gene_subarray_member'::text) OR ((cvterm.name)::text = 'member_of_regulon'::text) OR ((cvterm.name)::text = 'cassette_array_member'::text) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated'::text) OR ((cvterm.name)::text = 'translationally_regulated'::text) OR ((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text) OR ((cvterm.name)::text = 'autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text) OR ((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'allelically_excluded'::text) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text) OR ((cvterm.name)::text = 'homologous'::text) OR ((cvterm.name)::text = 'syntenic'::text) OR ((cvterm.name)::text = 'orthologous'::text) OR ((cvterm.name)::text = 'paralogous'::text) OR ((cvterm.name)::text = 'fragmentary'::text) OR ((cvterm.name)::text = 'predicted'::text) OR ((cvterm.name)::text = 'validated'::text) OR ((cvterm.name)::text = 'invalidated'::text) OR ((cvterm.name)::text = 'independently_known'::text) OR ((cvterm.name)::text = 'consensus'::text) OR ((cvterm.name)::text = 'low_complexity'::text) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text) OR ((cvterm.name)::text = 'orphan'::text) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text) OR ((cvterm.name)::text = 'supported_by_domain_match'::text) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text) OR ((cvterm.name)::text = 'experimentally_determined'::text) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text) OR ((cvterm.name)::text = 'standard_draft'::text) OR ((cvterm.name)::text = 'high_quality_draft'::text) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text) OR ((cvterm.name)::text = 'noncontiguous_finished'::text) OR ((cvterm.name)::text = 'finished_genome'::text) OR ((cvterm.name)::text = 'single'::text) OR ((cvterm.name)::text = 'double'::text) OR ((cvterm.name)::text = 'forward'::text) OR ((cvterm.name)::text = 'reverse'::text) OR ((cvterm.name)::text = 'ribozymic'::text) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text) OR ((cvterm.name)::text = 'insertion_attribute'::text) OR ((cvterm.name)::text = 'inversion_attribute'::text) OR ((cvterm.name)::text = 'translocaton_attribute'::text) OR ((cvterm.name)::text = 'duplication_attribute'::text) OR ((cvterm.name)::text = 'intrachromosomal'::text) OR ((cvterm.name)::text = 'interchromosomal'::text) OR ((cvterm.name)::text = 'tandem'::text) OR ((cvterm.name)::text = 'direct'::text) OR ((cvterm.name)::text = 'inverted'::text) OR ((cvterm.name)::text = 'pericentric'::text) OR ((cvterm.name)::text = 'paracentric'::text) OR ((cvterm.name)::text = 'reciprocal'::text) OR ((cvterm.name)::text = 'insertional'::text) OR ((cvterm.name)::text = 'free'::text) OR ((cvterm.name)::text = 'score'::text) OR ((cvterm.name)::text = 'quality_value'::text) OR ((cvterm.name)::text = 'feature_attribute'::text));


ALTER TABLE so.feature_attribute OWNER TO kmr44;

--
-- Name: fingerprint_map; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fingerprint_map AS
 SELECT feature.feature_id AS fingerprint_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fingerprint_map'::text);


ALTER TABLE so.fingerprint_map OWNER TO kmr44;

--
-- Name: finished_genome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.finished_genome AS
 SELECT feature.feature_id AS finished_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'finished_genome'::text);


ALTER TABLE so.finished_genome OWNER TO kmr44;

--
-- Name: five_aminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_aminomethyl_two_thiouridine AS
 SELECT feature.feature_id AS five_aminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text);


ALTER TABLE so.five_aminomethyl_two_thiouridine OWNER TO kmr44;

--
-- Name: five_carbamoylmethyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_carbamoylmethyluridine AS
 SELECT feature.feature_id AS five_carbamoylmethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text);


ALTER TABLE so.five_carbamoylmethyluridine OWNER TO kmr44;

--
-- Name: five_carboxyhydroxymethyl_uridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_carboxyhydroxymethyl_uridine AS
 SELECT feature.feature_id AS five_carboxyhydroxymethyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text);


ALTER TABLE so.five_carboxyhydroxymethyl_uridine OWNER TO kmr44;

--
-- Name: five_carboxyhydroxymethyl_uridine_methyl_ester; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_carboxyhydroxymethyl_uridine_methyl_ester AS
 SELECT feature.feature_id AS five_carboxyhydroxymethyl_uridine_methyl_ester_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text);


ALTER TABLE so.five_carboxyhydroxymethyl_uridine_methyl_ester OWNER TO kmr44;

--
-- Name: five_carboxymethylaminomethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_carboxymethylaminomethyl_two_prime_o_methyluridine AS
 SELECT feature.feature_id AS five_carboxymethylaminomethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text);


ALTER TABLE so.five_carboxymethylaminomethyl_two_prime_o_methyluridine OWNER TO kmr44;

--
-- Name: five_carboxymethylaminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_carboxymethylaminomethyl_two_thiouridine AS
 SELECT feature.feature_id AS five_carboxymethylaminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text);


ALTER TABLE so.five_carboxymethylaminomethyl_two_thiouridine OWNER TO kmr44;

--
-- Name: five_carboxymethylaminomethyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_carboxymethylaminomethyluridine AS
 SELECT feature.feature_id AS five_carboxymethylaminomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text);


ALTER TABLE so.five_carboxymethylaminomethyluridine OWNER TO kmr44;

--
-- Name: five_carboxymethyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_carboxymethyluridine AS
 SELECT feature.feature_id AS five_carboxymethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethyluridine'::text);


ALTER TABLE so.five_carboxymethyluridine OWNER TO kmr44;

--
-- Name: five_cm_2_prime_o_methu; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_cm_2_prime_o_methu AS
 SELECT feature.feature_id AS five_cm_2_prime_o_methu_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text);


ALTER TABLE so.five_cm_2_prime_o_methu OWNER TO kmr44;

--
-- Name: five_formyl_two_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_formyl_two_prime_o_methylcytidine AS
 SELECT feature.feature_id AS five_formyl_two_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text);


ALTER TABLE so.five_formyl_two_prime_o_methylcytidine OWNER TO kmr44;

--
-- Name: five_formylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_formylcytidine AS
 SELECT feature.feature_id AS five_formylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_formylcytidine'::text);


ALTER TABLE so.five_formylcytidine OWNER TO kmr44;

--
-- Name: five_hydroxymethylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_hydroxymethylcytidine AS
 SELECT feature.feature_id AS five_hydroxymethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text);


ALTER TABLE so.five_hydroxymethylcytidine OWNER TO kmr44;

--
-- Name: five_hydroxyuridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_hydroxyuridine AS
 SELECT feature.feature_id AS five_hydroxyuridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_hydroxyuridine'::text);


ALTER TABLE so.five_hydroxyuridine OWNER TO kmr44;

--
-- Name: five_isopentenylaminomethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_isopentenylaminomethyl_two_prime_o_methyluridine AS
 SELECT feature.feature_id AS five_isopentenylaminomethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text);


ALTER TABLE so.five_isopentenylaminomethyl_two_prime_o_methyluridine OWNER TO kmr44;

--
-- Name: five_isopentenylaminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_isopentenylaminomethyl_two_thiouridine AS
 SELECT feature.feature_id AS five_isopentenylaminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text);


ALTER TABLE so.five_isopentenylaminomethyl_two_thiouridine OWNER TO kmr44;

--
-- Name: five_isopentenylaminomethyl_uridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_isopentenylaminomethyl_uridine AS
 SELECT feature.feature_id AS five_isopentenylaminomethyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text);


ALTER TABLE so.five_isopentenylaminomethyl_uridine OWNER TO kmr44;

--
-- Name: five_mam_2_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_mam_2_thiouridine AS
 SELECT feature.feature_id AS five_mam_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text);


ALTER TABLE so.five_mam_2_thiouridine OWNER TO kmr44;

--
-- Name: five_mcm_2_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_mcm_2_thiouridine AS
 SELECT feature.feature_id AS five_mcm_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text);


ALTER TABLE so.five_mcm_2_thiouridine OWNER TO kmr44;

--
-- Name: five_methoxycarbonylmethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methoxycarbonylmethyl_two_prime_o_methyluridine AS
 SELECT feature.feature_id AS five_methoxycarbonylmethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text);


ALTER TABLE so.five_methoxycarbonylmethyl_two_prime_o_methyluridine OWNER TO kmr44;

--
-- Name: five_methoxycarbonylmethyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methoxycarbonylmethyluridine AS
 SELECT feature.feature_id AS five_methoxycarbonylmethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text);


ALTER TABLE so.five_methoxycarbonylmethyluridine OWNER TO kmr44;

--
-- Name: five_methoxyuridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methoxyuridine AS
 SELECT feature.feature_id AS five_methoxyuridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxyuridine'::text);


ALTER TABLE so.five_methoxyuridine OWNER TO kmr44;

--
-- Name: five_methyl_2_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methyl_2_thiouridine AS
 SELECT feature.feature_id AS five_methyl_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text);


ALTER TABLE so.five_methyl_2_thiouridine OWNER TO kmr44;

--
-- Name: five_methylaminomethyl_two_selenouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methylaminomethyl_two_selenouridine AS
 SELECT feature.feature_id AS five_methylaminomethyl_two_selenouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text);


ALTER TABLE so.five_methylaminomethyl_two_selenouridine OWNER TO kmr44;

--
-- Name: five_methylaminomethyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methylaminomethyluridine AS
 SELECT feature.feature_id AS five_methylaminomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyluridine'::text);


ALTER TABLE so.five_methylaminomethyluridine OWNER TO kmr44;

--
-- Name: five_methylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methylcytidine AS
 SELECT feature.feature_id AS five_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylcytidine'::text);


ALTER TABLE so.five_methylcytidine OWNER TO kmr44;

--
-- Name: five_methyldihydrouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methyldihydrouridine AS
 SELECT feature.feature_id AS five_methyldihydrouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyldihydrouridine'::text);


ALTER TABLE so.five_methyldihydrouridine OWNER TO kmr44;

--
-- Name: five_methyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_methyluridine AS
 SELECT feature.feature_id AS five_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyluridine'::text);


ALTER TABLE so.five_methyluridine OWNER TO kmr44;

--
-- Name: five_prime_cis_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_cis_splice_site AS
 SELECT feature.feature_id AS five_prime_cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text));


ALTER TABLE so.five_prime_cis_splice_site OWNER TO kmr44;

--
-- Name: five_prime_clip; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_clip AS
 SELECT feature.feature_id AS five_prime_clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_clip'::text);


ALTER TABLE so.five_prime_clip OWNER TO kmr44;

--
-- Name: five_prime_coding_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_coding_exon AS
 SELECT feature.feature_id AS five_prime_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon'::text);


ALTER TABLE so.five_prime_coding_exon OWNER TO kmr44;

--
-- Name: five_prime_coding_exon_coding_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_coding_exon_coding_region AS
 SELECT feature.feature_id AS five_prime_coding_exon_coding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text);


ALTER TABLE so.five_prime_coding_exon_coding_region OWNER TO kmr44;

--
-- Name: five_prime_coding_exon_noncoding_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_coding_exon_noncoding_region AS
 SELECT feature.feature_id AS five_prime_coding_exon_noncoding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text);


ALTER TABLE so.five_prime_coding_exon_noncoding_region OWNER TO kmr44;

--
-- Name: five_prime_d_heptamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_d_heptamer AS
 SELECT feature.feature_id AS five_prime_d_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_heptamer'::text);


ALTER TABLE so.five_prime_d_heptamer OWNER TO kmr44;

--
-- Name: five_prime_d_nonamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_d_nonamer AS
 SELECT feature.feature_id AS five_prime_d_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_nonamer'::text);


ALTER TABLE so.five_prime_d_nonamer OWNER TO kmr44;

--
-- Name: five_prime_d_recombination_signal_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_d_recombination_signal_sequence AS
 SELECT feature.feature_id AS five_prime_d_recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text);


ALTER TABLE so.five_prime_d_recombination_signal_sequence OWNER TO kmr44;

--
-- Name: five_prime_d_spacer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_d_spacer AS
 SELECT feature.feature_id AS five_prime_d_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_spacer'::text);


ALTER TABLE so.five_prime_d_spacer OWNER TO kmr44;

--
-- Name: five_prime_est; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_est AS
 SELECT feature.feature_id AS five_prime_est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_EST'::text);


ALTER TABLE so.five_prime_est OWNER TO kmr44;

--
-- Name: five_prime_five_prime_overlap; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_five_prime_overlap AS
 SELECT feature.feature_id AS five_prime_five_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text);


ALTER TABLE so.five_prime_five_prime_overlap OWNER TO kmr44;

--
-- Name: five_prime_flanking_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_flanking_region AS
 SELECT feature.feature_id AS five_prime_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_flanking_region'::text);


ALTER TABLE so.five_prime_flanking_region OWNER TO kmr44;

--
-- Name: five_prime_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_intron AS
 SELECT feature.feature_id AS five_prime_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_intron'::text);


ALTER TABLE so.five_prime_intron OWNER TO kmr44;

--
-- Name: five_prime_ltr; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_ltr AS
 SELECT feature.feature_id AS five_prime_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_LTR'::text);


ALTER TABLE so.five_prime_ltr OWNER TO kmr44;

--
-- Name: five_prime_ltr_component; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_ltr_component AS
 SELECT feature.feature_id AS five_prime_ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text));


ALTER TABLE so.five_prime_ltr_component OWNER TO kmr44;

--
-- Name: five_prime_noncoding_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_noncoding_exon AS
 SELECT feature.feature_id AS five_prime_noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_noncoding_exon'::text);


ALTER TABLE so.five_prime_noncoding_exon OWNER TO kmr44;

--
-- Name: five_prime_open_reading_frame; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_open_reading_frame AS
 SELECT feature.feature_id AS five_prime_open_reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_open_reading_frame'::text);


ALTER TABLE so.five_prime_open_reading_frame OWNER TO kmr44;

--
-- Name: five_prime_recoding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_recoding_site AS
 SELECT feature.feature_id AS five_prime_recoding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_recoding_site'::text);


ALTER TABLE so.five_prime_recoding_site OWNER TO kmr44;

--
-- Name: five_prime_restriction_enzyme_junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_restriction_enzyme_junction AS
 SELECT feature.feature_id AS five_prime_restriction_enzyme_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text);


ALTER TABLE so.five_prime_restriction_enzyme_junction OWNER TO kmr44;

--
-- Name: five_prime_rst; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_rst AS
 SELECT feature.feature_id AS five_prime_rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_RST'::text);


ALTER TABLE so.five_prime_rst OWNER TO kmr44;

--
-- Name: five_prime_terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_terminal_inverted_repeat AS
 SELECT feature.feature_id AS five_prime_terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text);


ALTER TABLE so.five_prime_terminal_inverted_repeat OWNER TO kmr44;

--
-- Name: five_prime_three_prime_overlap; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_three_prime_overlap AS
 SELECT feature.feature_id AS five_prime_three_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text);


ALTER TABLE so.five_prime_three_prime_overlap OWNER TO kmr44;

--
-- Name: five_prime_ust; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_ust AS
 SELECT feature.feature_id AS five_prime_ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UST'::text);


ALTER TABLE so.five_prime_ust OWNER TO kmr44;

--
-- Name: five_prime_utr; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_utr AS
 SELECT feature.feature_id AS five_prime_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UTR'::text);


ALTER TABLE so.five_prime_utr OWNER TO kmr44;

--
-- Name: five_prime_utr_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_utr_intron AS
 SELECT feature.feature_id AS five_prime_utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UTR_intron'::text);


ALTER TABLE so.five_prime_utr_intron OWNER TO kmr44;

--
-- Name: five_prime_utr_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_prime_utr_variant AS
 SELECT feature.feature_id AS five_prime_utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '5_prime_UTR_variant'::text);


ALTER TABLE so.five_prime_utr_variant OWNER TO kmr44;

--
-- Name: five_taurinomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_taurinomethyl_two_thiouridine AS
 SELECT feature.feature_id AS five_taurinomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text);


ALTER TABLE so.five_taurinomethyl_two_thiouridine OWNER TO kmr44;

--
-- Name: five_taurinomethyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_taurinomethyluridine AS
 SELECT feature.feature_id AS five_taurinomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_taurinomethyluridine'::text);


ALTER TABLE so.five_taurinomethyluridine OWNER TO kmr44;

--
-- Name: five_two_prime_o_dimethylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_two_prime_o_dimethylcytidine AS
 SELECT feature.feature_id AS five_two_prime_o_dimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text);


ALTER TABLE so.five_two_prime_o_dimethylcytidine OWNER TO kmr44;

--
-- Name: five_two_prime_o_dimethyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.five_two_prime_o_dimethyluridine AS
 SELECT feature.feature_id AS five_two_prime_o_dimethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text);


ALTER TABLE so.five_two_prime_o_dimethyluridine OWNER TO kmr44;

--
-- Name: fivehundred_b_downstream_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fivehundred_b_downstream_variant AS
 SELECT feature.feature_id AS fivehundred_b_downstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '500B_downstream_variant'::text);


ALTER TABLE so.fivehundred_b_downstream_variant OWNER TO kmr44;

--
-- Name: fivekb_downstream_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fivekb_downstream_variant AS
 SELECT feature.feature_id AS fivekb_downstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '500B_downstream_variant'::text) OR ((cvterm.name)::text = '5KB_downstream_variant'::text));


ALTER TABLE so.fivekb_downstream_variant OWNER TO kmr44;

--
-- Name: fivekb_upstream_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fivekb_upstream_variant AS
 SELECT feature.feature_id AS fivekb_upstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '2KB_upstream_variant'::text) OR ((cvterm.name)::text = '5KB_upstream_variant'::text));


ALTER TABLE so.fivekb_upstream_variant OWNER TO kmr44;

--
-- Name: fixed_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fixed_variant AS
 SELECT feature.feature_id AS fixed_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fixed_variant'::text);


ALTER TABLE so.fixed_variant OWNER TO kmr44;

--
-- Name: flanked; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.flanked AS
 SELECT feature.feature_id AS flanked_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'floxed'::text) OR ((cvterm.name)::text = 'FRT_flanked'::text) OR ((cvterm.name)::text = 'flanked'::text));


ALTER TABLE so.flanked OWNER TO kmr44;

--
-- Name: flanking_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.flanking_region AS
 SELECT feature.feature_id AS flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transposable_element_flanking_region'::text) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text) OR ((cvterm.name)::text = 'flanking_region'::text));


ALTER TABLE so.flanking_region OWNER TO kmr44;

--
-- Name: flanking_three_prime_quadruplet_recoding_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.flanking_three_prime_quadruplet_recoding_signal AS
 SELECT feature.feature_id AS flanking_three_prime_quadruplet_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text);


ALTER TABLE so.flanking_three_prime_quadruplet_recoding_signal OWNER TO kmr44;

--
-- Name: floxed; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.floxed AS
 SELECT feature.feature_id AS floxed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'floxed'::text);


ALTER TABLE so.floxed OWNER TO kmr44;

--
-- Name: floxed_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.floxed_gene AS
 SELECT feature.feature_id AS floxed_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'floxed_gene'::text);


ALTER TABLE so.floxed_gene OWNER TO kmr44;

--
-- Name: foldback_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.foldback_element AS
 SELECT feature.feature_id AS foldback_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'foldback_element'::text);


ALTER TABLE so.foldback_element OWNER TO kmr44;

--
-- Name: foreign_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.foreign_gene AS
 SELECT feature.feature_id AS foreign_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'foreign_gene'::text));


ALTER TABLE so.foreign_gene OWNER TO kmr44;

--
-- Name: foreign_transposable_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.foreign_transposable_element AS
 SELECT feature.feature_id AS foreign_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text));


ALTER TABLE so.foreign_transposable_element OWNER TO kmr44;

--
-- Name: forward; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.forward AS
 SELECT feature.feature_id AS forward_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'forward'::text);


ALTER TABLE so.forward OWNER TO kmr44;

--
-- Name: forward_primer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.forward_primer AS
 SELECT feature.feature_id AS forward_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'forward_primer'::text);


ALTER TABLE so.forward_primer OWNER TO kmr44;

--
-- Name: fosmid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fosmid AS
 SELECT feature.feature_id AS fosmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fosmid'::text);


ALTER TABLE so.fosmid OWNER TO kmr44;

--
-- Name: four_bp_start_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.four_bp_start_codon AS
 SELECT feature.feature_id AS four_bp_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_bp_start_codon'::text);


ALTER TABLE so.four_bp_start_codon OWNER TO kmr44;

--
-- Name: four_demethylwyosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.four_demethylwyosine AS
 SELECT feature.feature_id AS four_demethylwyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_demethylwyosine'::text);


ALTER TABLE so.four_demethylwyosine OWNER TO kmr44;

--
-- Name: four_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.four_thiouridine AS
 SELECT feature.feature_id AS four_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_thiouridine'::text);


ALTER TABLE so.four_thiouridine OWNER TO kmr44;

--
-- Name: fragment_assembly; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fragment_assembly AS
 SELECT feature.feature_id AS fragment_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'fingerprint_map'::text) OR ((cvterm.name)::text = 'STS_map'::text) OR ((cvterm.name)::text = 'RH_map'::text) OR ((cvterm.name)::text = 'fragment_assembly'::text));


ALTER TABLE so.fragment_assembly OWNER TO kmr44;

--
-- Name: fragmentary; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fragmentary AS
 SELECT feature.feature_id AS fragmentary_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fragmentary'::text);


ALTER TABLE so.fragmentary OWNER TO kmr44;

--
-- Name: frame_restoring_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.frame_restoring_variant AS
 SELECT feature.feature_id AS frame_restoring_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'frame_restoring_variant'::text);


ALTER TABLE so.frame_restoring_variant OWNER TO kmr44;

--
-- Name: frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.frameshift AS
 SELECT feature.feature_id AS frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'minus_1_frameshift'::text) OR ((cvterm.name)::text = 'minus_2_frameshift'::text) OR ((cvterm.name)::text = 'plus_1_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_framshift'::text) OR ((cvterm.name)::text = 'frameshift'::text));


ALTER TABLE so.frameshift OWNER TO kmr44;

--
-- Name: frameshift_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.frameshift_variant AS
 SELECT feature.feature_id AS frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text));


ALTER TABLE so.frameshift_variant OWNER TO kmr44;

--
-- Name: free; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.free AS
 SELECT feature.feature_id AS free_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free'::text);


ALTER TABLE so.free OWNER TO kmr44;

--
-- Name: free_chromosome_arm; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.free_chromosome_arm AS
 SELECT feature.feature_id AS free_chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free_chromosome_arm'::text);


ALTER TABLE so.free_chromosome_arm OWNER TO kmr44;

--
-- Name: free_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.free_duplication AS
 SELECT feature.feature_id AS free_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text));


ALTER TABLE so.free_duplication OWNER TO kmr44;

--
-- Name: free_ring_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.free_ring_duplication AS
 SELECT feature.feature_id AS free_ring_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free_ring_duplication'::text);


ALTER TABLE so.free_ring_duplication OWNER TO kmr44;

--
-- Name: frt_flanked; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.frt_flanked AS
 SELECT feature.feature_id AS frt_flanked_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'FRT_flanked'::text);


ALTER TABLE so.frt_flanked OWNER TO kmr44;

--
-- Name: frt_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.frt_site AS
 SELECT feature.feature_id AS frt_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'FRT_site'::text);


ALTER TABLE so.frt_site OWNER TO kmr44;

--
-- Name: functional_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.functional_variant AS
 SELECT feature.feature_id AS functional_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transcript_function_variant'::text) OR ((cvterm.name)::text = 'translational_product_function_variant'::text) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text) OR ((cvterm.name)::text = 'transcript_processing_variant'::text) OR ((cvterm.name)::text = 'transcript_stability_variant'::text) OR ((cvterm.name)::text = 'transcription_variant'::text) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'editing_variant'::text) OR ((cvterm.name)::text = 'polyadenylation_variant'::text) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'translational_product_level_variant'::text) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text) OR ((cvterm.name)::text = 'increased_translational_product_level'::text) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'functional_variant'::text));


ALTER TABLE so.functional_variant OWNER TO kmr44;

--
-- Name: fusion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fusion AS
 SELECT feature.feature_id AS fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fusion'::text);


ALTER TABLE so.fusion OWNER TO kmr44;

--
-- Name: fusion_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.fusion_gene AS
 SELECT feature.feature_id AS fusion_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'fusion_gene'::text));


ALTER TABLE so.fusion_gene OWNER TO kmr44;

--
-- Name: g_quartet; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.g_quartet AS
 SELECT feature.feature_id AS g_quartet_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_quartet'::text);


ALTER TABLE so.g_quartet OWNER TO kmr44;

--
-- Name: g_to_a_transition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.g_to_a_transition AS
 SELECT feature.feature_id AS g_to_a_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_A_transition'::text);


ALTER TABLE so.g_to_a_transition OWNER TO kmr44;

--
-- Name: g_to_c_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.g_to_c_transversion AS
 SELECT feature.feature_id AS g_to_c_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_C_transversion'::text);


ALTER TABLE so.g_to_c_transversion OWNER TO kmr44;

--
-- Name: g_to_t_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.g_to_t_transversion AS
 SELECT feature.feature_id AS g_to_t_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_T_transversion'::text);


ALTER TABLE so.g_to_t_transversion OWNER TO kmr44;

--
-- Name: gaga_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gaga_motif AS
 SELECT feature.feature_id AS gaga_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GAGA_motif'::text);


ALTER TABLE so.gaga_motif OWNER TO kmr44;

--
-- Name: galactosyl_queuosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.galactosyl_queuosine AS
 SELECT feature.feature_id AS galactosyl_queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'galactosyl_queuosine'::text);


ALTER TABLE so.galactosyl_queuosine OWNER TO kmr44;

--
-- Name: gamma_turn; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gamma_turn AS
 SELECT feature.feature_id AS gamma_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text) OR ((cvterm.name)::text = 'gamma_turn'::text));


ALTER TABLE so.gamma_turn OWNER TO kmr44;

--
-- Name: gamma_turn_classic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gamma_turn_classic AS
 SELECT feature.feature_id AS gamma_turn_classic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gamma_turn_classic'::text);


ALTER TABLE so.gamma_turn_classic OWNER TO kmr44;

--
-- Name: gamma_turn_inverse; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gamma_turn_inverse AS
 SELECT feature.feature_id AS gamma_turn_inverse_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gamma_turn_inverse'::text);


ALTER TABLE so.gamma_turn_inverse OWNER TO kmr44;

--
-- Name: gap; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gap AS
 SELECT feature.feature_id AS gap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gap'::text);


ALTER TABLE so.gap OWNER TO kmr44;

--
-- Name: gc_rich_promoter_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gc_rich_promoter_region AS
 SELECT feature.feature_id AS gc_rich_promoter_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GC_rich_promoter_region'::text);


ALTER TABLE so.gc_rich_promoter_region OWNER TO kmr44;

--
-- Name: gcvb_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gcvb_rna AS
 SELECT feature.feature_id AS gcvb_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GcvB_RNA'::text);


ALTER TABLE so.gcvb_rna OWNER TO kmr44;

--
-- Name: gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene AS
 SELECT feature.feature_id AS gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nuclear_gene'::text) OR ((cvterm.name)::text = 'mt_gene'::text) OR ((cvterm.name)::text = 'plastid_gene'::text) OR ((cvterm.name)::text = 'nucleomorph_gene'::text) OR ((cvterm.name)::text = 'plasmid_gene'::text) OR ((cvterm.name)::text = 'proviral_gene'::text) OR ((cvterm.name)::text = 'transposable_element_gene'::text) OR ((cvterm.name)::text = 'silenced_gene'::text) OR ((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'foreign_gene'::text) OR ((cvterm.name)::text = 'fusion_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text) OR ((cvterm.name)::text = 'rescue_gene'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text) OR ((cvterm.name)::text = 'transgene'::text) OR ((cvterm.name)::text = 'predicted_gene'::text) OR ((cvterm.name)::text = 'protein_coding_gene'::text) OR ((cvterm.name)::text = 'retrogene'::text) OR ((cvterm.name)::text = 'ncRNA_gene'::text) OR ((cvterm.name)::text = 'cryptic_gene'::text) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'gene_cassette'::text) OR ((cvterm.name)::text = 'kinetoplast_gene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'apicoplast_gene'::text) OR ((cvterm.name)::text = 'ct_gene'::text) OR ((cvterm.name)::text = 'chromoplast_gene'::text) OR ((cvterm.name)::text = 'cyanelle_gene'::text) OR ((cvterm.name)::text = 'leucoplast_gene'::text) OR ((cvterm.name)::text = 'proplastid_gene'::text) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'floxed_gene'::text) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'gRNA_gene'::text) OR ((cvterm.name)::text = 'miRNA_gene'::text) OR ((cvterm.name)::text = 'scRNA_gene'::text) OR ((cvterm.name)::text = 'snoRNA_gene'::text) OR ((cvterm.name)::text = 'snRNA_gene'::text) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text) OR ((cvterm.name)::text = 'stRNA_gene'::text) OR ((cvterm.name)::text = 'tmRNA_gene'::text) OR ((cvterm.name)::text = 'tRNA_gene'::text) OR ((cvterm.name)::text = 'rRNA_gene'::text) OR ((cvterm.name)::text = 'piRNA_gene'::text) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text) OR ((cvterm.name)::text = 'lincRNA_gene'::text) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text) OR ((cvterm.name)::text = 'gene'::text));


ALTER TABLE so.gene OWNER TO kmr44;

--
-- Name: gene_array; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_array AS
 SELECT feature.feature_id AS gene_array_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_array'::text);


ALTER TABLE so.gene_array OWNER TO kmr44;

--
-- Name: gene_array_member; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_array_member AS
 SELECT feature.feature_id AS gene_array_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'operon_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text) OR ((cvterm.name)::text = 'gene_subarray_member'::text) OR ((cvterm.name)::text = 'member_of_regulon'::text) OR ((cvterm.name)::text = 'cassette_array_member'::text) OR ((cvterm.name)::text = 'gene_array_member'::text));


ALTER TABLE so.gene_array_member OWNER TO kmr44;

--
-- Name: gene_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_attribute AS
 SELECT feature.feature_id AS gene_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'protein_coding'::text) OR ((cvterm.name)::text = 'non_protein_coding'::text) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text) OR ((cvterm.name)::text = 'gene_array_member'::text) OR ((cvterm.name)::text = 'regulated'::text) OR ((cvterm.name)::text = 'epigenetically_modified'::text) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text) OR ((cvterm.name)::text = 'intein_containing'::text) OR ((cvterm.name)::text = 'miRNA_encoding'::text) OR ((cvterm.name)::text = 'rRNA_encoding'::text) OR ((cvterm.name)::text = 'scRNA_encoding'::text) OR ((cvterm.name)::text = 'snoRNA_encoding'::text) OR ((cvterm.name)::text = 'snRNA_encoding'::text) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text) OR ((cvterm.name)::text = 'stRNA_encoding'::text) OR ((cvterm.name)::text = 'tmRNA_encoding'::text) OR ((cvterm.name)::text = 'tRNA_encoding'::text) OR ((cvterm.name)::text = 'gRNA_encoding'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'overlapping'::text) OR ((cvterm.name)::text = 'inside_intron'::text) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'antisense'::text) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text) OR ((cvterm.name)::text = 'operon_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text) OR ((cvterm.name)::text = 'gene_subarray_member'::text) OR ((cvterm.name)::text = 'member_of_regulon'::text) OR ((cvterm.name)::text = 'cassette_array_member'::text) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated'::text) OR ((cvterm.name)::text = 'translationally_regulated'::text) OR ((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text) OR ((cvterm.name)::text = 'autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text) OR ((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'allelically_excluded'::text) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text) OR ((cvterm.name)::text = 'gene_attribute'::text));


ALTER TABLE so.gene_attribute OWNER TO kmr44;

--
-- Name: gene_cassette; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_cassette AS
 SELECT feature.feature_id AS gene_cassette_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_cassette'::text);


ALTER TABLE so.gene_cassette OWNER TO kmr44;

--
-- Name: gene_cassette_array; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_cassette_array AS
 SELECT feature.feature_id AS gene_cassette_array_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_cassette_array'::text);


ALTER TABLE so.gene_cassette_array OWNER TO kmr44;

--
-- Name: gene_cassette_member; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_cassette_member AS
 SELECT feature.feature_id AS gene_cassette_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cassette_array_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text));


ALTER TABLE so.gene_cassette_member OWNER TO kmr44;

--
-- Name: gene_component_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_component_region AS
 SELECT feature.feature_id AS gene_component_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'non_transcribed_region'::text) OR ((cvterm.name)::text = 'gene_fragment'::text) OR ((cvterm.name)::text = 'TSS_region'::text) OR ((cvterm.name)::text = 'gene_segment'::text) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text) OR ((cvterm.name)::text = 'gene_component_region'::text));


ALTER TABLE so.gene_component_region OWNER TO kmr44;

--
-- Name: gene_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_fragment AS
 SELECT feature.feature_id AS gene_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_fragment'::text);


ALTER TABLE so.gene_fragment OWNER TO kmr44;

--
-- Name: gene_fusion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_fusion AS
 SELECT feature.feature_id AS gene_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_fusion'::text);


ALTER TABLE so.gene_fusion OWNER TO kmr44;

--
-- Name: gene_group; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_group AS
 SELECT feature.feature_id AS gene_group_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'operon'::text) OR ((cvterm.name)::text = 'mating_type_region'::text) OR ((cvterm.name)::text = 'gene_array'::text) OR ((cvterm.name)::text = 'gene_subarray'::text) OR ((cvterm.name)::text = 'gene_cassette_array'::text) OR ((cvterm.name)::text = 'regulon'::text) OR ((cvterm.name)::text = 'gene_group'::text));


ALTER TABLE so.gene_group OWNER TO kmr44;

--
-- Name: gene_group_regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_group_regulatory_region AS
 SELECT feature.feature_id AS gene_group_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text));


ALTER TABLE so.gene_group_regulatory_region OWNER TO kmr44;

--
-- Name: gene_member_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_member_region AS
 SELECT feature.feature_id AS gene_member_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transcript'::text) OR ((cvterm.name)::text = 'regulatory_region'::text) OR ((cvterm.name)::text = 'polycistronic_transcript'::text) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'primary_transcript'::text) OR ((cvterm.name)::text = 'mature_transcript'::text) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_transcript'::text) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text) OR ((cvterm.name)::text = 'edited_transcript'::text) OR ((cvterm.name)::text = 'processed_transcript'::text) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text) OR ((cvterm.name)::text = 'capped_primary_transcript'::text) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'exemplar_mRNA'::text) OR ((cvterm.name)::text = 'capped_mRNA'::text) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'recoded_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text) OR ((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text) OR ((cvterm.name)::text = 'tRNA'::text) OR ((cvterm.name)::text = 'snRNA'::text) OR ((cvterm.name)::text = 'snoRNA'::text) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text) OR ((cvterm.name)::text = 'RNase_P_RNA'::text) OR ((cvterm.name)::text = 'telomerase_RNA'::text) OR ((cvterm.name)::text = 'vault_RNA'::text) OR ((cvterm.name)::text = 'Y_RNA'::text) OR ((cvterm.name)::text = 'rasiRNA'::text) OR ((cvterm.name)::text = 'SRP_RNA'::text) OR ((cvterm.name)::text = 'guide_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text) OR ((cvterm.name)::text = 'siRNA'::text) OR ((cvterm.name)::text = 'stRNA'::text) OR ((cvterm.name)::text = 'class_II_RNA'::text) OR ((cvterm.name)::text = 'class_I_RNA'::text) OR ((cvterm.name)::text = 'piRNA'::text) OR ((cvterm.name)::text = 'lincRNA'::text) OR ((cvterm.name)::text = 'tasiRNA'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text) OR ((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text) OR ((cvterm.name)::text = 'glycyl_tRNA'::text) OR ((cvterm.name)::text = 'histidyl_tRNA'::text) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text) OR ((cvterm.name)::text = 'leucyl_tRNA'::text) OR ((cvterm.name)::text = 'lysyl_tRNA'::text) OR ((cvterm.name)::text = 'methionyl_tRNA'::text) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text) OR ((cvterm.name)::text = 'prolyl_tRNA'::text) OR ((cvterm.name)::text = 'seryl_tRNA'::text) OR ((cvterm.name)::text = 'threonyl_tRNA'::text) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text) OR ((cvterm.name)::text = 'valyl_tRNA'::text) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text) OR ((cvterm.name)::text = 'arginyl_tRNA'::text) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text) OR ((cvterm.name)::text = 'U4_snRNA'::text) OR ((cvterm.name)::text = 'U4atac_snRNA'::text) OR ((cvterm.name)::text = 'U5_snRNA'::text) OR ((cvterm.name)::text = 'U6_snRNA'::text) OR ((cvterm.name)::text = 'U6atac_snRNA'::text) OR ((cvterm.name)::text = 'U11_snRNA'::text) OR ((cvterm.name)::text = 'U12_snRNA'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text) OR ((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text) OR ((cvterm.name)::text = 'OxyS_RNA'::text) OR ((cvterm.name)::text = 'RprA_RNA'::text) OR ((cvterm.name)::text = 'RRE_RNA'::text) OR ((cvterm.name)::text = 'spot_42_RNA'::text) OR ((cvterm.name)::text = 'tmRNA'::text) OR ((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text) OR ((cvterm.name)::text = 'replication_regulatory_region'::text) OR ((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text) OR ((cvterm.name)::text = 'CRM'::text) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text) OR ((cvterm.name)::text = 'ISRE'::text) OR ((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text) OR ((cvterm.name)::text = 'silencer'::text) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text) OR ((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'gene_member_region'::text));


ALTER TABLE so.gene_member_region OWNER TO kmr44;

--
-- Name: gene_rearranged_at_dna_level; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_rearranged_at_dna_level AS
 SELECT feature.feature_id AS gene_rearranged_at_dna_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text);


ALTER TABLE so.gene_rearranged_at_dna_level OWNER TO kmr44;

--
-- Name: gene_segment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_segment AS
 SELECT feature.feature_id AS gene_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pseudogenic_gene_segment'::text) OR ((cvterm.name)::text = 'gene_segment'::text));


ALTER TABLE so.gene_segment OWNER TO kmr44;

--
-- Name: gene_silenced_by_dna_methylation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_silenced_by_dna_methylation AS
 SELECT feature.feature_id AS gene_silenced_by_dna_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text);


ALTER TABLE so.gene_silenced_by_dna_methylation OWNER TO kmr44;

--
-- Name: gene_silenced_by_dna_modification; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_silenced_by_dna_modification AS
 SELECT feature.feature_id AS gene_silenced_by_dna_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text));


ALTER TABLE so.gene_silenced_by_dna_modification OWNER TO kmr44;

--
-- Name: gene_silenced_by_histone_deacetylation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_silenced_by_histone_deacetylation AS
 SELECT feature.feature_id AS gene_silenced_by_histone_deacetylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text);


ALTER TABLE so.gene_silenced_by_histone_deacetylation OWNER TO kmr44;

--
-- Name: gene_silenced_by_histone_methylation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_silenced_by_histone_methylation AS
 SELECT feature.feature_id AS gene_silenced_by_histone_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text);


ALTER TABLE so.gene_silenced_by_histone_methylation OWNER TO kmr44;

--
-- Name: gene_silenced_by_histone_modification; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_silenced_by_histone_modification AS
 SELECT feature.feature_id AS gene_silenced_by_histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text));


ALTER TABLE so.gene_silenced_by_histone_modification OWNER TO kmr44;

--
-- Name: gene_silenced_by_rna_interference; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_silenced_by_rna_interference AS
 SELECT feature.feature_id AS gene_silenced_by_rna_interference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text);


ALTER TABLE so.gene_silenced_by_rna_interference OWNER TO kmr44;

--
-- Name: gene_subarray; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_subarray AS
 SELECT feature.feature_id AS gene_subarray_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_subarray'::text);


ALTER TABLE so.gene_subarray OWNER TO kmr44;

--
-- Name: gene_subarray_member; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_subarray_member AS
 SELECT feature.feature_id AS gene_subarray_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_subarray_member'::text);


ALTER TABLE so.gene_subarray_member OWNER TO kmr44;

--
-- Name: gene_to_gene_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_to_gene_feature AS
 SELECT feature.feature_id AS gene_to_gene_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'overlapping'::text) OR ((cvterm.name)::text = 'inside_intron'::text) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'antisense'::text) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text));


ALTER TABLE so.gene_to_gene_feature OWNER TO kmr44;

--
-- Name: gene_trap_construct; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_trap_construct AS
 SELECT feature.feature_id AS gene_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_trap_construct'::text);


ALTER TABLE so.gene_trap_construct OWNER TO kmr44;

--
-- Name: gene_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_variant AS
 SELECT feature.feature_id AS gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_fusion'::text) OR ((cvterm.name)::text = 'splicing_variant'::text) OR ((cvterm.name)::text = 'transcript_variant'::text) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text) OR ((cvterm.name)::text = 'exon_loss'::text) OR ((cvterm.name)::text = 'intron_gain'::text) OR ((cvterm.name)::text = 'splice_region_variant'::text) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'nc_transcript_variant'::text) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text) OR ((cvterm.name)::text = 'UTR_variant'::text) OR ((cvterm.name)::text = 'intron_variant'::text) OR ((cvterm.name)::text = 'exon_variant'::text) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text) OR ((cvterm.name)::text = 'splice_site_variant'::text) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text) OR ((cvterm.name)::text = 'coding_sequence_variant'::text) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text) OR ((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text) OR ((cvterm.name)::text = 'inframe_variant'::text) OR ((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text) OR ((cvterm.name)::text = 'synonymous_codon'::text) OR ((cvterm.name)::text = 'terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text) OR ((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text) OR ((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text) OR ((cvterm.name)::text = 'conformational_change_variant'::text) OR ((cvterm.name)::text = 'amino_acid_deletion'::text) OR ((cvterm.name)::text = 'amino_acid_insertion'::text) OR ((cvterm.name)::text = 'amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide'::text) OR ((cvterm.name)::text = 'polypeptide_fusion'::text) OR ((cvterm.name)::text = 'polypeptide_truncation'::text) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'gene_variant'::text));


ALTER TABLE so.gene_variant OWNER TO kmr44;

--
-- Name: gene_with_dicistronic_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_dicistronic_mrna AS
 SELECT feature.feature_id AS gene_with_dicistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text);


ALTER TABLE so.gene_with_dicistronic_mrna OWNER TO kmr44;

--
-- Name: gene_with_dicistronic_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_dicistronic_primary_transcript AS
 SELECT feature.feature_id AS gene_with_dicistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text);


ALTER TABLE so.gene_with_dicistronic_primary_transcript OWNER TO kmr44;

--
-- Name: gene_with_dicistronic_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_dicistronic_transcript AS
 SELECT feature.feature_id AS gene_with_dicistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text));


ALTER TABLE so.gene_with_dicistronic_transcript OWNER TO kmr44;

--
-- Name: gene_with_edited_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_edited_transcript AS
 SELECT feature.feature_id AS gene_with_edited_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_edited_transcript'::text);


ALTER TABLE so.gene_with_edited_transcript OWNER TO kmr44;

--
-- Name: gene_with_mrna_recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_mrna_recoded_by_translational_bypass AS
 SELECT feature.feature_id AS gene_with_mrna_recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text);


ALTER TABLE so.gene_with_mrna_recoded_by_translational_bypass OWNER TO kmr44;

--
-- Name: gene_with_mrna_with_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_mrna_with_frameshift AS
 SELECT feature.feature_id AS gene_with_mrna_with_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text);


ALTER TABLE so.gene_with_mrna_with_frameshift OWNER TO kmr44;

--
-- Name: gene_with_non_canonical_start_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_non_canonical_start_codon AS
 SELECT feature.feature_id AS gene_with_non_canonical_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_with_start_codon_CUG'::text) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text));


ALTER TABLE so.gene_with_non_canonical_start_codon OWNER TO kmr44;

--
-- Name: gene_with_polyadenylated_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_polyadenylated_mrna AS
 SELECT feature.feature_id AS gene_with_polyadenylated_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text);


ALTER TABLE so.gene_with_polyadenylated_mrna OWNER TO kmr44;

--
-- Name: gene_with_polycistronic_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_polycistronic_transcript AS
 SELECT feature.feature_id AS gene_with_polycistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text));


ALTER TABLE so.gene_with_polycistronic_transcript OWNER TO kmr44;

--
-- Name: gene_with_recoded_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_recoded_mrna AS
 SELECT feature.feature_id AS gene_with_recoded_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text));


ALTER TABLE so.gene_with_recoded_mrna OWNER TO kmr44;

--
-- Name: gene_with_start_codon_cug; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_start_codon_cug AS
 SELECT feature.feature_id AS gene_with_start_codon_cug_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text);


ALTER TABLE so.gene_with_start_codon_cug OWNER TO kmr44;

--
-- Name: gene_with_stop_codon_read_through; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_stop_codon_read_through AS
 SELECT feature.feature_id AS gene_with_stop_codon_read_through_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text));


ALTER TABLE so.gene_with_stop_codon_read_through OWNER TO kmr44;

--
-- Name: gene_with_stop_codon_redefined_as_pyrrolysine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_stop_codon_redefined_as_pyrrolysine AS
 SELECT feature.feature_id AS gene_with_stop_codon_redefined_as_pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text);


ALTER TABLE so.gene_with_stop_codon_redefined_as_pyrrolysine OWNER TO kmr44;

--
-- Name: gene_with_stop_codon_redefined_as_selenocysteine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_stop_codon_redefined_as_selenocysteine AS
 SELECT feature.feature_id AS gene_with_stop_codon_redefined_as_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text);


ALTER TABLE so.gene_with_stop_codon_redefined_as_selenocysteine OWNER TO kmr44;

--
-- Name: gene_with_trans_spliced_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_trans_spliced_transcript AS
 SELECT feature.feature_id AS gene_with_trans_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text);


ALTER TABLE so.gene_with_trans_spliced_transcript OWNER TO kmr44;

--
-- Name: gene_with_transcript_with_translational_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gene_with_transcript_with_translational_frameshift AS
 SELECT feature.feature_id AS gene_with_transcript_with_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text);


ALTER TABLE so.gene_with_transcript_with_translational_frameshift OWNER TO kmr44;

--
-- Name: genetic_marker; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.genetic_marker AS
 SELECT feature.feature_id AS genetic_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'heritable_phenotypic_marker'::text) OR ((cvterm.name)::text = 'DArT_marker'::text) OR ((cvterm.name)::text = 'genetic_marker'::text));


ALTER TABLE so.genetic_marker OWNER TO kmr44;

--
-- Name: genome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.genome AS
 SELECT feature.feature_id AS genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'reference_genome'::text) OR ((cvterm.name)::text = 'variant_genome'::text) OR ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text) OR ((cvterm.name)::text = 'genome'::text));


ALTER TABLE so.genome OWNER TO kmr44;

--
-- Name: genomic_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.genomic_clone AS
 SELECT feature.feature_id AS genomic_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomic_clone'::text);


ALTER TABLE so.genomic_clone OWNER TO kmr44;

--
-- Name: genomic_dna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.genomic_dna AS
 SELECT feature.feature_id AS genomic_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomic_DNA'::text);


ALTER TABLE so.genomic_dna OWNER TO kmr44;

--
-- Name: genomic_island; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.genomic_island AS
 SELECT feature.feature_id AS genomic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text) OR ((cvterm.name)::text = 'adaptive_island'::text) OR ((cvterm.name)::text = 'symbiosis_island'::text) OR ((cvterm.name)::text = 'cryptic_prophage'::text) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text) OR ((cvterm.name)::text = 'genomic_island'::text));


ALTER TABLE so.genomic_island OWNER TO kmr44;

--
-- Name: genomically_contaminated_cdna_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.genomically_contaminated_cdna_clone AS
 SELECT feature.feature_id AS genomically_contaminated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text);


ALTER TABLE so.genomically_contaminated_cdna_clone OWNER TO kmr44;

--
-- Name: germline_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.germline_variant AS
 SELECT feature.feature_id AS germline_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'germline_variant'::text);


ALTER TABLE so.germline_variant OWNER TO kmr44;

--
-- Name: glutamic_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glutamic_acid AS
 SELECT feature.feature_id AS glutamic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamic_acid'::text);


ALTER TABLE so.glutamic_acid OWNER TO kmr44;

--
-- Name: glutamic_acid_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glutamic_acid_trna_primary_transcript AS
 SELECT feature.feature_id AS glutamic_acid_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text);


ALTER TABLE so.glutamic_acid_trna_primary_transcript OWNER TO kmr44;

--
-- Name: glutamine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glutamine AS
 SELECT feature.feature_id AS glutamine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamine'::text);


ALTER TABLE so.glutamine OWNER TO kmr44;

--
-- Name: glutamine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glutamine_trna_primary_transcript AS
 SELECT feature.feature_id AS glutamine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text);


ALTER TABLE so.glutamine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: glutaminyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glutaminyl_trna AS
 SELECT feature.feature_id AS glutaminyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutaminyl_tRNA'::text);


ALTER TABLE so.glutaminyl_trna OWNER TO kmr44;

--
-- Name: glutamyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glutamyl_trna AS
 SELECT feature.feature_id AS glutamyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamyl_tRNA'::text);


ALTER TABLE so.glutamyl_trna OWNER TO kmr44;

--
-- Name: glycine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glycine AS
 SELECT feature.feature_id AS glycine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycine'::text);


ALTER TABLE so.glycine OWNER TO kmr44;

--
-- Name: glycine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glycine_trna_primary_transcript AS
 SELECT feature.feature_id AS glycine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text);


ALTER TABLE so.glycine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: glycyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.glycyl_trna AS
 SELECT feature.feature_id AS glycyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycyl_tRNA'::text);


ALTER TABLE so.glycyl_trna OWNER TO kmr44;

--
-- Name: gna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gna AS
 SELECT feature.feature_id AS gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'R_GNA'::text) OR ((cvterm.name)::text = 'S_GNA'::text) OR ((cvterm.name)::text = 'GNA'::text));


ALTER TABLE so.gna OWNER TO kmr44;

--
-- Name: gna_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.gna_oligo AS
 SELECT feature.feature_id AS gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text) OR ((cvterm.name)::text = 'GNA_oligo'::text));


ALTER TABLE so.gna_oligo OWNER TO kmr44;

--
-- Name: golden_path; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.golden_path AS
 SELECT feature.feature_id AS golden_path_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'golden_path'::text);


ALTER TABLE so.golden_path OWNER TO kmr44;

--
-- Name: golden_path_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.golden_path_fragment AS
 SELECT feature.feature_id AS golden_path_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'golden_path_fragment'::text);


ALTER TABLE so.golden_path_fragment OWNER TO kmr44;

--
-- Name: grna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.grna_encoding AS
 SELECT feature.feature_id AS grna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gRNA_encoding'::text);


ALTER TABLE so.grna_encoding OWNER TO kmr44;

--
-- Name: grna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.grna_gene AS
 SELECT feature.feature_id AS grna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gRNA_gene'::text);


ALTER TABLE so.grna_gene OWNER TO kmr44;

--
-- Name: group_1_intron_homing_endonuclease_target_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.group_1_intron_homing_endonuclease_target_region AS
 SELECT feature.feature_id AS group_1_intron_homing_endonuclease_target_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text);


ALTER TABLE so.group_1_intron_homing_endonuclease_target_region OWNER TO kmr44;

--
-- Name: group_i_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.group_i_intron AS
 SELECT feature.feature_id AS group_i_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_I_intron'::text);


ALTER TABLE so.group_i_intron OWNER TO kmr44;

--
-- Name: group_ii_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.group_ii_intron AS
 SELECT feature.feature_id AS group_ii_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text));


ALTER TABLE so.group_ii_intron OWNER TO kmr44;

--
-- Name: group_iia_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.group_iia_intron AS
 SELECT feature.feature_id AS group_iia_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_IIA_intron'::text);


ALTER TABLE so.group_iia_intron OWNER TO kmr44;

--
-- Name: group_iib_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.group_iib_intron AS
 SELECT feature.feature_id AS group_iib_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_IIB_intron'::text);


ALTER TABLE so.group_iib_intron OWNER TO kmr44;

--
-- Name: group_iii_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.group_iii_intron AS
 SELECT feature.feature_id AS group_iii_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_III_intron'::text);


ALTER TABLE so.group_iii_intron OWNER TO kmr44;

--
-- Name: guide_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.guide_rna AS
 SELECT feature.feature_id AS guide_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'guide_RNA'::text);


ALTER TABLE so.guide_rna OWNER TO kmr44;

--
-- Name: guide_rna_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.guide_rna_region AS
 SELECT feature.feature_id AS guide_rna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text) OR ((cvterm.name)::text = 'guide_RNA_region'::text));


ALTER TABLE so.guide_rna_region OWNER TO kmr44;

--
-- Name: h2b_ubiquitination_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h2b_ubiquitination_site AS
 SELECT feature.feature_id AS h2b_ubiquitination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H2B_ubiquitination_site'::text);


ALTER TABLE so.h2b_ubiquitination_site OWNER TO kmr44;

--
-- Name: h2bk5_monomethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h2bk5_monomethylation_site AS
 SELECT feature.feature_id AS h2bk5_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text);


ALTER TABLE so.h2bk5_monomethylation_site OWNER TO kmr44;

--
-- Name: h3k14_acetylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k14_acetylation_site AS
 SELECT feature.feature_id AS h3k14_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K14_acetylation_site'::text);


ALTER TABLE so.h3k14_acetylation_site OWNER TO kmr44;

--
-- Name: h3k18_acetylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k18_acetylation_site AS
 SELECT feature.feature_id AS h3k18_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K18_acetylation_site'::text);


ALTER TABLE so.h3k18_acetylation_site OWNER TO kmr44;

--
-- Name: h3k23_acylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k23_acylation_site AS
 SELECT feature.feature_id AS h3k23_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K23_acylation site'::text);


ALTER TABLE so.h3k23_acylation_site OWNER TO kmr44;

--
-- Name: h3k27_acylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k27_acylation_site AS
 SELECT feature.feature_id AS h3k27_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_acylation_site'::text);


ALTER TABLE so.h3k27_acylation_site OWNER TO kmr44;

--
-- Name: h3k27_dimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k27_dimethylation_site AS
 SELECT feature.feature_id AS h3k27_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_dimethylation_site'::text);


ALTER TABLE so.h3k27_dimethylation_site OWNER TO kmr44;

--
-- Name: h3k27_methylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k27_methylation_site AS
 SELECT feature.feature_id AS h3k27_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text));


ALTER TABLE so.h3k27_methylation_site OWNER TO kmr44;

--
-- Name: h3k27_monomethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k27_monomethylation_site AS
 SELECT feature.feature_id AS h3k27_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_monomethylation_site'::text);


ALTER TABLE so.h3k27_monomethylation_site OWNER TO kmr44;

--
-- Name: h3k27_trimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k27_trimethylation_site AS
 SELECT feature.feature_id AS h3k27_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_trimethylation_site'::text);


ALTER TABLE so.h3k27_trimethylation_site OWNER TO kmr44;

--
-- Name: h3k36_dimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k36_dimethylation_site AS
 SELECT feature.feature_id AS h3k36_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_dimethylation_site'::text);


ALTER TABLE so.h3k36_dimethylation_site OWNER TO kmr44;

--
-- Name: h3k36_methylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k36_methylation_site AS
 SELECT feature.feature_id AS h3k36_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text));


ALTER TABLE so.h3k36_methylation_site OWNER TO kmr44;

--
-- Name: h3k36_monomethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k36_monomethylation_site AS
 SELECT feature.feature_id AS h3k36_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_monomethylation_site'::text);


ALTER TABLE so.h3k36_monomethylation_site OWNER TO kmr44;

--
-- Name: h3k36_trimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k36_trimethylation_site AS
 SELECT feature.feature_id AS h3k36_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_trimethylation_site'::text);


ALTER TABLE so.h3k36_trimethylation_site OWNER TO kmr44;

--
-- Name: h3k4_dimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k4_dimethylation_site AS
 SELECT feature.feature_id AS h3k4_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_dimethylation_site'::text);


ALTER TABLE so.h3k4_dimethylation_site OWNER TO kmr44;

--
-- Name: h3k4_methylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k4_methylation_site AS
 SELECT feature.feature_id AS h3k4_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text));


ALTER TABLE so.h3k4_methylation_site OWNER TO kmr44;

--
-- Name: h3k4_monomethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k4_monomethylation_site AS
 SELECT feature.feature_id AS h3k4_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_monomethylation_site'::text);


ALTER TABLE so.h3k4_monomethylation_site OWNER TO kmr44;

--
-- Name: h3k4_trimethylation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k4_trimethylation AS
 SELECT feature.feature_id AS h3k4_trimethylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_trimethylation'::text);


ALTER TABLE so.h3k4_trimethylation OWNER TO kmr44;

--
-- Name: h3k79_dimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k79_dimethylation_site AS
 SELECT feature.feature_id AS h3k79_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_dimethylation_site'::text);


ALTER TABLE so.h3k79_dimethylation_site OWNER TO kmr44;

--
-- Name: h3k79_methylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k79_methylation_site AS
 SELECT feature.feature_id AS h3k79_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text));


ALTER TABLE so.h3k79_methylation_site OWNER TO kmr44;

--
-- Name: h3k79_monomethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k79_monomethylation_site AS
 SELECT feature.feature_id AS h3k79_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_monomethylation_site'::text);


ALTER TABLE so.h3k79_monomethylation_site OWNER TO kmr44;

--
-- Name: h3k79_trimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k79_trimethylation_site AS
 SELECT feature.feature_id AS h3k79_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_trimethylation_site'::text);


ALTER TABLE so.h3k79_trimethylation_site OWNER TO kmr44;

--
-- Name: h3k9_acetylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k9_acetylation_site AS
 SELECT feature.feature_id AS h3k9_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_acetylation_site'::text);


ALTER TABLE so.h3k9_acetylation_site OWNER TO kmr44;

--
-- Name: h3k9_dimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k9_dimethylation_site AS
 SELECT feature.feature_id AS h3k9_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_dimethylation_site'::text);


ALTER TABLE so.h3k9_dimethylation_site OWNER TO kmr44;

--
-- Name: h3k9_methylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k9_methylation_site AS
 SELECT feature.feature_id AS h3k9_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text));


ALTER TABLE so.h3k9_methylation_site OWNER TO kmr44;

--
-- Name: h3k9_monomethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k9_monomethylation_site AS
 SELECT feature.feature_id AS h3k9_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_monomethylation_site'::text);


ALTER TABLE so.h3k9_monomethylation_site OWNER TO kmr44;

--
-- Name: h3k9_trimethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h3k9_trimethylation_site AS
 SELECT feature.feature_id AS h3k9_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_trimethylation_site'::text);


ALTER TABLE so.h3k9_trimethylation_site OWNER TO kmr44;

--
-- Name: h4k16_acylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h4k16_acylation_site AS
 SELECT feature.feature_id AS h4k16_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K16_acylation_site'::text);


ALTER TABLE so.h4k16_acylation_site OWNER TO kmr44;

--
-- Name: h4k20_monomethylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h4k20_monomethylation_site AS
 SELECT feature.feature_id AS h4k20_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K20_monomethylation_site'::text);


ALTER TABLE so.h4k20_monomethylation_site OWNER TO kmr44;

--
-- Name: h4k5_acylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h4k5_acylation_site AS
 SELECT feature.feature_id AS h4k5_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K5_acylation_site'::text);


ALTER TABLE so.h4k5_acylation_site OWNER TO kmr44;

--
-- Name: h4k8_acylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h4k8_acylation_site AS
 SELECT feature.feature_id AS h4k8_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K8_acylation site'::text);


ALTER TABLE so.h4k8_acylation_site OWNER TO kmr44;

--
-- Name: h4k_acylation_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h4k_acylation_region AS
 SELECT feature.feature_id AS h4k_acylation_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K_acylation_region'::text);


ALTER TABLE so.h4k_acylation_region OWNER TO kmr44;

--
-- Name: h_aca_box_snorna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h_aca_box_snorna AS
 SELECT feature.feature_id AS h_aca_box_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text));


ALTER TABLE so.h_aca_box_snorna OWNER TO kmr44;

--
-- Name: h_aca_box_snorna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h_aca_box_snorna_encoding AS
 SELECT feature.feature_id AS h_aca_box_snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text);


ALTER TABLE so.h_aca_box_snorna_encoding OWNER TO kmr44;

--
-- Name: h_aca_box_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h_aca_box_snorna_primary_transcript AS
 SELECT feature.feature_id AS h_aca_box_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text);


ALTER TABLE so.h_aca_box_snorna_primary_transcript OWNER TO kmr44;

--
-- Name: h_pseudoknot; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.h_pseudoknot AS
 SELECT feature.feature_id AS h_pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_pseudoknot'::text);


ALTER TABLE so.h_pseudoknot OWNER TO kmr44;

--
-- Name: hammerhead_ribozyme; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.hammerhead_ribozyme AS
 SELECT feature.feature_id AS hammerhead_ribozyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hammerhead_ribozyme'::text);


ALTER TABLE so.hammerhead_ribozyme OWNER TO kmr44;

--
-- Name: haplotype; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.haplotype AS
 SELECT feature.feature_id AS haplotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'haplotype'::text);


ALTER TABLE so.haplotype OWNER TO kmr44;

--
-- Name: haplotype_block; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.haplotype_block AS
 SELECT feature.feature_id AS haplotype_block_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'haplotype_block'::text);


ALTER TABLE so.haplotype_block OWNER TO kmr44;

--
-- Name: helitron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.helitron AS
 SELECT feature.feature_id AS helitron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'helitron'::text);


ALTER TABLE so.helitron OWNER TO kmr44;

--
-- Name: helix_turn_helix; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.helix_turn_helix AS
 SELECT feature.feature_id AS helix_turn_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'helix_turn_helix'::text);


ALTER TABLE so.helix_turn_helix OWNER TO kmr44;

--
-- Name: heptamer_of_recombination_feature_of_vertebrate_im_sys_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.heptamer_of_recombination_feature_of_vertebrate_im_sys_gene AS
 SELECT feature.feature_id AS heptamer_of_recombination_feature_of_vertebrate_im_sys_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text));


ALTER TABLE so.heptamer_of_recombination_feature_of_vertebrate_im_sys_gene OWNER TO kmr44;

--
-- Name: heritable_phenotypic_marker; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.heritable_phenotypic_marker AS
 SELECT feature.feature_id AS heritable_phenotypic_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'heritable_phenotypic_marker'::text);


ALTER TABLE so.heritable_phenotypic_marker OWNER TO kmr44;

--
-- Name: hetero_compound_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.hetero_compound_chromosome AS
 SELECT feature.feature_id AS hetero_compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hetero_compound_chromosome'::text);


ALTER TABLE so.hetero_compound_chromosome OWNER TO kmr44;

--
-- Name: high_identity_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.high_identity_region AS
 SELECT feature.feature_id AS high_identity_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'high_identity_region'::text);


ALTER TABLE so.high_identity_region OWNER TO kmr44;

--
-- Name: high_quality_draft; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.high_quality_draft AS
 SELECT feature.feature_id AS high_quality_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'high_quality_draft'::text);


ALTER TABLE so.high_quality_draft OWNER TO kmr44;

--
-- Name: histidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histidine AS
 SELECT feature.feature_id AS histidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidine'::text);


ALTER TABLE so.histidine OWNER TO kmr44;

--
-- Name: histidine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histidine_trna_primary_transcript AS
 SELECT feature.feature_id AS histidine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text);


ALTER TABLE so.histidine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: histidyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histidyl_trna AS
 SELECT feature.feature_id AS histidyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidyl_tRNA'::text);


ALTER TABLE so.histidyl_trna OWNER TO kmr44;

--
-- Name: histone_acetylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histone_acetylation_site AS
 SELECT feature.feature_id AS histone_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text));


ALTER TABLE so.histone_acetylation_site OWNER TO kmr44;

--
-- Name: histone_acylation_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histone_acylation_region AS
 SELECT feature.feature_id AS histone_acylation_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text));


ALTER TABLE so.histone_acylation_region OWNER TO kmr44;

--
-- Name: histone_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histone_binding_site AS
 SELECT feature.feature_id AS histone_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histone_binding_site'::text);


ALTER TABLE so.histone_binding_site OWNER TO kmr44;

--
-- Name: histone_methylation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histone_methylation_site AS
 SELECT feature.feature_id AS histone_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text));


ALTER TABLE so.histone_methylation_site OWNER TO kmr44;

--
-- Name: histone_modification; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histone_modification AS
 SELECT feature.feature_id AS histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'histone_modification'::text));


ALTER TABLE so.histone_modification OWNER TO kmr44;

--
-- Name: histone_ubiqitination_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.histone_ubiqitination_site AS
 SELECT feature.feature_id AS histone_ubiqitination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text));


ALTER TABLE so.histone_ubiqitination_site OWNER TO kmr44;

--
-- Name: homing_endonuclease_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.homing_endonuclease_binding_site AS
 SELECT feature.feature_id AS homing_endonuclease_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text);


ALTER TABLE so.homing_endonuclease_binding_site OWNER TO kmr44;

--
-- Name: homo_compound_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.homo_compound_chromosome AS
 SELECT feature.feature_id AS homo_compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'homo_compound_chromosome'::text);


ALTER TABLE so.homo_compound_chromosome OWNER TO kmr44;

--
-- Name: homologous; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.homologous AS
 SELECT feature.feature_id AS homologous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'orthologous'::text) OR ((cvterm.name)::text = 'paralogous'::text) OR ((cvterm.name)::text = 'homologous'::text));


ALTER TABLE so.homologous OWNER TO kmr44;

--
-- Name: homologous_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.homologous_region AS
 SELECT feature.feature_id AS homologous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'paralogous_region'::text) OR ((cvterm.name)::text = 'orthologous_region'::text) OR ((cvterm.name)::text = 'homologous_region'::text));


ALTER TABLE so.homologous_region OWNER TO kmr44;

--
-- Name: hoogsteen_base_pair; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.hoogsteen_base_pair AS
 SELECT feature.feature_id AS hoogsteen_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Hoogsteen_base_pair'::text);


ALTER TABLE so.hoogsteen_base_pair OWNER TO kmr44;

--
-- Name: hydrophobic_region_of_peptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.hydrophobic_region_of_peptide AS
 SELECT feature.feature_id AS hydrophobic_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text);


ALTER TABLE so.hydrophobic_region_of_peptide OWNER TO kmr44;

--
-- Name: hydroxywybutosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.hydroxywybutosine AS
 SELECT feature.feature_id AS hydroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hydroxywybutosine'::text);


ALTER TABLE so.hydroxywybutosine OWNER TO kmr44;

--
-- Name: hyperploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.hyperploid AS
 SELECT feature.feature_id AS hyperploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hyperploid'::text);


ALTER TABLE so.hyperploid OWNER TO kmr44;

--
-- Name: hypoploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.hypoploid AS
 SELECT feature.feature_id AS hypoploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hypoploid'::text);


ALTER TABLE so.hypoploid OWNER TO kmr44;

--
-- Name: i_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.i_motif AS
 SELECT feature.feature_id AS i_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'i_motif'::text);


ALTER TABLE so.i_motif OWNER TO kmr44;

--
-- Name: idna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.idna AS
 SELECT feature.feature_id AS idna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'iDNA'::text);


ALTER TABLE so.idna OWNER TO kmr44;

--
-- Name: immature_peptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.immature_peptide_region AS
 SELECT feature.feature_id AS immature_peptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'immature_peptide_region'::text);


ALTER TABLE so.immature_peptide_region OWNER TO kmr44;

--
-- Name: imprinted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.imprinted AS
 SELECT feature.feature_id AS imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'imprinted'::text));


ALTER TABLE so.imprinted OWNER TO kmr44;

--
-- Name: improved_high_quality_draft; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.improved_high_quality_draft AS
 SELECT feature.feature_id AS improved_high_quality_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'improved_high_quality_draft'::text);


ALTER TABLE so.improved_high_quality_draft OWNER TO kmr44;

--
-- Name: inactive_catalytic_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inactive_catalytic_site AS
 SELECT feature.feature_id AS inactive_catalytic_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inactive_catalytic_site'::text);


ALTER TABLE so.inactive_catalytic_site OWNER TO kmr44;

--
-- Name: inactive_ligand_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inactive_ligand_binding_site AS
 SELECT feature.feature_id AS inactive_ligand_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text));


ALTER TABLE so.inactive_ligand_binding_site OWNER TO kmr44;

--
-- Name: incomplete_terminal_codon_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.incomplete_terminal_codon_variant AS
 SELECT feature.feature_id AS incomplete_terminal_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text);


ALTER TABLE so.incomplete_terminal_codon_variant OWNER TO kmr44;

--
-- Name: increased_polyadenylation_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.increased_polyadenylation_variant AS
 SELECT feature.feature_id AS increased_polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_polyadenylation_variant'::text);


ALTER TABLE so.increased_polyadenylation_variant OWNER TO kmr44;

--
-- Name: increased_transcript_level_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.increased_transcript_level_variant AS
 SELECT feature.feature_id AS increased_transcript_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcript_level_variant'::text);


ALTER TABLE so.increased_transcript_level_variant OWNER TO kmr44;

--
-- Name: increased_transcript_stability_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.increased_transcript_stability_variant AS
 SELECT feature.feature_id AS increased_transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcript_stability_variant'::text);


ALTER TABLE so.increased_transcript_stability_variant OWNER TO kmr44;

--
-- Name: increased_transcription_rate_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.increased_transcription_rate_variant AS
 SELECT feature.feature_id AS increased_transcription_rate_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcription_rate_variant'::text);


ALTER TABLE so.increased_transcription_rate_variant OWNER TO kmr44;

--
-- Name: increased_translational_product_level; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.increased_translational_product_level AS
 SELECT feature.feature_id AS increased_translational_product_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_translational_product_level'::text);


ALTER TABLE so.increased_translational_product_level OWNER TO kmr44;

--
-- Name: indel; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.indel AS
 SELECT feature.feature_id AS indel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'indel'::text);


ALTER TABLE so.indel OWNER TO kmr44;

--
-- Name: independently_known; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.independently_known AS
 SELECT feature.feature_id AS independently_known_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'independently_known'::text);


ALTER TABLE so.independently_known OWNER TO kmr44;

--
-- Name: inframe_codon_gain; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inframe_codon_gain AS
 SELECT feature.feature_id AS inframe_codon_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inframe_codon_gain'::text);


ALTER TABLE so.inframe_codon_gain OWNER TO kmr44;

--
-- Name: inframe_codon_loss; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inframe_codon_loss AS
 SELECT feature.feature_id AS inframe_codon_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inframe_codon_loss'::text);


ALTER TABLE so.inframe_codon_loss OWNER TO kmr44;

--
-- Name: inframe_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inframe_variant AS
 SELECT feature.feature_id AS inframe_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text) OR ((cvterm.name)::text = 'inframe_variant'::text));


ALTER TABLE so.inframe_variant OWNER TO kmr44;

--
-- Name: initiator_codon_change; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.initiator_codon_change AS
 SELECT feature.feature_id AS initiator_codon_change_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'initiator_codon_change'::text);


ALTER TABLE so.initiator_codon_change OWNER TO kmr44;

--
-- Name: inosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inosine AS
 SELECT feature.feature_id AS inosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text) OR ((cvterm.name)::text = 'inosine'::text));


ALTER TABLE so.inosine OWNER TO kmr44;

--
-- Name: inr1_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inr1_motif AS
 SELECT feature.feature_id AS inr1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'INR1_motif'::text);


ALTER TABLE so.inr1_motif OWNER TO kmr44;

--
-- Name: inr_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inr_motif AS
 SELECT feature.feature_id AS inr_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'INR_motif'::text);


ALTER TABLE so.inr_motif OWNER TO kmr44;

--
-- Name: insertion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insertion AS
 SELECT feature.feature_id AS insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text) OR ((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text) OR ((cvterm.name)::text = 'insertion'::text));


ALTER TABLE so.insertion OWNER TO kmr44;

--
-- Name: insertion_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insertion_attribute AS
 SELECT feature.feature_id AS insertion_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tandem'::text) OR ((cvterm.name)::text = 'direct'::text) OR ((cvterm.name)::text = 'inverted'::text) OR ((cvterm.name)::text = 'insertion_attribute'::text));


ALTER TABLE so.insertion_attribute OWNER TO kmr44;

--
-- Name: insertion_breakpoint; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insertion_breakpoint AS
 SELECT feature.feature_id AS insertion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertion_breakpoint'::text);


ALTER TABLE so.insertion_breakpoint OWNER TO kmr44;

--
-- Name: insertion_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insertion_sequence AS
 SELECT feature.feature_id AS insertion_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertion_sequence'::text);


ALTER TABLE so.insertion_sequence OWNER TO kmr44;

--
-- Name: insertion_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insertion_site AS
 SELECT feature.feature_id AS insertion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transposable_element_insertion_site'::text) OR ((cvterm.name)::text = 'insertion_site'::text));


ALTER TABLE so.insertion_site OWNER TO kmr44;

--
-- Name: insertional; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insertional AS
 SELECT feature.feature_id AS insertional_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertional'::text);


ALTER TABLE so.insertional OWNER TO kmr44;

--
-- Name: insertional_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insertional_duplication AS
 SELECT feature.feature_id AS insertional_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text) OR ((cvterm.name)::text = 'insertional_duplication'::text));


ALTER TABLE so.insertional_duplication OWNER TO kmr44;

--
-- Name: inside_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inside_intron AS
 SELECT feature.feature_id AS inside_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text) OR ((cvterm.name)::text = 'inside_intron'::text));


ALTER TABLE so.inside_intron OWNER TO kmr44;

--
-- Name: inside_intron_antiparallel; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inside_intron_antiparallel AS
 SELECT feature.feature_id AS inside_intron_antiparallel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inside_intron_antiparallel'::text);


ALTER TABLE so.inside_intron_antiparallel OWNER TO kmr44;

--
-- Name: inside_intron_parallel; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inside_intron_parallel AS
 SELECT feature.feature_id AS inside_intron_parallel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inside_intron_parallel'::text);


ALTER TABLE so.inside_intron_parallel OWNER TO kmr44;

--
-- Name: insulator; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insulator AS
 SELECT feature.feature_id AS insulator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insulator'::text);


ALTER TABLE so.insulator OWNER TO kmr44;

--
-- Name: insulator_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.insulator_binding_site AS
 SELECT feature.feature_id AS insulator_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insulator_binding_site'::text);


ALTER TABLE so.insulator_binding_site OWNER TO kmr44;

--
-- Name: integrated_mobile_genetic_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.integrated_mobile_genetic_element AS
 SELECT feature.feature_id AS integrated_mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transposable_element'::text) OR ((cvterm.name)::text = 'proviral_region'::text) OR ((cvterm.name)::text = 'integron'::text) OR ((cvterm.name)::text = 'genomic_island'::text) OR ((cvterm.name)::text = 'integrated_plasmid'::text) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text) OR ((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'nested_transposon'::text) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text) OR ((cvterm.name)::text = 'conjugative_transposon'::text) OR ((cvterm.name)::text = 'helitron'::text) OR ((cvterm.name)::text = 'p_element'::text) OR ((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text) OR ((cvterm.name)::text = 'polinton'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text) OR ((cvterm.name)::text = 'adaptive_island'::text) OR ((cvterm.name)::text = 'symbiosis_island'::text) OR ((cvterm.name)::text = 'cryptic_prophage'::text) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text));


ALTER TABLE so.integrated_mobile_genetic_element OWNER TO kmr44;

--
-- Name: integrated_plasmid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.integrated_plasmid AS
 SELECT feature.feature_id AS integrated_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'integrated_plasmid'::text);


ALTER TABLE so.integrated_plasmid OWNER TO kmr44;

--
-- Name: integration_excision_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.integration_excision_site AS
 SELECT feature.feature_id AS integration_excision_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text) OR ((cvterm.name)::text = 'attB_site'::text) OR ((cvterm.name)::text = 'attL_site'::text) OR ((cvterm.name)::text = 'attR_site'::text) OR ((cvterm.name)::text = 'attC_site'::text) OR ((cvterm.name)::text = 'attCtn_site'::text) OR ((cvterm.name)::text = 'integration_excision_site'::text));


ALTER TABLE so.integration_excision_site OWNER TO kmr44;

--
-- Name: integron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.integron AS
 SELECT feature.feature_id AS integron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'integron'::text);


ALTER TABLE so.integron OWNER TO kmr44;

--
-- Name: intein; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intein AS
 SELECT feature.feature_id AS intein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intein'::text);


ALTER TABLE so.intein OWNER TO kmr44;

--
-- Name: intein_containing; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intein_containing AS
 SELECT feature.feature_id AS intein_containing_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intein_containing'::text);


ALTER TABLE so.intein_containing OWNER TO kmr44;

--
-- Name: interband; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.interband AS
 SELECT feature.feature_id AS interband_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interband'::text);


ALTER TABLE so.interband OWNER TO kmr44;

--
-- Name: interchromosomal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.interchromosomal AS
 SELECT feature.feature_id AS interchromosomal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interchromosomal'::text);


ALTER TABLE so.interchromosomal OWNER TO kmr44;

--
-- Name: interchromosomal_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.interchromosomal_duplication AS
 SELECT feature.feature_id AS interchromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interchromosomal_duplication'::text);


ALTER TABLE so.interchromosomal_duplication OWNER TO kmr44;

--
-- Name: interchromosomal_mutation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.interchromosomal_mutation AS
 SELECT feature.feature_id AS interchromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chromosomal_translocation'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'cyclic_translocation'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text));


ALTER TABLE so.interchromosomal_mutation OWNER TO kmr44;

--
-- Name: interchromosomal_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.interchromosomal_transposition AS
 SELECT feature.feature_id AS interchromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text));


ALTER TABLE so.interchromosomal_transposition OWNER TO kmr44;

--
-- Name: intergenic_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intergenic_region AS
 SELECT feature.feature_id AS intergenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intergenic_region'::text);


ALTER TABLE so.intergenic_region OWNER TO kmr44;

--
-- Name: intergenic_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intergenic_variant AS
 SELECT feature.feature_id AS intergenic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intergenic_variant'::text);


ALTER TABLE so.intergenic_variant OWNER TO kmr44;

--
-- Name: interior_coding_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.interior_coding_exon AS
 SELECT feature.feature_id AS interior_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_coding_exon'::text);


ALTER TABLE so.interior_coding_exon OWNER TO kmr44;

--
-- Name: interior_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.interior_exon AS
 SELECT feature.feature_id AS interior_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_exon'::text);


ALTER TABLE so.interior_exon OWNER TO kmr44;

--
-- Name: interior_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.interior_intron AS
 SELECT feature.feature_id AS interior_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_intron'::text);


ALTER TABLE so.interior_intron OWNER TO kmr44;

--
-- Name: intermediate; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intermediate AS
 SELECT feature.feature_id AS intermediate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intermediate'::text);


ALTER TABLE so.intermediate OWNER TO kmr44;

--
-- Name: intermediate_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intermediate_element AS
 SELECT feature.feature_id AS intermediate_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intermediate_element'::text);


ALTER TABLE so.intermediate_element OWNER TO kmr44;

--
-- Name: internal_eliminated_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.internal_eliminated_sequence AS
 SELECT feature.feature_id AS internal_eliminated_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_eliminated_sequence'::text);


ALTER TABLE so.internal_eliminated_sequence OWNER TO kmr44;

--
-- Name: internal_guide_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.internal_guide_sequence AS
 SELECT feature.feature_id AS internal_guide_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_guide_sequence'::text);


ALTER TABLE so.internal_guide_sequence OWNER TO kmr44;

--
-- Name: internal_ribosome_entry_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.internal_ribosome_entry_site AS
 SELECT feature.feature_id AS internal_ribosome_entry_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text));


ALTER TABLE so.internal_ribosome_entry_site OWNER TO kmr44;

--
-- Name: internal_shine_dalgarno_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.internal_shine_dalgarno_sequence AS
 SELECT feature.feature_id AS internal_shine_dalgarno_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text);


ALTER TABLE so.internal_shine_dalgarno_sequence OWNER TO kmr44;

--
-- Name: internal_transcribed_spacer_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.internal_transcribed_spacer_region AS
 SELECT feature.feature_id AS internal_transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text);


ALTER TABLE so.internal_transcribed_spacer_region OWNER TO kmr44;

--
-- Name: internal_utr; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.internal_utr AS
 SELECT feature.feature_id AS internal_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_UTR'::text);


ALTER TABLE so.internal_utr OWNER TO kmr44;

--
-- Name: intrachromosomal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intrachromosomal AS
 SELECT feature.feature_id AS intrachromosomal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intrachromosomal'::text);


ALTER TABLE so.intrachromosomal OWNER TO kmr44;

--
-- Name: intrachromosomal_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intrachromosomal_duplication AS
 SELECT feature.feature_id AS intrachromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text));


ALTER TABLE so.intrachromosomal_duplication OWNER TO kmr44;

--
-- Name: intrachromosomal_mutation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intrachromosomal_mutation AS
 SELECT feature.feature_id AS intrachromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chromosomal_deletion'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'ring_chromosome'::text) OR ((cvterm.name)::text = 'chromosome_fission'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text) OR ((cvterm.name)::text = 'paracentric_inversion'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'bipartite_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text));


ALTER TABLE so.intrachromosomal_mutation OWNER TO kmr44;

--
-- Name: intrachromosomal_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intrachromosomal_transposition AS
 SELECT feature.feature_id AS intrachromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text));


ALTER TABLE so.intrachromosomal_transposition OWNER TO kmr44;

--
-- Name: intramembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intramembrane_polypeptide_region AS
 SELECT feature.feature_id AS intramembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text));


ALTER TABLE so.intramembrane_polypeptide_region OWNER TO kmr44;

--
-- Name: intrinsically_unstructured_polypeptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intrinsically_unstructured_polypeptide_region AS
 SELECT feature.feature_id AS intrinsically_unstructured_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text);


ALTER TABLE so.intrinsically_unstructured_polypeptide_region OWNER TO kmr44;

--
-- Name: introgressed_chromosome_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.introgressed_chromosome_region AS
 SELECT feature.feature_id AS introgressed_chromosome_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'introgressed_chromosome_region'::text);


ALTER TABLE so.introgressed_chromosome_region OWNER TO kmr44;

--
-- Name: intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intron AS
 SELECT feature.feature_id AS intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text) OR ((cvterm.name)::text = 'three_prime_intron'::text) OR ((cvterm.name)::text = 'twintron'::text) OR ((cvterm.name)::text = 'UTR_intron'::text) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text) OR ((cvterm.name)::text = 'spliceosomal_intron'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text) OR ((cvterm.name)::text = 'group_III_intron'::text) OR ((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text) OR ((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text) OR ((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text) OR ((cvterm.name)::text = 'intron'::text));


ALTER TABLE so.intron OWNER TO kmr44;

--
-- Name: intron_domain; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intron_domain AS
 SELECT feature.feature_id AS intron_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text) OR ((cvterm.name)::text = 'intron_domain'::text));


ALTER TABLE so.intron_domain OWNER TO kmr44;

--
-- Name: intron_gain; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intron_gain AS
 SELECT feature.feature_id AS intron_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intron_gain'::text);


ALTER TABLE so.intron_gain OWNER TO kmr44;

--
-- Name: intron_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intron_variant AS
 SELECT feature.feature_id AS intron_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'splice_site_variant'::text) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text) OR ((cvterm.name)::text = 'intron_variant'::text));


ALTER TABLE so.intron_variant OWNER TO kmr44;

--
-- Name: intronic_regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intronic_regulatory_region AS
 SELECT feature.feature_id AS intronic_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intronic_regulatory_region'::text);


ALTER TABLE so.intronic_regulatory_region OWNER TO kmr44;

--
-- Name: intronic_splice_enhancer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.intronic_splice_enhancer AS
 SELECT feature.feature_id AS intronic_splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intronic_splice_enhancer'::text);


ALTER TABLE so.intronic_splice_enhancer OWNER TO kmr44;

--
-- Name: invalidated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.invalidated AS
 SELECT feature.feature_id AS invalidated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text) OR ((cvterm.name)::text = 'invalidated'::text));


ALTER TABLE so.invalidated OWNER TO kmr44;

--
-- Name: invalidated_by_chimeric_cdna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.invalidated_by_chimeric_cdna AS
 SELECT feature.feature_id AS invalidated_by_chimeric_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text);


ALTER TABLE so.invalidated_by_chimeric_cdna OWNER TO kmr44;

--
-- Name: invalidated_by_genomic_contamination; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.invalidated_by_genomic_contamination AS
 SELECT feature.feature_id AS invalidated_by_genomic_contamination_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text);


ALTER TABLE so.invalidated_by_genomic_contamination OWNER TO kmr44;

--
-- Name: invalidated_by_genomic_polya_primed_cdna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.invalidated_by_genomic_polya_primed_cdna AS
 SELECT feature.feature_id AS invalidated_by_genomic_polya_primed_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text);


ALTER TABLE so.invalidated_by_genomic_polya_primed_cdna OWNER TO kmr44;

--
-- Name: invalidated_by_partial_processing; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.invalidated_by_partial_processing AS
 SELECT feature.feature_id AS invalidated_by_partial_processing_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_partial_processing'::text);


ALTER TABLE so.invalidated_by_partial_processing OWNER TO kmr44;

--
-- Name: invalidated_cdna_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.invalidated_cdna_clone AS
 SELECT feature.feature_id AS invalidated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text));


ALTER TABLE so.invalidated_cdna_clone OWNER TO kmr44;

--
-- Name: inversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion AS
 SELECT feature.feature_id AS inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion'::text);


ALTER TABLE so.inversion OWNER TO kmr44;

--
-- Name: inversion_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_attribute AS
 SELECT feature.feature_id AS inversion_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pericentric'::text) OR ((cvterm.name)::text = 'paracentric'::text) OR ((cvterm.name)::text = 'inversion_attribute'::text));


ALTER TABLE so.inversion_attribute OWNER TO kmr44;

--
-- Name: inversion_breakpoint; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_breakpoint AS
 SELECT feature.feature_id AS inversion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_breakpoint'::text);


ALTER TABLE so.inversion_breakpoint OWNER TO kmr44;

--
-- Name: inversion_cum_translocation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_cum_translocation AS
 SELECT feature.feature_id AS inversion_cum_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text));


ALTER TABLE so.inversion_cum_translocation OWNER TO kmr44;

--
-- Name: inversion_derived_aneuploid_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_derived_aneuploid_chromosome AS
 SELECT feature.feature_id AS inversion_derived_aneuploid_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text);


ALTER TABLE so.inversion_derived_aneuploid_chromosome OWNER TO kmr44;

--
-- Name: inversion_derived_bipartite_deficiency; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_derived_bipartite_deficiency AS
 SELECT feature.feature_id AS inversion_derived_bipartite_deficiency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text);


ALTER TABLE so.inversion_derived_bipartite_deficiency OWNER TO kmr44;

--
-- Name: inversion_derived_bipartite_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_derived_bipartite_duplication AS
 SELECT feature.feature_id AS inversion_derived_bipartite_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text);


ALTER TABLE so.inversion_derived_bipartite_duplication OWNER TO kmr44;

--
-- Name: inversion_derived_deficiency_plus_aneuploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_derived_deficiency_plus_aneuploid AS
 SELECT feature.feature_id AS inversion_derived_deficiency_plus_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text);


ALTER TABLE so.inversion_derived_deficiency_plus_aneuploid OWNER TO kmr44;

--
-- Name: inversion_derived_deficiency_plus_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_derived_deficiency_plus_duplication AS
 SELECT feature.feature_id AS inversion_derived_deficiency_plus_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text);


ALTER TABLE so.inversion_derived_deficiency_plus_duplication OWNER TO kmr44;

--
-- Name: inversion_derived_duplication_plus_aneuploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_derived_duplication_plus_aneuploid AS
 SELECT feature.feature_id AS inversion_derived_duplication_plus_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text);


ALTER TABLE so.inversion_derived_duplication_plus_aneuploid OWNER TO kmr44;

--
-- Name: inversion_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_site AS
 SELECT feature.feature_id AS inversion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text));


ALTER TABLE so.inversion_site OWNER TO kmr44;

--
-- Name: inversion_site_part; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inversion_site_part AS
 SELECT feature.feature_id AS inversion_site_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text) OR ((cvterm.name)::text = 'inversion_site_part'::text));


ALTER TABLE so.inversion_site_part OWNER TO kmr44;

--
-- Name: invert_inter_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.invert_inter_transposition AS
 SELECT feature.feature_id AS invert_inter_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text);


ALTER TABLE so.invert_inter_transposition OWNER TO kmr44;

--
-- Name: invert_intra_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.invert_intra_transposition AS
 SELECT feature.feature_id AS invert_intra_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text);


ALTER TABLE so.invert_intra_transposition OWNER TO kmr44;

--
-- Name: inverted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inverted AS
 SELECT feature.feature_id AS inverted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted'::text);


ALTER TABLE so.inverted OWNER TO kmr44;

--
-- Name: inverted_insertional_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inverted_insertional_duplication AS
 SELECT feature.feature_id AS inverted_insertional_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_insertional_duplication'::text);


ALTER TABLE so.inverted_insertional_duplication OWNER TO kmr44;

--
-- Name: inverted_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inverted_repeat AS
 SELECT feature.feature_id AS inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'inverted_repeat'::text));


ALTER TABLE so.inverted_repeat OWNER TO kmr44;

--
-- Name: inverted_ring_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inverted_ring_chromosome AS
 SELECT feature.feature_id AS inverted_ring_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_ring_chromosome'::text);


ALTER TABLE so.inverted_ring_chromosome OWNER TO kmr44;

--
-- Name: inverted_tandem_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.inverted_tandem_duplication AS
 SELECT feature.feature_id AS inverted_tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_tandem_duplication'::text);


ALTER TABLE so.inverted_tandem_duplication OWNER TO kmr44;

--
-- Name: irlinv_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.irlinv_site AS
 SELECT feature.feature_id AS irlinv_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'IRLinv_site'::text);


ALTER TABLE so.irlinv_site OWNER TO kmr44;

--
-- Name: iron_responsive_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.iron_responsive_element AS
 SELECT feature.feature_id AS iron_responsive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'iron_responsive_element'::text);


ALTER TABLE so.iron_responsive_element OWNER TO kmr44;

--
-- Name: irrinv_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.irrinv_site AS
 SELECT feature.feature_id AS irrinv_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'IRRinv_site'::text);


ALTER TABLE so.irrinv_site OWNER TO kmr44;

--
-- Name: isoleucine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.isoleucine AS
 SELECT feature.feature_id AS isoleucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucine'::text);


ALTER TABLE so.isoleucine OWNER TO kmr44;

--
-- Name: isoleucine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.isoleucine_trna_primary_transcript AS
 SELECT feature.feature_id AS isoleucine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text);


ALTER TABLE so.isoleucine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: isoleucyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.isoleucyl_trna AS
 SELECT feature.feature_id AS isoleucyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucyl_tRNA'::text);


ALTER TABLE so.isoleucyl_trna OWNER TO kmr44;

--
-- Name: isowyosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.isowyosine AS
 SELECT feature.feature_id AS isowyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isowyosine'::text);


ALTER TABLE so.isowyosine OWNER TO kmr44;

--
-- Name: isre; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.isre AS
 SELECT feature.feature_id AS isre_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ISRE'::text);


ALTER TABLE so.isre OWNER TO kmr44;

--
-- Name: j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.j_c_cluster AS
 SELECT feature.feature_id AS j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_C_cluster'::text);


ALTER TABLE so.j_c_cluster OWNER TO kmr44;

--
-- Name: j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.j_cluster AS
 SELECT feature.feature_id AS j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_cluster'::text);


ALTER TABLE so.j_cluster OWNER TO kmr44;

--
-- Name: j_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.j_gene AS
 SELECT feature.feature_id AS j_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_gene'::text);


ALTER TABLE so.j_gene OWNER TO kmr44;

--
-- Name: j_gene_recombination_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.j_gene_recombination_feature AS
 SELECT feature.feature_id AS j_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_gene_recombination_feature'::text);


ALTER TABLE so.j_gene_recombination_feature OWNER TO kmr44;

--
-- Name: j_heptamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.j_heptamer AS
 SELECT feature.feature_id AS j_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_heptamer'::text);


ALTER TABLE so.j_heptamer OWNER TO kmr44;

--
-- Name: j_nonamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.j_nonamer AS
 SELECT feature.feature_id AS j_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_nonamer'::text);


ALTER TABLE so.j_nonamer OWNER TO kmr44;

--
-- Name: j_spacer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.j_spacer AS
 SELECT feature.feature_id AS j_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_spacer'::text);


ALTER TABLE so.j_spacer OWNER TO kmr44;

--
-- Name: junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.junction AS
 SELECT feature.feature_id AS junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'clone_insert_end'::text) OR ((cvterm.name)::text = 'clone_insert_start'::text) OR ((cvterm.name)::text = 'exon_junction'::text) OR ((cvterm.name)::text = 'insertion_site'::text) OR ((cvterm.name)::text = 'polyA_site'::text) OR ((cvterm.name)::text = 'deletion_junction'::text) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text) OR ((cvterm.name)::text = 'splice_junction'::text) OR ((cvterm.name)::text = 'trans_splice_junction'::text) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text) OR ((cvterm.name)::text = 'transposable_element_insertion_site'::text) OR ((cvterm.name)::text = 'inversion_breakpoint'::text) OR ((cvterm.name)::text = 'translocation_breakpoint'::text) OR ((cvterm.name)::text = 'insertion_breakpoint'::text) OR ((cvterm.name)::text = 'deletion_breakpoint'::text) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'junction'::text));


ALTER TABLE so.junction OWNER TO kmr44;

--
-- Name: k_turn_rna_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.k_turn_rna_motif AS
 SELECT feature.feature_id AS k_turn_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'K_turn_RNA_motif'::text);


ALTER TABLE so.k_turn_rna_motif OWNER TO kmr44;

--
-- Name: kinetoplast; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.kinetoplast AS
 SELECT feature.feature_id AS kinetoplast_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'kinetoplast'::text);


ALTER TABLE so.kinetoplast OWNER TO kmr44;

--
-- Name: kinetoplast_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.kinetoplast_gene AS
 SELECT feature.feature_id AS kinetoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'kinetoplast_gene'::text));


ALTER TABLE so.kinetoplast_gene OWNER TO kmr44;

--
-- Name: kozak_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.kozak_sequence AS
 SELECT feature.feature_id AS kozak_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'kozak_sequence'::text);


ALTER TABLE so.kozak_sequence OWNER TO kmr44;

--
-- Name: laevosynaptic_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.laevosynaptic_chromosome AS
 SELECT feature.feature_id AS laevosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'laevosynaptic_chromosome'::text);


ALTER TABLE so.laevosynaptic_chromosome OWNER TO kmr44;

--
-- Name: lambda_vector; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lambda_vector AS
 SELECT feature.feature_id AS lambda_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lambda_vector'::text);


ALTER TABLE so.lambda_vector OWNER TO kmr44;

--
-- Name: large_subunit_rrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.large_subunit_rrna AS
 SELECT feature.feature_id AS large_subunit_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text));


ALTER TABLE so.large_subunit_rrna OWNER TO kmr44;

--
-- Name: left_handed_peptide_helix; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.left_handed_peptide_helix AS
 SELECT feature.feature_id AS left_handed_peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'left_handed_peptide_helix'::text);


ALTER TABLE so.left_handed_peptide_helix OWNER TO kmr44;

--
-- Name: lethal_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lethal_variant AS
 SELECT feature.feature_id AS lethal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lethal_variant'::text);


ALTER TABLE so.lethal_variant OWNER TO kmr44;

--
-- Name: leucine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.leucine AS
 SELECT feature.feature_id AS leucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucine'::text);


ALTER TABLE so.leucine OWNER TO kmr44;

--
-- Name: leucine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.leucine_trna_primary_transcript AS
 SELECT feature.feature_id AS leucine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text);


ALTER TABLE so.leucine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: leucoplast_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.leucoplast_chromosome AS
 SELECT feature.feature_id AS leucoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_chromosome'::text);


ALTER TABLE so.leucoplast_chromosome OWNER TO kmr44;

--
-- Name: leucoplast_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.leucoplast_gene AS
 SELECT feature.feature_id AS leucoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_gene'::text);


ALTER TABLE so.leucoplast_gene OWNER TO kmr44;

--
-- Name: leucoplast_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.leucoplast_sequence AS
 SELECT feature.feature_id AS leucoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_sequence'::text);


ALTER TABLE so.leucoplast_sequence OWNER TO kmr44;

--
-- Name: leucyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.leucyl_trna AS
 SELECT feature.feature_id AS leucyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucyl_tRNA'::text);


ALTER TABLE so.leucyl_trna OWNER TO kmr44;

--
-- Name: level_of_transcript_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.level_of_transcript_variant AS
 SELECT feature.feature_id AS level_of_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'decreased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text));


ALTER TABLE so.level_of_transcript_variant OWNER TO kmr44;

--
-- Name: ligand_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ligand_binding_site AS
 SELECT feature.feature_id AS ligand_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'ligand_binding_site'::text));


ALTER TABLE so.ligand_binding_site OWNER TO kmr44;

--
-- Name: ligation_based_read; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ligation_based_read AS
 SELECT feature.feature_id AS ligation_based_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ligation_based_read'::text);


ALTER TABLE so.ligation_based_read OWNER TO kmr44;

--
-- Name: lincrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lincrna AS
 SELECT feature.feature_id AS lincrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lincRNA'::text);


ALTER TABLE so.lincrna OWNER TO kmr44;

--
-- Name: lincrna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lincrna_gene AS
 SELECT feature.feature_id AS lincrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lincRNA_gene'::text);


ALTER TABLE so.lincrna_gene OWNER TO kmr44;

--
-- Name: line_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.line_element AS
 SELECT feature.feature_id AS line_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LINE_element'::text);


ALTER TABLE so.line_element OWNER TO kmr44;

--
-- Name: linear; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.linear AS
 SELECT feature.feature_id AS linear_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear'::text);


ALTER TABLE so.linear OWNER TO kmr44;

--
-- Name: linear_double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.linear_double_stranded_dna_chromosome AS
 SELECT feature.feature_id AS linear_double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text);


ALTER TABLE so.linear_double_stranded_dna_chromosome OWNER TO kmr44;

--
-- Name: linear_double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.linear_double_stranded_rna_chromosome AS
 SELECT feature.feature_id AS linear_double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text);


ALTER TABLE so.linear_double_stranded_rna_chromosome OWNER TO kmr44;

--
-- Name: linear_single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.linear_single_stranded_dna_chromosome AS
 SELECT feature.feature_id AS linear_single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text);


ALTER TABLE so.linear_single_stranded_dna_chromosome OWNER TO kmr44;

--
-- Name: linear_single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.linear_single_stranded_rna_chromosome AS
 SELECT feature.feature_id AS linear_single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text);


ALTER TABLE so.linear_single_stranded_rna_chromosome OWNER TO kmr44;

--
-- Name: linkage_group; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.linkage_group AS
 SELECT feature.feature_id AS linkage_group_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linkage_group'::text);


ALTER TABLE so.linkage_group OWNER TO kmr44;

--
-- Name: lipoprotein_signal_peptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lipoprotein_signal_peptide AS
 SELECT feature.feature_id AS lipoprotein_signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text);


ALTER TABLE so.lipoprotein_signal_peptide OWNER TO kmr44;

--
-- Name: lna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lna AS
 SELECT feature.feature_id AS lna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LNA'::text);


ALTER TABLE so.lna OWNER TO kmr44;

--
-- Name: lna_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lna_oligo AS
 SELECT feature.feature_id AS lna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LNA_oligo'::text);


ALTER TABLE so.lna_oligo OWNER TO kmr44;

--
-- Name: locus_control_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.locus_control_region AS
 SELECT feature.feature_id AS locus_control_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'locus_control_region'::text);


ALTER TABLE so.locus_control_region OWNER TO kmr44;

--
-- Name: long_terminal_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.long_terminal_repeat AS
 SELECT feature.feature_id AS long_terminal_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_LTR'::text) OR ((cvterm.name)::text = 'three_prime_LTR'::text) OR ((cvterm.name)::text = 'solo_LTR'::text) OR ((cvterm.name)::text = 'long_terminal_repeat'::text));


ALTER TABLE so.long_terminal_repeat OWNER TO kmr44;

--
-- Name: loss_of_heterozygosity; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.loss_of_heterozygosity AS
 SELECT feature.feature_id AS loss_of_heterozygosity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'loss_of_heterozygosity'::text);


ALTER TABLE so.loss_of_heterozygosity OWNER TO kmr44;

--
-- Name: low_complexity; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.low_complexity AS
 SELECT feature.feature_id AS low_complexity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'low_complexity'::text);


ALTER TABLE so.low_complexity OWNER TO kmr44;

--
-- Name: low_complexity_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.low_complexity_region AS
 SELECT feature.feature_id AS low_complexity_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'low_complexity_region'::text);


ALTER TABLE so.low_complexity_region OWNER TO kmr44;

--
-- Name: loxp_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.loxp_site AS
 SELECT feature.feature_id AS loxp_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'loxP_site'::text);


ALTER TABLE so.loxp_site OWNER TO kmr44;

--
-- Name: ltr_component; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ltr_component AS
 SELECT feature.feature_id AS ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U5_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'LTR_component'::text));


ALTER TABLE so.ltr_component OWNER TO kmr44;

--
-- Name: ltr_retrotransposon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ltr_retrotransposon AS
 SELECT feature.feature_id AS ltr_retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LTR_retrotransposon'::text);


ALTER TABLE so.ltr_retrotransposon OWNER TO kmr44;

--
-- Name: lysidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lysidine AS
 SELECT feature.feature_id AS lysidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysidine'::text);


ALTER TABLE so.lysidine OWNER TO kmr44;

--
-- Name: lysine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lysine AS
 SELECT feature.feature_id AS lysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysine'::text);


ALTER TABLE so.lysine OWNER TO kmr44;

--
-- Name: lysine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lysine_trna_primary_transcript AS
 SELECT feature.feature_id AS lysine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text);


ALTER TABLE so.lysine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: lysosomal_localization_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lysosomal_localization_signal AS
 SELECT feature.feature_id AS lysosomal_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysosomal_localization_signal'::text);


ALTER TABLE so.lysosomal_localization_signal OWNER TO kmr44;

--
-- Name: lysyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.lysyl_trna AS
 SELECT feature.feature_id AS lysyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysyl_tRNA'::text);


ALTER TABLE so.lysyl_trna OWNER TO kmr44;

--
-- Name: macronuclear_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.macronuclear_chromosome AS
 SELECT feature.feature_id AS macronuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronuclear_chromosome'::text);


ALTER TABLE so.macronuclear_chromosome OWNER TO kmr44;

--
-- Name: macronuclear_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.macronuclear_sequence AS
 SELECT feature.feature_id AS macronuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronuclear_sequence'::text);


ALTER TABLE so.macronuclear_sequence OWNER TO kmr44;

--
-- Name: macronucleus_destined_segment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.macronucleus_destined_segment AS
 SELECT feature.feature_id AS macronucleus_destined_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronucleus_destined_segment'::text);


ALTER TABLE so.macronucleus_destined_segment OWNER TO kmr44;

--
-- Name: major_tss; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.major_tss AS
 SELECT feature.feature_id AS major_tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'major_TSS'::text);


ALTER TABLE so.major_tss OWNER TO kmr44;

--
-- Name: mannosyl_queuosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mannosyl_queuosine AS
 SELECT feature.feature_id AS mannosyl_queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mannosyl_queuosine'::text);


ALTER TABLE so.mannosyl_queuosine OWNER TO kmr44;

--
-- Name: match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.match AS
 SELECT feature.feature_id AS match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nucleotide_match'::text) OR ((cvterm.name)::text = 'protein_match'::text) OR ((cvterm.name)::text = 'expressed_sequence_match'::text) OR ((cvterm.name)::text = 'cross_genome_match'::text) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text) OR ((cvterm.name)::text = 'primer_match'::text) OR ((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text) OR ((cvterm.name)::text = 'UST_match'::text) OR ((cvterm.name)::text = 'RST_match'::text) OR ((cvterm.name)::text = 'match'::text));


ALTER TABLE so.match OWNER TO kmr44;

--
-- Name: match_part; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.match_part AS
 SELECT feature.feature_id AS match_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'match_part'::text);


ALTER TABLE so.match_part OWNER TO kmr44;

--
-- Name: maternal_uniparental_disomy; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.maternal_uniparental_disomy AS
 SELECT feature.feature_id AS maternal_uniparental_disomy_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternal_uniparental_disomy'::text);


ALTER TABLE so.maternal_uniparental_disomy OWNER TO kmr44;

--
-- Name: maternal_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.maternal_variant AS
 SELECT feature.feature_id AS maternal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternal_variant'::text);


ALTER TABLE so.maternal_variant OWNER TO kmr44;

--
-- Name: maternally_imprinted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.maternally_imprinted AS
 SELECT feature.feature_id AS maternally_imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternally_imprinted'::text);


ALTER TABLE so.maternally_imprinted OWNER TO kmr44;

--
-- Name: maternally_imprinted_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.maternally_imprinted_gene AS
 SELECT feature.feature_id AS maternally_imprinted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternally_imprinted_gene'::text);


ALTER TABLE so.maternally_imprinted_gene OWNER TO kmr44;

--
-- Name: mathematically_defined_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mathematically_defined_repeat AS
 SELECT feature.feature_id AS mathematically_defined_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mathematically_defined_repeat'::text);


ALTER TABLE so.mathematically_defined_repeat OWNER TO kmr44;

--
-- Name: mating_type_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mating_type_region AS
 SELECT feature.feature_id AS mating_type_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mating_type_region'::text);


ALTER TABLE so.mating_type_region OWNER TO kmr44;

--
-- Name: matrix_attachment_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.matrix_attachment_site AS
 SELECT feature.feature_id AS matrix_attachment_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'matrix_attachment_site'::text);


ALTER TABLE so.matrix_attachment_site OWNER TO kmr44;

--
-- Name: mature_mirna_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mature_mirna_variant AS
 SELECT feature.feature_id AS mature_mirna_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mature_miRNA_variant'::text);


ALTER TABLE so.mature_mirna_variant OWNER TO kmr44;

--
-- Name: mature_protein_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mature_protein_region AS
 SELECT feature.feature_id AS mature_protein_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'active_peptide'::text) OR ((cvterm.name)::text = 'mature_protein_region'::text));


ALTER TABLE so.mature_protein_region OWNER TO kmr44;

--
-- Name: mature_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mature_transcript AS
 SELECT feature.feature_id AS mature_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'exemplar_mRNA'::text) OR ((cvterm.name)::text = 'capped_mRNA'::text) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'recoded_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text) OR ((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text) OR ((cvterm.name)::text = 'tRNA'::text) OR ((cvterm.name)::text = 'snRNA'::text) OR ((cvterm.name)::text = 'snoRNA'::text) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text) OR ((cvterm.name)::text = 'RNase_P_RNA'::text) OR ((cvterm.name)::text = 'telomerase_RNA'::text) OR ((cvterm.name)::text = 'vault_RNA'::text) OR ((cvterm.name)::text = 'Y_RNA'::text) OR ((cvterm.name)::text = 'rasiRNA'::text) OR ((cvterm.name)::text = 'SRP_RNA'::text) OR ((cvterm.name)::text = 'guide_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text) OR ((cvterm.name)::text = 'siRNA'::text) OR ((cvterm.name)::text = 'stRNA'::text) OR ((cvterm.name)::text = 'class_II_RNA'::text) OR ((cvterm.name)::text = 'class_I_RNA'::text) OR ((cvterm.name)::text = 'piRNA'::text) OR ((cvterm.name)::text = 'lincRNA'::text) OR ((cvterm.name)::text = 'tasiRNA'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text) OR ((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text) OR ((cvterm.name)::text = 'glycyl_tRNA'::text) OR ((cvterm.name)::text = 'histidyl_tRNA'::text) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text) OR ((cvterm.name)::text = 'leucyl_tRNA'::text) OR ((cvterm.name)::text = 'lysyl_tRNA'::text) OR ((cvterm.name)::text = 'methionyl_tRNA'::text) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text) OR ((cvterm.name)::text = 'prolyl_tRNA'::text) OR ((cvterm.name)::text = 'seryl_tRNA'::text) OR ((cvterm.name)::text = 'threonyl_tRNA'::text) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text) OR ((cvterm.name)::text = 'valyl_tRNA'::text) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text) OR ((cvterm.name)::text = 'arginyl_tRNA'::text) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text) OR ((cvterm.name)::text = 'U4_snRNA'::text) OR ((cvterm.name)::text = 'U4atac_snRNA'::text) OR ((cvterm.name)::text = 'U5_snRNA'::text) OR ((cvterm.name)::text = 'U6_snRNA'::text) OR ((cvterm.name)::text = 'U6atac_snRNA'::text) OR ((cvterm.name)::text = 'U11_snRNA'::text) OR ((cvterm.name)::text = 'U12_snRNA'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text) OR ((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text) OR ((cvterm.name)::text = 'OxyS_RNA'::text) OR ((cvterm.name)::text = 'RprA_RNA'::text) OR ((cvterm.name)::text = 'RRE_RNA'::text) OR ((cvterm.name)::text = 'spot_42_RNA'::text) OR ((cvterm.name)::text = 'tmRNA'::text) OR ((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'mature_transcript'::text));


ALTER TABLE so.mature_transcript OWNER TO kmr44;

--
-- Name: mature_transcript_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mature_transcript_region AS
 SELECT feature.feature_id AS mature_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mRNA_region'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text) OR ((cvterm.name)::text = 'guide_RNA_region'::text) OR ((cvterm.name)::text = 'tRNA_region'::text) OR ((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text) OR ((cvterm.name)::text = 'UTR'::text) OR ((cvterm.name)::text = 'CDS'::text) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text) OR ((cvterm.name)::text = 'UTR_region'::text) OR ((cvterm.name)::text = 'CDS_region'::text) OR ((cvterm.name)::text = 'translational_frameshift'::text) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'kozak_sequence'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text) OR ((cvterm.name)::text = 'internal_UTR'::text) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text) OR ((cvterm.name)::text = 'CDS_independently_known'::text) OR ((cvterm.name)::text = 'CDS_predicted'::text) OR ((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text) OR ((cvterm.name)::text = 'Bruno_response_element'::text) OR ((cvterm.name)::text = 'iron_responsive_element'::text) OR ((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text) OR ((cvterm.name)::text = 'codon'::text) OR ((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text) OR ((cvterm.name)::text = 'stop_codon'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text) OR ((cvterm.name)::text = 'stop_codon_signal'::text) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text) OR ((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text) OR ((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text) OR ((cvterm.name)::text = 'CCA_tail'::text) OR ((cvterm.name)::text = 'DHU_loop'::text) OR ((cvterm.name)::text = 'T_loop'::text) OR ((cvterm.name)::text = 'mature_transcript_region'::text));


ALTER TABLE so.mature_transcript_region OWNER TO kmr44;

--
-- Name: maxicircle; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.maxicircle AS
 SELECT feature.feature_id AS maxicircle_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maxicircle'::text);


ALTER TABLE so.maxicircle OWNER TO kmr44;

--
-- Name: maxicircle_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.maxicircle_gene AS
 SELECT feature.feature_id AS maxicircle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text));


ALTER TABLE so.maxicircle_gene OWNER TO kmr44;

--
-- Name: member_of_regulon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.member_of_regulon AS
 SELECT feature.feature_id AS member_of_regulon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'member_of_regulon'::text);


ALTER TABLE so.member_of_regulon OWNER TO kmr44;

--
-- Name: membrane_peptide_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.membrane_peptide_loop AS
 SELECT feature.feature_id AS membrane_peptide_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'membrane_peptide_loop'::text);


ALTER TABLE so.membrane_peptide_loop OWNER TO kmr44;

--
-- Name: membrane_structure; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.membrane_structure AS
 SELECT feature.feature_id AS membrane_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'membrane_structure'::text);


ALTER TABLE so.membrane_structure OWNER TO kmr44;

--
-- Name: metabolic_island; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.metabolic_island AS
 SELECT feature.feature_id AS metabolic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'metabolic_island'::text);


ALTER TABLE so.metabolic_island OWNER TO kmr44;

--
-- Name: metal_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.metal_binding_site AS
 SELECT feature.feature_id AS metal_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'metal_binding_site'::text));


ALTER TABLE so.metal_binding_site OWNER TO kmr44;

--
-- Name: methionine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methionine AS
 SELECT feature.feature_id AS methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionine'::text);


ALTER TABLE so.methionine OWNER TO kmr44;

--
-- Name: methionine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methionine_trna_primary_transcript AS
 SELECT feature.feature_id AS methionine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text);


ALTER TABLE so.methionine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: methionyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methionyl_trna AS
 SELECT feature.feature_id AS methionyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionyl_tRNA'::text);


ALTER TABLE so.methionyl_trna OWNER TO kmr44;

--
-- Name: methylated_a; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methylated_a AS
 SELECT feature.feature_id AS methylated_a_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylated_A'::text);


ALTER TABLE so.methylated_a OWNER TO kmr44;

--
-- Name: methylated_base_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methylated_base_feature AS
 SELECT feature.feature_id AS methylated_base_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text) OR ((cvterm.name)::text = 'methylated_base_feature'::text));


ALTER TABLE so.methylated_base_feature OWNER TO kmr44;

--
-- Name: methylated_c; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methylated_c AS
 SELECT feature.feature_id AS methylated_c_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylated_C'::text);


ALTER TABLE so.methylated_c OWNER TO kmr44;

--
-- Name: methylation_guide_snorna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methylation_guide_snorna AS
 SELECT feature.feature_id AS methylation_guide_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylation_guide_snoRNA'::text);


ALTER TABLE so.methylation_guide_snorna OWNER TO kmr44;

--
-- Name: methylation_guide_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methylation_guide_snorna_primary_transcript AS
 SELECT feature.feature_id AS methylation_guide_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text);


ALTER TABLE so.methylation_guide_snorna_primary_transcript OWNER TO kmr44;

--
-- Name: methylinosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methylinosine AS
 SELECT feature.feature_id AS methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylinosine'::text);


ALTER TABLE so.methylinosine OWNER TO kmr44;

--
-- Name: methylwyosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.methylwyosine AS
 SELECT feature.feature_id AS methylwyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylwyosine'::text);


ALTER TABLE so.methylwyosine OWNER TO kmr44;

--
-- Name: micf_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.micf_rna AS
 SELECT feature.feature_id AS micf_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MicF_RNA'::text);


ALTER TABLE so.micf_rna OWNER TO kmr44;

--
-- Name: microarray_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.microarray_oligo AS
 SELECT feature.feature_id AS microarray_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'microarray_oligo'::text);


ALTER TABLE so.microarray_oligo OWNER TO kmr44;

--
-- Name: micronuclear_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.micronuclear_chromosome AS
 SELECT feature.feature_id AS micronuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'micronuclear_chromosome'::text);


ALTER TABLE so.micronuclear_chromosome OWNER TO kmr44;

--
-- Name: micronuclear_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.micronuclear_sequence AS
 SELECT feature.feature_id AS micronuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'micronuclear_sequence'::text);


ALTER TABLE so.micronuclear_sequence OWNER TO kmr44;

--
-- Name: microsatellite; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.microsatellite AS
 SELECT feature.feature_id AS microsatellite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'microsatellite'::text));


ALTER TABLE so.microsatellite OWNER TO kmr44;

--
-- Name: mini_exon_donor_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mini_exon_donor_rna AS
 SELECT feature.feature_id AS mini_exon_donor_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mini_exon_donor_RNA'::text);


ALTER TABLE so.mini_exon_donor_rna OWNER TO kmr44;

--
-- Name: mini_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mini_gene AS
 SELECT feature.feature_id AS mini_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'mini_gene'::text));


ALTER TABLE so.mini_gene OWNER TO kmr44;

--
-- Name: minicircle; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minicircle AS
 SELECT feature.feature_id AS minicircle_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minicircle'::text);


ALTER TABLE so.minicircle OWNER TO kmr44;

--
-- Name: minicircle_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minicircle_gene AS
 SELECT feature.feature_id AS minicircle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minicircle_gene'::text);


ALTER TABLE so.minicircle_gene OWNER TO kmr44;

--
-- Name: minisatellite; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minisatellite AS
 SELECT feature.feature_id AS minisatellite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minisatellite'::text);


ALTER TABLE so.minisatellite OWNER TO kmr44;

--
-- Name: minor_tss; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minor_tss AS
 SELECT feature.feature_id AS minor_tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minor_TSS'::text);


ALTER TABLE so.minor_tss OWNER TO kmr44;

--
-- Name: minus_10_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_10_signal AS
 SELECT feature.feature_id AS minus_10_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_10_signal'::text);


ALTER TABLE so.minus_10_signal OWNER TO kmr44;

--
-- Name: minus_12_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_12_signal AS
 SELECT feature.feature_id AS minus_12_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_12_signal'::text);


ALTER TABLE so.minus_12_signal OWNER TO kmr44;

--
-- Name: minus_1_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_1_frameshift AS
 SELECT feature.feature_id AS minus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_frameshift'::text);


ALTER TABLE so.minus_1_frameshift OWNER TO kmr44;

--
-- Name: minus_1_frameshift_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_1_frameshift_variant AS
 SELECT feature.feature_id AS minus_1_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_frameshift_variant'::text);


ALTER TABLE so.minus_1_frameshift_variant OWNER TO kmr44;

--
-- Name: minus_1_translationally_frameshifted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_1_translationally_frameshifted AS
 SELECT feature.feature_id AS minus_1_translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text);


ALTER TABLE so.minus_1_translationally_frameshifted OWNER TO kmr44;

--
-- Name: minus_24_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_24_signal AS
 SELECT feature.feature_id AS minus_24_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_24_signal'::text);


ALTER TABLE so.minus_24_signal OWNER TO kmr44;

--
-- Name: minus_2_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_2_frameshift AS
 SELECT feature.feature_id AS minus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_2_frameshift'::text);


ALTER TABLE so.minus_2_frameshift OWNER TO kmr44;

--
-- Name: minus_2_frameshift_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_2_frameshift_variant AS
 SELECT feature.feature_id AS minus_2_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_2_frameshift_variant'::text);


ALTER TABLE so.minus_2_frameshift_variant OWNER TO kmr44;

--
-- Name: minus_35_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.minus_35_signal AS
 SELECT feature.feature_id AS minus_35_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_35_signal'::text);


ALTER TABLE so.minus_35_signal OWNER TO kmr44;

--
-- Name: mirna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna AS
 SELECT feature.feature_id AS mirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA'::text);


ALTER TABLE so.mirna OWNER TO kmr44;

--
-- Name: mirna_antiguide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna_antiguide AS
 SELECT feature.feature_id AS mirna_antiguide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_antiguide'::text);


ALTER TABLE so.mirna_antiguide OWNER TO kmr44;

--
-- Name: mirna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna_encoding AS
 SELECT feature.feature_id AS mirna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_encoding'::text);


ALTER TABLE so.mirna_encoding OWNER TO kmr44;

--
-- Name: mirna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna_gene AS
 SELECT feature.feature_id AS mirna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_gene'::text);


ALTER TABLE so.mirna_gene OWNER TO kmr44;

--
-- Name: mirna_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna_loop AS
 SELECT feature.feature_id AS mirna_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_loop'::text);


ALTER TABLE so.mirna_loop OWNER TO kmr44;

--
-- Name: mirna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna_primary_transcript AS
 SELECT feature.feature_id AS mirna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text));


ALTER TABLE so.mirna_primary_transcript OWNER TO kmr44;

--
-- Name: mirna_primary_transcript_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna_primary_transcript_region AS
 SELECT feature.feature_id AS mirna_primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text) OR ((cvterm.name)::text = 'miRNA_loop'::text) OR ((cvterm.name)::text = 'miRNA_antiguide'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text));


ALTER TABLE so.mirna_primary_transcript_region OWNER TO kmr44;

--
-- Name: mirna_stem; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna_stem AS
 SELECT feature.feature_id AS mirna_stem_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_stem'::text);


ALTER TABLE so.mirna_stem OWNER TO kmr44;

--
-- Name: mirna_target_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirna_target_site AS
 SELECT feature.feature_id AS mirna_target_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_target_site'::text);


ALTER TABLE so.mirna_target_site OWNER TO kmr44;

--
-- Name: mirtron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mirtron AS
 SELECT feature.feature_id AS mirtron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mirtron'::text);


ALTER TABLE so.mirtron OWNER TO kmr44;

--
-- Name: missense_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.missense_codon AS
 SELECT feature.feature_id AS missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'missense_codon'::text));


ALTER TABLE so.missense_codon OWNER TO kmr44;

--
-- Name: mite; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mite AS
 SELECT feature.feature_id AS mite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MITE'::text);


ALTER TABLE so.mite OWNER TO kmr44;

--
-- Name: mitochondrial_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mitochondrial_chromosome AS
 SELECT feature.feature_id AS mitochondrial_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mitochondrial_chromosome'::text);


ALTER TABLE so.mitochondrial_chromosome OWNER TO kmr44;

--
-- Name: mitochondrial_dna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mitochondrial_dna AS
 SELECT feature.feature_id AS mitochondrial_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mitochondrial_DNA'::text);


ALTER TABLE so.mitochondrial_dna OWNER TO kmr44;

--
-- Name: mitochondrial_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mitochondrial_sequence AS
 SELECT feature.feature_id AS mitochondrial_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mitochondrial_DNA'::text) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text));


ALTER TABLE so.mitochondrial_sequence OWNER TO kmr44;

--
-- Name: mnp; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mnp AS
 SELECT feature.feature_id AS mnp_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MNP'::text);


ALTER TABLE so.mnp OWNER TO kmr44;

--
-- Name: mobile; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mobile AS
 SELECT feature.feature_id AS mobile_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mobile'::text);


ALTER TABLE so.mobile OWNER TO kmr44;

--
-- Name: mobile_genetic_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mobile_genetic_element AS
 SELECT feature.feature_id AS mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'transposable_element'::text) OR ((cvterm.name)::text = 'proviral_region'::text) OR ((cvterm.name)::text = 'integron'::text) OR ((cvterm.name)::text = 'genomic_island'::text) OR ((cvterm.name)::text = 'integrated_plasmid'::text) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text) OR ((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'nested_transposon'::text) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text) OR ((cvterm.name)::text = 'conjugative_transposon'::text) OR ((cvterm.name)::text = 'helitron'::text) OR ((cvterm.name)::text = 'p_element'::text) OR ((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text) OR ((cvterm.name)::text = 'polinton'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text) OR ((cvterm.name)::text = 'adaptive_island'::text) OR ((cvterm.name)::text = 'symbiosis_island'::text) OR ((cvterm.name)::text = 'cryptic_prophage'::text) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text) OR ((cvterm.name)::text = 'mobile_genetic_element'::text));


ALTER TABLE so.mobile_genetic_element OWNER TO kmr44;

--
-- Name: mobile_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mobile_intron AS
 SELECT feature.feature_id AS mobile_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mobile_intron'::text);


ALTER TABLE so.mobile_intron OWNER TO kmr44;

--
-- Name: modified_adenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_adenosine AS
 SELECT feature.feature_id AS modified_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text) OR ((cvterm.name)::text = 'modified_adenosine'::text));


ALTER TABLE so.modified_adenosine OWNER TO kmr44;

--
-- Name: modified_amino_acid_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_amino_acid_feature AS
 SELECT feature.feature_id AS modified_amino_acid_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'modified_glycine'::text) OR ((cvterm.name)::text = 'modified_L_alanine'::text) OR ((cvterm.name)::text = 'modified_L_asparagine'::text) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text) OR ((cvterm.name)::text = 'modified_L_cysteine'::text) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text) OR ((cvterm.name)::text = 'modified_L_threonine'::text) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text) OR ((cvterm.name)::text = 'modified_L_glutamine'::text) OR ((cvterm.name)::text = 'modified_L_methionine'::text) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text) OR ((cvterm.name)::text = 'modified_L_histidine'::text) OR ((cvterm.name)::text = 'modified_L_serine'::text) OR ((cvterm.name)::text = 'modified_L_lysine'::text) OR ((cvterm.name)::text = 'modified_L_leucine'::text) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text) OR ((cvterm.name)::text = 'modified_L_valine'::text) OR ((cvterm.name)::text = 'modified_L_proline'::text) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text) OR ((cvterm.name)::text = 'modified_L_arginine'::text) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text));


ALTER TABLE so.modified_amino_acid_feature OWNER TO kmr44;

--
-- Name: modified_base; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_base AS
 SELECT feature.feature_id AS modified_base_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'methylated_base_feature'::text) OR ((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text) OR ((cvterm.name)::text = 'modified_base'::text));


ALTER TABLE so.modified_base OWNER TO kmr44;

--
-- Name: modified_cytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_cytidine AS
 SELECT feature.feature_id AS modified_cytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'two_thiocytidine'::text) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text) OR ((cvterm.name)::text = 'five_formylcytidine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'lysidine'::text) OR ((cvterm.name)::text = 'N4_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text) OR ((cvterm.name)::text = 'modified_cytidine'::text));


ALTER TABLE so.modified_cytidine OWNER TO kmr44;

--
-- Name: modified_glycine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_glycine AS
 SELECT feature.feature_id AS modified_glycine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_glycine'::text);


ALTER TABLE so.modified_glycine OWNER TO kmr44;

--
-- Name: modified_guanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_guanosine AS
 SELECT feature.feature_id AS modified_guanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_methylguanosine'::text) OR ((cvterm.name)::text = 'seven_methylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text) OR ((cvterm.name)::text = 'wybutosine'::text) OR ((cvterm.name)::text = 'peroxywybutosine'::text) OR ((cvterm.name)::text = 'hydroxywybutosine'::text) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text) OR ((cvterm.name)::text = 'wyosine'::text) OR ((cvterm.name)::text = 'methylwyosine'::text) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'four_demethylwyosine'::text) OR ((cvterm.name)::text = 'isowyosine'::text) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'archaeosine'::text) OR ((cvterm.name)::text = 'modified_guanosine'::text));


ALTER TABLE so.modified_guanosine OWNER TO kmr44;

--
-- Name: modified_inosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_inosine AS
 SELECT feature.feature_id AS modified_inosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text) OR ((cvterm.name)::text = 'modified_inosine'::text));


ALTER TABLE so.modified_inosine OWNER TO kmr44;

--
-- Name: modified_l_alanine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_alanine AS
 SELECT feature.feature_id AS modified_l_alanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_alanine'::text);


ALTER TABLE so.modified_l_alanine OWNER TO kmr44;

--
-- Name: modified_l_arginine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_arginine AS
 SELECT feature.feature_id AS modified_l_arginine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_arginine'::text);


ALTER TABLE so.modified_l_arginine OWNER TO kmr44;

--
-- Name: modified_l_asparagine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_asparagine AS
 SELECT feature.feature_id AS modified_l_asparagine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_asparagine'::text);


ALTER TABLE so.modified_l_asparagine OWNER TO kmr44;

--
-- Name: modified_l_aspartic_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_aspartic_acid AS
 SELECT feature.feature_id AS modified_l_aspartic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_aspartic_acid'::text);


ALTER TABLE so.modified_l_aspartic_acid OWNER TO kmr44;

--
-- Name: modified_l_cysteine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_cysteine AS
 SELECT feature.feature_id AS modified_l_cysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_cysteine'::text);


ALTER TABLE so.modified_l_cysteine OWNER TO kmr44;

--
-- Name: modified_l_glutamic_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_glutamic_acid AS
 SELECT feature.feature_id AS modified_l_glutamic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_glutamic_acid'::text);


ALTER TABLE so.modified_l_glutamic_acid OWNER TO kmr44;

--
-- Name: modified_l_glutamine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_glutamine AS
 SELECT feature.feature_id AS modified_l_glutamine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_glutamine'::text);


ALTER TABLE so.modified_l_glutamine OWNER TO kmr44;

--
-- Name: modified_l_histidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_histidine AS
 SELECT feature.feature_id AS modified_l_histidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_histidine'::text);


ALTER TABLE so.modified_l_histidine OWNER TO kmr44;

--
-- Name: modified_l_isoleucine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_isoleucine AS
 SELECT feature.feature_id AS modified_l_isoleucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_isoleucine'::text);


ALTER TABLE so.modified_l_isoleucine OWNER TO kmr44;

--
-- Name: modified_l_leucine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_leucine AS
 SELECT feature.feature_id AS modified_l_leucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_leucine'::text);


ALTER TABLE so.modified_l_leucine OWNER TO kmr44;

--
-- Name: modified_l_lysine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_lysine AS
 SELECT feature.feature_id AS modified_l_lysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_lysine'::text);


ALTER TABLE so.modified_l_lysine OWNER TO kmr44;

--
-- Name: modified_l_methionine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_methionine AS
 SELECT feature.feature_id AS modified_l_methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_methionine'::text);


ALTER TABLE so.modified_l_methionine OWNER TO kmr44;

--
-- Name: modified_l_phenylalanine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_phenylalanine AS
 SELECT feature.feature_id AS modified_l_phenylalanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_phenylalanine'::text);


ALTER TABLE so.modified_l_phenylalanine OWNER TO kmr44;

--
-- Name: modified_l_proline; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_proline AS
 SELECT feature.feature_id AS modified_l_proline_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_proline'::text);


ALTER TABLE so.modified_l_proline OWNER TO kmr44;

--
-- Name: modified_l_selenocysteine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_selenocysteine AS
 SELECT feature.feature_id AS modified_l_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_selenocysteine'::text);


ALTER TABLE so.modified_l_selenocysteine OWNER TO kmr44;

--
-- Name: modified_l_serine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_serine AS
 SELECT feature.feature_id AS modified_l_serine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_serine'::text);


ALTER TABLE so.modified_l_serine OWNER TO kmr44;

--
-- Name: modified_l_threonine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_threonine AS
 SELECT feature.feature_id AS modified_l_threonine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_threonine'::text);


ALTER TABLE so.modified_l_threonine OWNER TO kmr44;

--
-- Name: modified_l_tryptophan; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_tryptophan AS
 SELECT feature.feature_id AS modified_l_tryptophan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_tryptophan'::text);


ALTER TABLE so.modified_l_tryptophan OWNER TO kmr44;

--
-- Name: modified_l_tyrosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_tyrosine AS
 SELECT feature.feature_id AS modified_l_tyrosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_tyrosine'::text);


ALTER TABLE so.modified_l_tyrosine OWNER TO kmr44;

--
-- Name: modified_l_valine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_l_valine AS
 SELECT feature.feature_id AS modified_l_valine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_valine'::text);


ALTER TABLE so.modified_l_valine OWNER TO kmr44;

--
-- Name: modified_rna_base_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_rna_base_feature AS
 SELECT feature.feature_id AS modified_rna_base_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inosine'::text) OR ((cvterm.name)::text = 'seven_methylguanine'::text) OR ((cvterm.name)::text = 'ribothymidine'::text) OR ((cvterm.name)::text = 'modified_adenosine'::text) OR ((cvterm.name)::text = 'modified_cytidine'::text) OR ((cvterm.name)::text = 'modified_guanosine'::text) OR ((cvterm.name)::text = 'modified_uridine'::text) OR ((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text) OR ((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text) OR ((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'two_thiocytidine'::text) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text) OR ((cvterm.name)::text = 'five_formylcytidine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'lysidine'::text) OR ((cvterm.name)::text = 'N4_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_methylguanosine'::text) OR ((cvterm.name)::text = 'seven_methylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text) OR ((cvterm.name)::text = 'wybutosine'::text) OR ((cvterm.name)::text = 'peroxywybutosine'::text) OR ((cvterm.name)::text = 'hydroxywybutosine'::text) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text) OR ((cvterm.name)::text = 'wyosine'::text) OR ((cvterm.name)::text = 'methylwyosine'::text) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'four_demethylwyosine'::text) OR ((cvterm.name)::text = 'isowyosine'::text) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'archaeosine'::text) OR ((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text) OR ((cvterm.name)::text = 'five_methyluridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_thiouridine'::text) OR ((cvterm.name)::text = 'four_thiouridine'::text) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text) OR ((cvterm.name)::text = 'five_methoxyuridine'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'three_methyluridine'::text) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text));


ALTER TABLE so.modified_rna_base_feature OWNER TO kmr44;

--
-- Name: modified_uridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.modified_uridine AS
 SELECT feature.feature_id AS modified_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text) OR ((cvterm.name)::text = 'five_methyluridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_thiouridine'::text) OR ((cvterm.name)::text = 'four_thiouridine'::text) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text) OR ((cvterm.name)::text = 'five_methoxyuridine'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'three_methyluridine'::text) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'modified_uridine'::text));


ALTER TABLE so.modified_uridine OWNER TO kmr44;

--
-- Name: molecular_contact_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.molecular_contact_region AS
 SELECT feature.feature_id AS molecular_contact_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'molecular_contact_region'::text));


ALTER TABLE so.molecular_contact_region OWNER TO kmr44;

--
-- Name: monocistronic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.monocistronic AS
 SELECT feature.feature_id AS monocistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic'::text);


ALTER TABLE so.monocistronic OWNER TO kmr44;

--
-- Name: monocistronic_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.monocistronic_mrna AS
 SELECT feature.feature_id AS monocistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic_mRNA'::text);


ALTER TABLE so.monocistronic_mrna OWNER TO kmr44;

--
-- Name: monocistronic_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.monocistronic_primary_transcript AS
 SELECT feature.feature_id AS monocistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic_primary_transcript'::text);


ALTER TABLE so.monocistronic_primary_transcript OWNER TO kmr44;

--
-- Name: monocistronic_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.monocistronic_transcript AS
 SELECT feature.feature_id AS monocistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'monocistronic_transcript'::text));


ALTER TABLE so.monocistronic_transcript OWNER TO kmr44;

--
-- Name: morpholino_backbone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.morpholino_backbone AS
 SELECT feature.feature_id AS morpholino_backbone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'morpholino_backbone'::text);


ALTER TABLE so.morpholino_backbone OWNER TO kmr44;

--
-- Name: morpholino_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.morpholino_oligo AS
 SELECT feature.feature_id AS morpholino_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'morpholino_oligo'::text);


ALTER TABLE so.morpholino_oligo OWNER TO kmr44;

--
-- Name: mrna_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_attribute AS
 SELECT feature.feature_id AS mrna_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polyadenylated'::text) OR ((cvterm.name)::text = 'exemplar'::text) OR ((cvterm.name)::text = 'frameshift'::text) OR ((cvterm.name)::text = 'recoded'::text) OR ((cvterm.name)::text = 'minus_1_frameshift'::text) OR ((cvterm.name)::text = 'minus_2_frameshift'::text) OR ((cvterm.name)::text = 'plus_1_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_framshift'::text) OR ((cvterm.name)::text = 'codon_redefined'::text) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'translationally_frameshifted'::text) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'mRNA_attribute'::text));


ALTER TABLE so.mrna_attribute OWNER TO kmr44;

--
-- Name: mrna_recoded_by_codon_redefinition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_recoded_by_codon_redefinition AS
 SELECT feature.feature_id AS mrna_recoded_by_codon_redefinition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text);


ALTER TABLE so.mrna_recoded_by_codon_redefinition OWNER TO kmr44;

--
-- Name: mrna_recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_recoded_by_translational_bypass AS
 SELECT feature.feature_id AS mrna_recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text);


ALTER TABLE so.mrna_recoded_by_translational_bypass OWNER TO kmr44;

--
-- Name: mrna_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_region AS
 SELECT feature.feature_id AS mrna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text) OR ((cvterm.name)::text = 'UTR'::text) OR ((cvterm.name)::text = 'CDS'::text) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text) OR ((cvterm.name)::text = 'UTR_region'::text) OR ((cvterm.name)::text = 'CDS_region'::text) OR ((cvterm.name)::text = 'translational_frameshift'::text) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'kozak_sequence'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text) OR ((cvterm.name)::text = 'internal_UTR'::text) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text) OR ((cvterm.name)::text = 'CDS_independently_known'::text) OR ((cvterm.name)::text = 'CDS_predicted'::text) OR ((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text) OR ((cvterm.name)::text = 'Bruno_response_element'::text) OR ((cvterm.name)::text = 'iron_responsive_element'::text) OR ((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text) OR ((cvterm.name)::text = 'codon'::text) OR ((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text) OR ((cvterm.name)::text = 'stop_codon'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text) OR ((cvterm.name)::text = 'stop_codon_signal'::text) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'mRNA_region'::text));


ALTER TABLE so.mrna_region OWNER TO kmr44;

--
-- Name: mrna_with_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_with_frameshift AS
 SELECT feature.feature_id AS mrna_with_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text));


ALTER TABLE so.mrna_with_frameshift OWNER TO kmr44;

--
-- Name: mrna_with_minus_1_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_with_minus_1_frameshift AS
 SELECT feature.feature_id AS mrna_with_minus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text);


ALTER TABLE so.mrna_with_minus_1_frameshift OWNER TO kmr44;

--
-- Name: mrna_with_minus_2_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_with_minus_2_frameshift AS
 SELECT feature.feature_id AS mrna_with_minus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text);


ALTER TABLE so.mrna_with_minus_2_frameshift OWNER TO kmr44;

--
-- Name: mrna_with_plus_1_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_with_plus_1_frameshift AS
 SELECT feature.feature_id AS mrna_with_plus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text);


ALTER TABLE so.mrna_with_plus_1_frameshift OWNER TO kmr44;

--
-- Name: mrna_with_plus_2_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mrna_with_plus_2_frameshift AS
 SELECT feature.feature_id AS mrna_with_plus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text);


ALTER TABLE so.mrna_with_plus_2_frameshift OWNER TO kmr44;

--
-- Name: mt_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mt_gene AS
 SELECT feature.feature_id AS mt_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'kinetoplast_gene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'mt_gene'::text));


ALTER TABLE so.mt_gene OWNER TO kmr44;

--
-- Name: mte; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mte AS
 SELECT feature.feature_id AS mte_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MTE'::text);


ALTER TABLE so.mte OWNER TO kmr44;

--
-- Name: mutated_variant_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.mutated_variant_site AS
 SELECT feature.feature_id AS mutated_variant_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mutated_variant_site'::text);


ALTER TABLE so.mutated_variant_site OWNER TO kmr44;

--
-- Name: n2_2_prime_o_dimethylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n2_2_prime_o_dimethylguanosine AS
 SELECT feature.feature_id AS n2_2_prime_o_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text);


ALTER TABLE so.n2_2_prime_o_dimethylguanosine OWNER TO kmr44;

--
-- Name: n2_7_2prirme_o_trimethylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n2_7_2prirme_o_trimethylguanosine AS
 SELECT feature.feature_id AS n2_7_2prirme_o_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text);


ALTER TABLE so.n2_7_2prirme_o_trimethylguanosine OWNER TO kmr44;

--
-- Name: n2_7_dimethylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n2_7_dimethylguanosine AS
 SELECT feature.feature_id AS n2_7_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text);


ALTER TABLE so.n2_7_dimethylguanosine OWNER TO kmr44;

--
-- Name: n2_methylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n2_methylguanosine AS
 SELECT feature.feature_id AS n2_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_methylguanosine'::text);


ALTER TABLE so.n2_methylguanosine OWNER TO kmr44;

--
-- Name: n2_n2_2_prime_o_trimethylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n2_n2_2_prime_o_trimethylguanosine AS
 SELECT feature.feature_id AS n2_n2_2_prime_o_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text);


ALTER TABLE so.n2_n2_2_prime_o_trimethylguanosine OWNER TO kmr44;

--
-- Name: n2_n2_7_trimethylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n2_n2_7_trimethylguanosine AS
 SELECT feature.feature_id AS n2_n2_7_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text);


ALTER TABLE so.n2_n2_7_trimethylguanosine OWNER TO kmr44;

--
-- Name: n2_n2_dimethylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n2_n2_dimethylguanosine AS
 SELECT feature.feature_id AS n2_n2_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text);


ALTER TABLE so.n2_n2_dimethylguanosine OWNER TO kmr44;

--
-- Name: n4_2_prime_o_dimethylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n4_2_prime_o_dimethylcytidine AS
 SELECT feature.feature_id AS n4_2_prime_o_dimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text);


ALTER TABLE so.n4_2_prime_o_dimethylcytidine OWNER TO kmr44;

--
-- Name: n4_acetyl_2_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n4_acetyl_2_prime_o_methylcytidine AS
 SELECT feature.feature_id AS n4_acetyl_2_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text);


ALTER TABLE so.n4_acetyl_2_prime_o_methylcytidine OWNER TO kmr44;

--
-- Name: n4_acetylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n4_acetylcytidine AS
 SELECT feature.feature_id AS n4_acetylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_acetylcytidine'::text);


ALTER TABLE so.n4_acetylcytidine OWNER TO kmr44;

--
-- Name: n4_methylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n4_methylcytidine AS
 SELECT feature.feature_id AS n4_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_methylcytidine'::text);


ALTER TABLE so.n4_methylcytidine OWNER TO kmr44;

--
-- Name: n4_n4_2_prime_o_trimethylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n4_n4_2_prime_o_trimethylcytidine AS
 SELECT feature.feature_id AS n4_n4_2_prime_o_trimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text);


ALTER TABLE so.n4_n4_2_prime_o_trimethylcytidine OWNER TO kmr44;

--
-- Name: n6_2_prime_o_dimethyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_2_prime_o_dimethyladenosine AS
 SELECT feature.feature_id AS n6_2_prime_o_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text);


ALTER TABLE so.n6_2_prime_o_dimethyladenosine OWNER TO kmr44;

--
-- Name: n6_acetyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_acetyladenosine AS
 SELECT feature.feature_id AS n6_acetyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_acetyladenosine'::text);


ALTER TABLE so.n6_acetyladenosine OWNER TO kmr44;

--
-- Name: n6_cis_hydroxyisopentenyl_adenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_cis_hydroxyisopentenyl_adenosine AS
 SELECT feature.feature_id AS n6_cis_hydroxyisopentenyl_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text);


ALTER TABLE so.n6_cis_hydroxyisopentenyl_adenosine OWNER TO kmr44;

--
-- Name: n6_glycinylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_glycinylcarbamoyladenosine AS
 SELECT feature.feature_id AS n6_glycinylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text);


ALTER TABLE so.n6_glycinylcarbamoyladenosine OWNER TO kmr44;

--
-- Name: n6_hydroxynorvalylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_hydroxynorvalylcarbamoyladenosine AS
 SELECT feature.feature_id AS n6_hydroxynorvalylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text);


ALTER TABLE so.n6_hydroxynorvalylcarbamoyladenosine OWNER TO kmr44;

--
-- Name: n6_isopentenyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_isopentenyladenosine AS
 SELECT feature.feature_id AS n6_isopentenyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_isopentenyladenosine'::text);


ALTER TABLE so.n6_isopentenyladenosine OWNER TO kmr44;

--
-- Name: n6_methyl_n6_threonylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_methyl_n6_threonylcarbamoyladenosine AS
 SELECT feature.feature_id AS n6_methyl_n6_threonylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text);


ALTER TABLE so.n6_methyl_n6_threonylcarbamoyladenosine OWNER TO kmr44;

--
-- Name: n6_methyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_methyladenosine AS
 SELECT feature.feature_id AS n6_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_methyladenosine'::text);


ALTER TABLE so.n6_methyladenosine OWNER TO kmr44;

--
-- Name: n6_n6_2_prime_o_trimethyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_n6_2_prime_o_trimethyladenosine AS
 SELECT feature.feature_id AS n6_n6_2_prime_o_trimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text);


ALTER TABLE so.n6_n6_2_prime_o_trimethyladenosine OWNER TO kmr44;

--
-- Name: n6_n6_dimethyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_n6_dimethyladenosine AS
 SELECT feature.feature_id AS n6_n6_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text);


ALTER TABLE so.n6_n6_dimethyladenosine OWNER TO kmr44;

--
-- Name: n6_threonylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n6_threonylcarbamoyladenosine AS
 SELECT feature.feature_id AS n6_threonylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text);


ALTER TABLE so.n6_threonylcarbamoyladenosine OWNER TO kmr44;

--
-- Name: n_terminal_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.n_terminal_region AS
 SELECT feature.feature_id AS n_terminal_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'n_terminal_region'::text);


ALTER TABLE so.n_terminal_region OWNER TO kmr44;

--
-- Name: natural_plasmid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.natural_plasmid AS
 SELECT feature.feature_id AS natural_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_plasmid'::text);


ALTER TABLE so.natural_plasmid OWNER TO kmr44;

--
-- Name: natural_transposable_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.natural_transposable_element AS
 SELECT feature.feature_id AS natural_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_transposable_element'::text);


ALTER TABLE so.natural_transposable_element OWNER TO kmr44;

--
-- Name: natural_variant_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.natural_variant_site AS
 SELECT feature.feature_id AS natural_variant_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_variant_site'::text);


ALTER TABLE so.natural_variant_site OWNER TO kmr44;

--
-- Name: nc_conserved_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nc_conserved_region AS
 SELECT feature.feature_id AS nc_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nc_conserved_region'::text);


ALTER TABLE so.nc_conserved_region OWNER TO kmr44;

--
-- Name: nc_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nc_primary_transcript AS
 SELECT feature.feature_id AS nc_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text));


ALTER TABLE so.nc_primary_transcript OWNER TO kmr44;

--
-- Name: nc_transcript_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nc_transcript_variant AS
 SELECT feature.feature_id AS nc_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mature_miRNA_variant'::text) OR ((cvterm.name)::text = 'nc_transcript_variant'::text));


ALTER TABLE so.nc_transcript_variant OWNER TO kmr44;

--
-- Name: ncrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ncrna AS
 SELECT feature.feature_id AS ncrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text) OR ((cvterm.name)::text = 'tRNA'::text) OR ((cvterm.name)::text = 'snRNA'::text) OR ((cvterm.name)::text = 'snoRNA'::text) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text) OR ((cvterm.name)::text = 'RNase_P_RNA'::text) OR ((cvterm.name)::text = 'telomerase_RNA'::text) OR ((cvterm.name)::text = 'vault_RNA'::text) OR ((cvterm.name)::text = 'Y_RNA'::text) OR ((cvterm.name)::text = 'rasiRNA'::text) OR ((cvterm.name)::text = 'SRP_RNA'::text) OR ((cvterm.name)::text = 'guide_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text) OR ((cvterm.name)::text = 'siRNA'::text) OR ((cvterm.name)::text = 'stRNA'::text) OR ((cvterm.name)::text = 'class_II_RNA'::text) OR ((cvterm.name)::text = 'class_I_RNA'::text) OR ((cvterm.name)::text = 'piRNA'::text) OR ((cvterm.name)::text = 'lincRNA'::text) OR ((cvterm.name)::text = 'tasiRNA'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text) OR ((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text) OR ((cvterm.name)::text = 'glycyl_tRNA'::text) OR ((cvterm.name)::text = 'histidyl_tRNA'::text) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text) OR ((cvterm.name)::text = 'leucyl_tRNA'::text) OR ((cvterm.name)::text = 'lysyl_tRNA'::text) OR ((cvterm.name)::text = 'methionyl_tRNA'::text) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text) OR ((cvterm.name)::text = 'prolyl_tRNA'::text) OR ((cvterm.name)::text = 'seryl_tRNA'::text) OR ((cvterm.name)::text = 'threonyl_tRNA'::text) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text) OR ((cvterm.name)::text = 'valyl_tRNA'::text) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text) OR ((cvterm.name)::text = 'arginyl_tRNA'::text) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text) OR ((cvterm.name)::text = 'U4_snRNA'::text) OR ((cvterm.name)::text = 'U4atac_snRNA'::text) OR ((cvterm.name)::text = 'U5_snRNA'::text) OR ((cvterm.name)::text = 'U6_snRNA'::text) OR ((cvterm.name)::text = 'U6atac_snRNA'::text) OR ((cvterm.name)::text = 'U11_snRNA'::text) OR ((cvterm.name)::text = 'U12_snRNA'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text) OR ((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text) OR ((cvterm.name)::text = 'OxyS_RNA'::text) OR ((cvterm.name)::text = 'RprA_RNA'::text) OR ((cvterm.name)::text = 'RRE_RNA'::text) OR ((cvterm.name)::text = 'spot_42_RNA'::text) OR ((cvterm.name)::text = 'tmRNA'::text) OR ((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text));


ALTER TABLE so.ncrna OWNER TO kmr44;

--
-- Name: ncrna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ncrna_gene AS
 SELECT feature.feature_id AS ncrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gRNA_gene'::text) OR ((cvterm.name)::text = 'miRNA_gene'::text) OR ((cvterm.name)::text = 'scRNA_gene'::text) OR ((cvterm.name)::text = 'snoRNA_gene'::text) OR ((cvterm.name)::text = 'snRNA_gene'::text) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text) OR ((cvterm.name)::text = 'stRNA_gene'::text) OR ((cvterm.name)::text = 'tmRNA_gene'::text) OR ((cvterm.name)::text = 'tRNA_gene'::text) OR ((cvterm.name)::text = 'rRNA_gene'::text) OR ((cvterm.name)::text = 'piRNA_gene'::text) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text) OR ((cvterm.name)::text = 'lincRNA_gene'::text) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text) OR ((cvterm.name)::text = 'ncRNA_gene'::text));


ALTER TABLE so.ncrna_gene OWNER TO kmr44;

--
-- Name: ndm2_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ndm2_motif AS
 SELECT feature.feature_id AS ndm2_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NDM2_motif'::text);


ALTER TABLE so.ndm2_motif OWNER TO kmr44;

--
-- Name: ndm3_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ndm3_motif AS
 SELECT feature.feature_id AS ndm3_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NDM3_motif'::text);


ALTER TABLE so.ndm3_motif OWNER TO kmr44;

--
-- Name: negative_sense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.negative_sense_ssrna_viral_sequence AS
 SELECT feature.feature_id AS negative_sense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text);


ALTER TABLE so.negative_sense_ssrna_viral_sequence OWNER TO kmr44;

--
-- Name: negatively_autoregulated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.negatively_autoregulated AS
 SELECT feature.feature_id AS negatively_autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negatively_autoregulated'::text);


ALTER TABLE so.negatively_autoregulated OWNER TO kmr44;

--
-- Name: negatively_autoregulated_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.negatively_autoregulated_gene AS
 SELECT feature.feature_id AS negatively_autoregulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negatively_autoregulated_gene'::text);


ALTER TABLE so.negatively_autoregulated_gene OWNER TO kmr44;

--
-- Name: nested_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nested_repeat AS
 SELECT feature.feature_id AS nested_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nested_tandem_repeat'::text) OR ((cvterm.name)::text = 'nested_repeat'::text));


ALTER TABLE so.nested_repeat OWNER TO kmr44;

--
-- Name: nested_tandem_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nested_tandem_repeat AS
 SELECT feature.feature_id AS nested_tandem_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nested_tandem_repeat'::text);


ALTER TABLE so.nested_tandem_repeat OWNER TO kmr44;

--
-- Name: nested_transposon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nested_transposon AS
 SELECT feature.feature_id AS nested_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nested_transposon'::text);


ALTER TABLE so.nested_transposon OWNER TO kmr44;

--
-- Name: nmd_transcript_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nmd_transcript_variant AS
 SELECT feature.feature_id AS nmd_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NMD_transcript_variant'::text);


ALTER TABLE so.nmd_transcript_variant OWNER TO kmr44;

--
-- Name: no_output; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.no_output AS
 SELECT feature.feature_id AS no_output_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'no_output'::text);


ALTER TABLE so.no_output OWNER TO kmr44;

--
-- Name: non_adjacent_residues; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_adjacent_residues AS
 SELECT feature.feature_id AS non_adjacent_residues_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_adjacent_residues'::text);


ALTER TABLE so.non_adjacent_residues OWNER TO kmr44;

--
-- Name: non_canonical_five_prime_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_canonical_five_prime_splice_site AS
 SELECT feature.feature_id AS non_canonical_five_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text);


ALTER TABLE so.non_canonical_five_prime_splice_site OWNER TO kmr44;

--
-- Name: non_canonical_start_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_canonical_start_codon AS
 SELECT feature.feature_id AS non_canonical_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text));


ALTER TABLE so.non_canonical_start_codon OWNER TO kmr44;

--
-- Name: non_canonical_three_prime_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_canonical_three_prime_splice_site AS
 SELECT feature.feature_id AS non_canonical_three_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text);


ALTER TABLE so.non_canonical_three_prime_splice_site OWNER TO kmr44;

--
-- Name: non_coding_exon_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_coding_exon_variant AS
 SELECT feature.feature_id AS non_coding_exon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_coding_exon_variant'::text);


ALTER TABLE so.non_coding_exon_variant OWNER TO kmr44;

--
-- Name: non_conservative_amino_acid_substitution; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_conservative_amino_acid_substitution AS
 SELECT feature.feature_id AS non_conservative_amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text);


ALTER TABLE so.non_conservative_amino_acid_substitution OWNER TO kmr44;

--
-- Name: non_conservative_missense_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_conservative_missense_codon AS
 SELECT feature.feature_id AS non_conservative_missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_conservative_missense_codon'::text);


ALTER TABLE so.non_conservative_missense_codon OWNER TO kmr44;

--
-- Name: non_cytoplasmic_polypeptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_cytoplasmic_polypeptide_region AS
 SELECT feature.feature_id AS non_cytoplasmic_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text);


ALTER TABLE so.non_cytoplasmic_polypeptide_region OWNER TO kmr44;

--
-- Name: non_ltr_retrotransposon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_ltr_retrotransposon AS
 SELECT feature.feature_id AS non_ltr_retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text));


ALTER TABLE so.non_ltr_retrotransposon OWNER TO kmr44;

--
-- Name: non_ltr_retrotransposon_polymeric_tract; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_ltr_retrotransposon_polymeric_tract AS
 SELECT feature.feature_id AS non_ltr_retrotransposon_polymeric_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text);


ALTER TABLE so.non_ltr_retrotransposon_polymeric_tract OWNER TO kmr44;

--
-- Name: non_processed_pseudogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_processed_pseudogene AS
 SELECT feature.feature_id AS non_processed_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text) OR ((cvterm.name)::text = 'cassette_pseudogene'::text) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text) OR ((cvterm.name)::text = 'unitary_pseudogene'::text) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text));


ALTER TABLE so.non_processed_pseudogene OWNER TO kmr44;

--
-- Name: non_protein_coding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_protein_coding AS
 SELECT feature.feature_id AS non_protein_coding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'miRNA_encoding'::text) OR ((cvterm.name)::text = 'rRNA_encoding'::text) OR ((cvterm.name)::text = 'scRNA_encoding'::text) OR ((cvterm.name)::text = 'snoRNA_encoding'::text) OR ((cvterm.name)::text = 'snRNA_encoding'::text) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text) OR ((cvterm.name)::text = 'stRNA_encoding'::text) OR ((cvterm.name)::text = 'tmRNA_encoding'::text) OR ((cvterm.name)::text = 'tRNA_encoding'::text) OR ((cvterm.name)::text = 'gRNA_encoding'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'non_protein_coding'::text));


ALTER TABLE so.non_protein_coding OWNER TO kmr44;

--
-- Name: non_synonymous_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_synonymous_codon AS
 SELECT feature.feature_id AS non_synonymous_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text) OR ((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text));


ALTER TABLE so.non_synonymous_codon OWNER TO kmr44;

--
-- Name: non_terminal_residue; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_terminal_residue AS
 SELECT feature.feature_id AS non_terminal_residue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_terminal_residue'::text);


ALTER TABLE so.non_terminal_residue OWNER TO kmr44;

--
-- Name: non_transcribed_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.non_transcribed_region AS
 SELECT feature.feature_id AS non_transcribed_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_transcribed_region'::text);


ALTER TABLE so.non_transcribed_region OWNER TO kmr44;

--
-- Name: nonamer_of_recombination_feature_of_vertebrate_im_sys_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nonamer_of_recombination_feature_of_vertebrate_im_sys_gene AS
 SELECT feature.feature_id AS nonamer_of_recombination_feature_of_vertebrate_im_sys_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text));


ALTER TABLE so.nonamer_of_recombination_feature_of_vertebrate_im_sys_gene OWNER TO kmr44;

--
-- Name: noncoding_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.noncoding_exon AS
 SELECT feature.feature_id AS noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text));


ALTER TABLE so.noncoding_exon OWNER TO kmr44;

--
-- Name: noncoding_region_of_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.noncoding_region_of_exon AS
 SELECT feature.feature_id AS noncoding_region_of_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text));


ALTER TABLE so.noncoding_region_of_exon OWNER TO kmr44;

--
-- Name: noncontiguous_finished; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.noncontiguous_finished AS
 SELECT feature.feature_id AS noncontiguous_finished_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'noncontiguous_finished'::text);


ALTER TABLE so.noncontiguous_finished OWNER TO kmr44;

--
-- Name: nuclear_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclear_chromosome AS
 SELECT feature.feature_id AS nuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_chromosome'::text);


ALTER TABLE so.nuclear_chromosome OWNER TO kmr44;

--
-- Name: nuclear_export_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclear_export_signal AS
 SELECT feature.feature_id AS nuclear_export_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_export_signal'::text);


ALTER TABLE so.nuclear_export_signal OWNER TO kmr44;

--
-- Name: nuclear_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclear_gene AS
 SELECT feature.feature_id AS nuclear_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_gene'::text);


ALTER TABLE so.nuclear_gene OWNER TO kmr44;

--
-- Name: nuclear_localization_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclear_localization_signal AS
 SELECT feature.feature_id AS nuclear_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_localization_signal'::text);


ALTER TABLE so.nuclear_localization_signal OWNER TO kmr44;

--
-- Name: nuclear_mt_pseudogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclear_mt_pseudogene AS
 SELECT feature.feature_id AS nuclear_mt_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text);


ALTER TABLE so.nuclear_mt_pseudogene OWNER TO kmr44;

--
-- Name: nuclear_rim_localization_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclear_rim_localization_signal AS
 SELECT feature.feature_id AS nuclear_rim_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text);


ALTER TABLE so.nuclear_rim_localization_signal OWNER TO kmr44;

--
-- Name: nuclear_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclear_sequence AS
 SELECT feature.feature_id AS nuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_sequence'::text);


ALTER TABLE so.nuclear_sequence OWNER TO kmr44;

--
-- Name: nuclease_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclease_binding_site AS
 SELECT feature.feature_id AS nuclease_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'nuclease_binding_site'::text));


ALTER TABLE so.nuclease_binding_site OWNER TO kmr44;

--
-- Name: nuclease_hypersensitive_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclease_hypersensitive_site AS
 SELECT feature.feature_id AS nuclease_hypersensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text));


ALTER TABLE so.nuclease_hypersensitive_site OWNER TO kmr44;

--
-- Name: nuclease_sensitive_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nuclease_sensitive_site AS
 SELECT feature.feature_id AS nuclease_sensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text));


ALTER TABLE so.nuclease_sensitive_site OWNER TO kmr44;

--
-- Name: nucleic_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nucleic_acid AS
 SELECT feature.feature_id AS nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'DNA'::text) OR ((cvterm.name)::text = 'RNA'::text) OR ((cvterm.name)::text = 'morpholino_backbone'::text) OR ((cvterm.name)::text = 'PNA'::text) OR ((cvterm.name)::text = 'LNA'::text) OR ((cvterm.name)::text = 'TNA'::text) OR ((cvterm.name)::text = 'GNA'::text) OR ((cvterm.name)::text = 'cDNA'::text) OR ((cvterm.name)::text = 'genomic_DNA'::text) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text) OR ((cvterm.name)::text = 'R_GNA'::text) OR ((cvterm.name)::text = 'S_GNA'::text) OR ((cvterm.name)::text = 'nucleic_acid'::text));


ALTER TABLE so.nucleic_acid OWNER TO kmr44;

--
-- Name: nucleomorph_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nucleomorph_gene AS
 SELECT feature.feature_id AS nucleomorph_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorph_gene'::text);


ALTER TABLE so.nucleomorph_gene OWNER TO kmr44;

--
-- Name: nucleomorphic_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nucleomorphic_chromosome AS
 SELECT feature.feature_id AS nucleomorphic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorphic_chromosome'::text);


ALTER TABLE so.nucleomorphic_chromosome OWNER TO kmr44;

--
-- Name: nucleomorphic_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nucleomorphic_sequence AS
 SELECT feature.feature_id AS nucleomorphic_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorphic_sequence'::text);


ALTER TABLE so.nucleomorphic_sequence OWNER TO kmr44;

--
-- Name: nucleotide_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nucleotide_binding_site AS
 SELECT feature.feature_id AS nucleotide_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'miRNA_target_site'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text) OR ((cvterm.name)::text = 'primer_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text));


ALTER TABLE so.nucleotide_binding_site OWNER TO kmr44;

--
-- Name: nucleotide_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nucleotide_match AS
 SELECT feature.feature_id AS nucleotide_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'expressed_sequence_match'::text) OR ((cvterm.name)::text = 'cross_genome_match'::text) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text) OR ((cvterm.name)::text = 'primer_match'::text) OR ((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text) OR ((cvterm.name)::text = 'UST_match'::text) OR ((cvterm.name)::text = 'RST_match'::text) OR ((cvterm.name)::text = 'nucleotide_match'::text));


ALTER TABLE so.nucleotide_match OWNER TO kmr44;

--
-- Name: nucleotide_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nucleotide_motif AS
 SELECT feature.feature_id AS nucleotide_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'DNA_motif'::text) OR ((cvterm.name)::text = 'RNA_motif'::text) OR ((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text) OR ((cvterm.name)::text = 'minus_10_signal'::text) OR ((cvterm.name)::text = 'minus_35_signal'::text) OR ((cvterm.name)::text = 'DRE_motif'::text) OR ((cvterm.name)::text = 'E_box_motif'::text) OR ((cvterm.name)::text = 'INR1_motif'::text) OR ((cvterm.name)::text = 'GAGA_motif'::text) OR ((cvterm.name)::text = 'octamer_motif'::text) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text) OR ((cvterm.name)::text = 'promoter_element'::text) OR ((cvterm.name)::text = 'DCE_SI'::text) OR ((cvterm.name)::text = 'DCE_SII'::text) OR ((cvterm.name)::text = 'DCE_SIII'::text) OR ((cvterm.name)::text = 'minus_12_signal'::text) OR ((cvterm.name)::text = 'minus_24_signal'::text) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text) OR ((cvterm.name)::text = 'DMv5_motif'::text) OR ((cvterm.name)::text = 'DMv3_motif'::text) OR ((cvterm.name)::text = 'DMv2_motif'::text) OR ((cvterm.name)::text = 'DPE1_motif'::text) OR ((cvterm.name)::text = 'DMv1_motif'::text) OR ((cvterm.name)::text = 'NDM2_motif'::text) OR ((cvterm.name)::text = 'NDM3_motif'::text) OR ((cvterm.name)::text = 'core_promoter_element'::text) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text) OR ((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text) OR ((cvterm.name)::text = 'BREu_motif'::text) OR ((cvterm.name)::text = 'TATA_box'::text) OR ((cvterm.name)::text = 'A_box'::text) OR ((cvterm.name)::text = 'B_box'::text) OR ((cvterm.name)::text = 'C_box'::text) OR ((cvterm.name)::text = 'MTE'::text) OR ((cvterm.name)::text = 'BREd_motif'::text) OR ((cvterm.name)::text = 'DCE'::text) OR ((cvterm.name)::text = 'intermediate_element'::text) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text) OR ((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'nucleotide_motif'::text));


ALTER TABLE so.nucleotide_motif OWNER TO kmr44;

--
-- Name: nucleotide_to_protein_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.nucleotide_to_protein_binding_site AS
 SELECT feature.feature_id AS nucleotide_to_protein_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'histone_binding_site'::text) OR ((cvterm.name)::text = 'insulator_binding_site'::text) OR ((cvterm.name)::text = 'enhancer_binding_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text));


ALTER TABLE so.nucleotide_to_protein_binding_site OWNER TO kmr44;

--
-- Name: octamer_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.octamer_motif AS
 SELECT feature.feature_id AS octamer_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'octamer_motif'::text);


ALTER TABLE so.octamer_motif OWNER TO kmr44;

--
-- Name: oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.oligo AS
 SELECT feature.feature_id AS oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'aptamer'::text) OR ((cvterm.name)::text = 'probe'::text) OR ((cvterm.name)::text = 'tag'::text) OR ((cvterm.name)::text = 'ss_oligo'::text) OR ((cvterm.name)::text = 'ds_oligo'::text) OR ((cvterm.name)::text = 'DNAzyme'::text) OR ((cvterm.name)::text = 'synthetic_oligo'::text) OR ((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text) OR ((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text) OR ((cvterm.name)::text = 'EST'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text) OR ((cvterm.name)::text = 'UST'::text) OR ((cvterm.name)::text = 'RST'::text) OR ((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text) OR ((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text) OR ((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text) OR ((cvterm.name)::text = 'reverse_primer'::text) OR ((cvterm.name)::text = 'ASPE_primer'::text) OR ((cvterm.name)::text = 'dCAPS_primer'::text) OR ((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text) OR ((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text) OR ((cvterm.name)::text = 'LNA_oligo'::text) OR ((cvterm.name)::text = 'TNA_oligo'::text) OR ((cvterm.name)::text = 'GNA_oligo'::text) OR ((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text) OR ((cvterm.name)::text = 'oligo'::text));


ALTER TABLE so.oligo OWNER TO kmr44;

--
-- Name: oligo_u_tail; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.oligo_u_tail AS
 SELECT feature.feature_id AS oligo_u_tail_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oligo_U_tail'::text);


ALTER TABLE so.oligo_u_tail OWNER TO kmr44;

--
-- Name: one_methyl_3_3_amino_three_carboxypropyl_pseudouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.one_methyl_3_3_amino_three_carboxypropyl_pseudouridine AS
 SELECT feature.feature_id AS one_methyl_3_3_amino_three_carboxypropyl_pseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text);


ALTER TABLE so.one_methyl_3_3_amino_three_carboxypropyl_pseudouridine OWNER TO kmr44;

--
-- Name: one_methyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.one_methyladenosine AS
 SELECT feature.feature_id AS one_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methyladenosine'::text);


ALTER TABLE so.one_methyladenosine OWNER TO kmr44;

--
-- Name: one_methylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.one_methylguanosine AS
 SELECT feature.feature_id AS one_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylguanosine'::text);


ALTER TABLE so.one_methylguanosine OWNER TO kmr44;

--
-- Name: one_methylinosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.one_methylinosine AS
 SELECT feature.feature_id AS one_methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylinosine'::text);


ALTER TABLE so.one_methylinosine OWNER TO kmr44;

--
-- Name: one_methylpseudouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.one_methylpseudouridine AS
 SELECT feature.feature_id AS one_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylpseudouridine'::text);


ALTER TABLE so.one_methylpseudouridine OWNER TO kmr44;

--
-- Name: one_two_prime_o_dimethyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.one_two_prime_o_dimethyladenosine AS
 SELECT feature.feature_id AS one_two_prime_o_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text);


ALTER TABLE so.one_two_prime_o_dimethyladenosine OWNER TO kmr44;

--
-- Name: one_two_prime_o_dimethylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.one_two_prime_o_dimethylguanosine AS
 SELECT feature.feature_id AS one_two_prime_o_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text);


ALTER TABLE so.one_two_prime_o_dimethylguanosine OWNER TO kmr44;

--
-- Name: one_two_prime_o_dimethylinosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.one_two_prime_o_dimethylinosine AS
 SELECT feature.feature_id AS one_two_prime_o_dimethylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text);


ALTER TABLE so.one_two_prime_o_dimethylinosine OWNER TO kmr44;

--
-- Name: open_chromatin_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.open_chromatin_region AS
 SELECT feature.feature_id AS open_chromatin_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'open_chromatin_region'::text);


ALTER TABLE so.open_chromatin_region OWNER TO kmr44;

--
-- Name: operator; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.operator AS
 SELECT feature.feature_id AS operator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operator'::text);


ALTER TABLE so.operator OWNER TO kmr44;

--
-- Name: operon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.operon AS
 SELECT feature.feature_id AS operon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operon'::text);


ALTER TABLE so.operon OWNER TO kmr44;

--
-- Name: operon_member; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.operon_member AS
 SELECT feature.feature_id AS operon_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operon_member'::text);


ALTER TABLE so.operon_member OWNER TO kmr44;

--
-- Name: orf; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.orf AS
 SELECT feature.feature_id AS orf_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mini_gene'::text) OR ((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'ORF'::text));


ALTER TABLE so.orf OWNER TO kmr44;

--
-- Name: organelle_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.organelle_sequence AS
 SELECT feature.feature_id AS organelle_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'macronuclear_sequence'::text) OR ((cvterm.name)::text = 'micronuclear_sequence'::text) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text) OR ((cvterm.name)::text = 'nuclear_sequence'::text) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text) OR ((cvterm.name)::text = 'plastid_sequence'::text) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text) OR ((cvterm.name)::text = 'apicoplast_sequence'::text) OR ((cvterm.name)::text = 'chromoplast_sequence'::text) OR ((cvterm.name)::text = 'chloroplast_sequence'::text) OR ((cvterm.name)::text = 'cyanelle_sequence'::text) OR ((cvterm.name)::text = 'leucoplast_sequence'::text) OR ((cvterm.name)::text = 'proplastid_sequence'::text) OR ((cvterm.name)::text = 'chloroplast_DNA'::text) OR ((cvterm.name)::text = 'organelle_sequence'::text));


ALTER TABLE so.organelle_sequence OWNER TO kmr44;

--
-- Name: oric; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.oric AS
 SELECT feature.feature_id AS oric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriC'::text);


ALTER TABLE so.oric OWNER TO kmr44;

--
-- Name: origin_of_replication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.origin_of_replication AS
 SELECT feature.feature_id AS origin_of_replication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'D_loop'::text) OR ((cvterm.name)::text = 'ARS'::text) OR ((cvterm.name)::text = 'oriT'::text) OR ((cvterm.name)::text = 'amplification_origin'::text) OR ((cvterm.name)::text = 'oriV'::text) OR ((cvterm.name)::text = 'oriC'::text) OR ((cvterm.name)::text = 'origin_of_replication'::text));


ALTER TABLE so.origin_of_replication OWNER TO kmr44;

--
-- Name: orit; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.orit AS
 SELECT feature.feature_id AS orit_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriT'::text);


ALTER TABLE so.orit OWNER TO kmr44;

--
-- Name: oriv; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.oriv AS
 SELECT feature.feature_id AS oriv_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriV'::text);


ALTER TABLE so.oriv OWNER TO kmr44;

--
-- Name: orphan; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.orphan AS
 SELECT feature.feature_id AS orphan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orphan'::text);


ALTER TABLE so.orphan OWNER TO kmr44;

--
-- Name: orphan_cds; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.orphan_cds AS
 SELECT feature.feature_id AS orphan_cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orphan_CDS'::text);


ALTER TABLE so.orphan_cds OWNER TO kmr44;

--
-- Name: orthologous; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.orthologous AS
 SELECT feature.feature_id AS orthologous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orthologous'::text);


ALTER TABLE so.orthologous OWNER TO kmr44;

--
-- Name: orthologous_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.orthologous_region AS
 SELECT feature.feature_id AS orthologous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orthologous_region'::text);


ALTER TABLE so.orthologous_region OWNER TO kmr44;

--
-- Name: outron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.outron AS
 SELECT feature.feature_id AS outron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'outron'::text);


ALTER TABLE so.outron OWNER TO kmr44;

--
-- Name: overlapping; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.overlapping AS
 SELECT feature.feature_id AS overlapping_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inside_intron'::text) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'antisense'::text) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text) OR ((cvterm.name)::text = 'overlapping'::text));


ALTER TABLE so.overlapping OWNER TO kmr44;

--
-- Name: overlapping_est_set; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.overlapping_est_set AS
 SELECT feature.feature_id AS overlapping_est_set_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'overlapping_EST_set'::text);


ALTER TABLE so.overlapping_est_set OWNER TO kmr44;

--
-- Name: overlapping_feature_set; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.overlapping_feature_set AS
 SELECT feature.feature_id AS overlapping_feature_set_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'overlapping_feature_set'::text));


ALTER TABLE so.overlapping_feature_set OWNER TO kmr44;

--
-- Name: oxys_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.oxys_rna AS
 SELECT feature.feature_id AS oxys_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'OxyS_RNA'::text);


ALTER TABLE so.oxys_rna OWNER TO kmr44;

--
-- Name: p_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.p_element AS
 SELECT feature.feature_id AS p_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'p_element'::text);


ALTER TABLE so.p_element OWNER TO kmr44;

--
-- Name: pac; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pac AS
 SELECT feature.feature_id AS pac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PAC'::text);


ALTER TABLE so.pac OWNER TO kmr44;

--
-- Name: pac_end; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pac_end AS
 SELECT feature.feature_id AS pac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PAC_end'::text);


ALTER TABLE so.pac_end OWNER TO kmr44;

--
-- Name: paired_end_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paired_end_fragment AS
 SELECT feature.feature_id AS paired_end_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paired_end_fragment'::text);


ALTER TABLE so.paired_end_fragment OWNER TO kmr44;

--
-- Name: paracentric; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paracentric AS
 SELECT feature.feature_id AS paracentric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paracentric'::text);


ALTER TABLE so.paracentric OWNER TO kmr44;

--
-- Name: paracentric_inversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paracentric_inversion AS
 SELECT feature.feature_id AS paracentric_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paracentric_inversion'::text);


ALTER TABLE so.paracentric_inversion OWNER TO kmr44;

--
-- Name: parallel_beta_strand; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.parallel_beta_strand AS
 SELECT feature.feature_id AS parallel_beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'parallel_beta_strand'::text);


ALTER TABLE so.parallel_beta_strand OWNER TO kmr44;

--
-- Name: paralogous; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paralogous AS
 SELECT feature.feature_id AS paralogous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paralogous'::text);


ALTER TABLE so.paralogous OWNER TO kmr44;

--
-- Name: paralogous_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paralogous_region AS
 SELECT feature.feature_id AS paralogous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paralogous_region'::text);


ALTER TABLE so.paralogous_region OWNER TO kmr44;

--
-- Name: partially_characterised_chromosomal_mutation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.partially_characterised_chromosomal_mutation AS
 SELECT feature.feature_id AS partially_characterised_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text);


ALTER TABLE so.partially_characterised_chromosomal_mutation OWNER TO kmr44;

--
-- Name: partially_processed_cdna_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.partially_processed_cdna_clone AS
 SELECT feature.feature_id AS partially_processed_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text);


ALTER TABLE so.partially_processed_cdna_clone OWNER TO kmr44;

--
-- Name: paternal_uniparental_disomy; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paternal_uniparental_disomy AS
 SELECT feature.feature_id AS paternal_uniparental_disomy_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternal_uniparental_disomy'::text);


ALTER TABLE so.paternal_uniparental_disomy OWNER TO kmr44;

--
-- Name: paternal_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paternal_variant AS
 SELECT feature.feature_id AS paternal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternal_variant'::text);


ALTER TABLE so.paternal_variant OWNER TO kmr44;

--
-- Name: paternally_imprinted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paternally_imprinted AS
 SELECT feature.feature_id AS paternally_imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternally_imprinted'::text);


ALTER TABLE so.paternally_imprinted OWNER TO kmr44;

--
-- Name: paternally_imprinted_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.paternally_imprinted_gene AS
 SELECT feature.feature_id AS paternally_imprinted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternally_imprinted_gene'::text);


ALTER TABLE so.paternally_imprinted_gene OWNER TO kmr44;

--
-- Name: pathogenic_island; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pathogenic_island AS
 SELECT feature.feature_id AS pathogenic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pathogenic_island'::text);


ALTER TABLE so.pathogenic_island OWNER TO kmr44;

--
-- Name: pcr_product; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pcr_product AS
 SELECT feature.feature_id AS pcr_product_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RAPD'::text) OR ((cvterm.name)::text = 'PCR_product'::text));


ALTER TABLE so.pcr_product OWNER TO kmr44;

--
-- Name: pedigree_specific_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pedigree_specific_variant AS
 SELECT feature.feature_id AS pedigree_specific_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pedigree_specific_variant'::text);


ALTER TABLE so.pedigree_specific_variant OWNER TO kmr44;

--
-- Name: peptide_coil; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.peptide_coil AS
 SELECT feature.feature_id AS peptide_coil_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptide_coil'::text);


ALTER TABLE so.peptide_coil OWNER TO kmr44;

--
-- Name: peptide_collection; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.peptide_collection AS
 SELECT feature.feature_id AS peptide_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptide_collection'::text);


ALTER TABLE so.peptide_collection OWNER TO kmr44;

--
-- Name: peptide_helix; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.peptide_helix AS
 SELECT feature.feature_id AS peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text) OR ((cvterm.name)::text = 'three_ten_helix'::text) OR ((cvterm.name)::text = 'peptide_helix'::text));


ALTER TABLE so.peptide_helix OWNER TO kmr44;

--
-- Name: peptide_localization_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.peptide_localization_signal AS
 SELECT feature.feature_id AS peptide_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'signal_peptide'::text) OR ((cvterm.name)::text = 'transit_peptide'::text) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text) OR ((cvterm.name)::text = 'nuclear_export_signal'::text) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text) OR ((cvterm.name)::text = 'peptide_localization_signal'::text));


ALTER TABLE so.peptide_localization_signal OWNER TO kmr44;

--
-- Name: peptidyl; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.peptidyl AS
 SELECT feature.feature_id AS peptidyl_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptidyl'::text);


ALTER TABLE so.peptidyl OWNER TO kmr44;

--
-- Name: pericentric; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pericentric AS
 SELECT feature.feature_id AS pericentric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pericentric'::text);


ALTER TABLE so.pericentric OWNER TO kmr44;

--
-- Name: pericentric_inversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pericentric_inversion AS
 SELECT feature.feature_id AS pericentric_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pericentric_inversion'::text);


ALTER TABLE so.pericentric_inversion OWNER TO kmr44;

--
-- Name: peroxywybutosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.peroxywybutosine AS
 SELECT feature.feature_id AS peroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peroxywybutosine'::text);


ALTER TABLE so.peroxywybutosine OWNER TO kmr44;

--
-- Name: phage_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.phage_rna_polymerase_promoter AS
 SELECT feature.feature_id AS phage_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text));


ALTER TABLE so.phage_rna_polymerase_promoter OWNER TO kmr44;

--
-- Name: phage_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.phage_sequence AS
 SELECT feature.feature_id AS phage_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phage_sequence'::text);


ALTER TABLE so.phage_sequence OWNER TO kmr44;

--
-- Name: phagemid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.phagemid AS
 SELECT feature.feature_id AS phagemid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phagemid'::text);


ALTER TABLE so.phagemid OWNER TO kmr44;

--
-- Name: phe_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.phe_trna_primary_transcript AS
 SELECT feature.feature_id AS phe_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text);


ALTER TABLE so.phe_trna_primary_transcript OWNER TO kmr44;

--
-- Name: phenylalanine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.phenylalanine AS
 SELECT feature.feature_id AS phenylalanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanine'::text);


ALTER TABLE so.phenylalanine OWNER TO kmr44;

--
-- Name: phenylalanyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.phenylalanyl_trna AS
 SELECT feature.feature_id AS phenylalanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanyl_tRNA'::text);


ALTER TABLE so.phenylalanyl_trna OWNER TO kmr44;

--
-- Name: pi_helix; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pi_helix AS
 SELECT feature.feature_id AS pi_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pi_helix'::text);


ALTER TABLE so.pi_helix OWNER TO kmr44;

--
-- Name: pirna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pirna AS
 SELECT feature.feature_id AS pirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'piRNA'::text);


ALTER TABLE so.pirna OWNER TO kmr44;

--
-- Name: pirna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pirna_gene AS
 SELECT feature.feature_id AS pirna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'piRNA_gene'::text);


ALTER TABLE so.pirna_gene OWNER TO kmr44;

--
-- Name: plasmid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plasmid AS
 SELECT feature.feature_id AS plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'episome'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'plasmid'::text));


ALTER TABLE so.plasmid OWNER TO kmr44;

--
-- Name: plasmid_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plasmid_gene AS
 SELECT feature.feature_id AS plasmid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_gene'::text);


ALTER TABLE so.plasmid_gene OWNER TO kmr44;

--
-- Name: plasmid_location; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plasmid_location AS
 SELECT feature.feature_id AS plasmid_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_location'::text);


ALTER TABLE so.plasmid_location OWNER TO kmr44;

--
-- Name: plasmid_vector; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plasmid_vector AS
 SELECT feature.feature_id AS plasmid_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_vector'::text);


ALTER TABLE so.plasmid_vector OWNER TO kmr44;

--
-- Name: plastid_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plastid_gene AS
 SELECT feature.feature_id AS plastid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'apicoplast_gene'::text) OR ((cvterm.name)::text = 'ct_gene'::text) OR ((cvterm.name)::text = 'chromoplast_gene'::text) OR ((cvterm.name)::text = 'cyanelle_gene'::text) OR ((cvterm.name)::text = 'leucoplast_gene'::text) OR ((cvterm.name)::text = 'proplastid_gene'::text) OR ((cvterm.name)::text = 'plastid_gene'::text));


ALTER TABLE so.plastid_gene OWNER TO kmr44;

--
-- Name: plastid_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plastid_sequence AS
 SELECT feature.feature_id AS plastid_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'apicoplast_sequence'::text) OR ((cvterm.name)::text = 'chromoplast_sequence'::text) OR ((cvterm.name)::text = 'chloroplast_sequence'::text) OR ((cvterm.name)::text = 'cyanelle_sequence'::text) OR ((cvterm.name)::text = 'leucoplast_sequence'::text) OR ((cvterm.name)::text = 'proplastid_sequence'::text) OR ((cvterm.name)::text = 'chloroplast_DNA'::text) OR ((cvterm.name)::text = 'plastid_sequence'::text));


ALTER TABLE so.plastid_sequence OWNER TO kmr44;

--
-- Name: plus_1_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plus_1_frameshift AS
 SELECT feature.feature_id AS plus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_frameshift'::text);


ALTER TABLE so.plus_1_frameshift OWNER TO kmr44;

--
-- Name: plus_1_frameshift_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plus_1_frameshift_variant AS
 SELECT feature.feature_id AS plus_1_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_frameshift_variant'::text);


ALTER TABLE so.plus_1_frameshift_variant OWNER TO kmr44;

--
-- Name: plus_1_translational_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plus_1_translational_frameshift AS
 SELECT feature.feature_id AS plus_1_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_translational_frameshift'::text);


ALTER TABLE so.plus_1_translational_frameshift OWNER TO kmr44;

--
-- Name: plus_1_translationally_frameshifted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plus_1_translationally_frameshifted AS
 SELECT feature.feature_id AS plus_1_translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text);


ALTER TABLE so.plus_1_translationally_frameshifted OWNER TO kmr44;

--
-- Name: plus_2_frameshift_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plus_2_frameshift_variant AS
 SELECT feature.feature_id AS plus_2_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_frameshift variant'::text);


ALTER TABLE so.plus_2_frameshift_variant OWNER TO kmr44;

--
-- Name: plus_2_framshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plus_2_framshift AS
 SELECT feature.feature_id AS plus_2_framshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_framshift'::text);


ALTER TABLE so.plus_2_framshift OWNER TO kmr44;

--
-- Name: plus_2_translational_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.plus_2_translational_frameshift AS
 SELECT feature.feature_id AS plus_2_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_translational_frameshift'::text);


ALTER TABLE so.plus_2_translational_frameshift OWNER TO kmr44;

--
-- Name: pna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pna AS
 SELECT feature.feature_id AS pna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PNA'::text);


ALTER TABLE so.pna OWNER TO kmr44;

--
-- Name: pna_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pna_oligo AS
 SELECT feature.feature_id AS pna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PNA_oligo'::text);


ALTER TABLE so.pna_oligo OWNER TO kmr44;

--
-- Name: point_centromere; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.point_centromere AS
 SELECT feature.feature_id AS point_centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'point_centromere'::text);


ALTER TABLE so.point_centromere OWNER TO kmr44;

--
-- Name: point_mutation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.point_mutation AS
 SELECT feature.feature_id AS point_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'point_mutation'::text);


ALTER TABLE so.point_mutation OWNER TO kmr44;

--
-- Name: polinton; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polinton AS
 SELECT feature.feature_id AS polinton_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polinton'::text);


ALTER TABLE so.polinton OWNER TO kmr44;

--
-- Name: polya_primed_cdna_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polya_primed_cdna_clone AS
 SELECT feature.feature_id AS polya_primed_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text);


ALTER TABLE so.polya_primed_cdna_clone OWNER TO kmr44;

--
-- Name: polya_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polya_sequence AS
 SELECT feature.feature_id AS polya_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_sequence'::text);


ALTER TABLE so.polya_sequence OWNER TO kmr44;

--
-- Name: polya_signal_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polya_signal_sequence AS
 SELECT feature.feature_id AS polya_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_signal_sequence'::text);


ALTER TABLE so.polya_signal_sequence OWNER TO kmr44;

--
-- Name: polya_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polya_site AS
 SELECT feature.feature_id AS polya_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_site'::text);


ALTER TABLE so.polya_site OWNER TO kmr44;

--
-- Name: polyadenylated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polyadenylated AS
 SELECT feature.feature_id AS polyadenylated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyadenylated'::text);


ALTER TABLE so.polyadenylated OWNER TO kmr44;

--
-- Name: polyadenylated_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polyadenylated_mrna AS
 SELECT feature.feature_id AS polyadenylated_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyadenylated_mRNA'::text);


ALTER TABLE so.polyadenylated_mrna OWNER TO kmr44;

--
-- Name: polyadenylation_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polyadenylation_variant AS
 SELECT feature.feature_id AS polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'increased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'polyadenylation_variant'::text));


ALTER TABLE so.polyadenylation_variant OWNER TO kmr44;

--
-- Name: polycistronic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polycistronic AS
 SELECT feature.feature_id AS polycistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic'::text) OR ((cvterm.name)::text = 'polycistronic'::text));


ALTER TABLE so.polycistronic OWNER TO kmr44;

--
-- Name: polycistronic_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polycistronic_mrna AS
 SELECT feature.feature_id AS polycistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text));


ALTER TABLE so.polycistronic_mrna OWNER TO kmr44;

--
-- Name: polycistronic_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polycistronic_primary_transcript AS
 SELECT feature.feature_id AS polycistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text));


ALTER TABLE so.polycistronic_primary_transcript OWNER TO kmr44;

--
-- Name: polycistronic_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polycistronic_transcript AS
 SELECT feature.feature_id AS polycistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_transcript'::text));


ALTER TABLE so.polycistronic_transcript OWNER TO kmr44;

--
-- Name: polymer_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polymer_attribute AS
 SELECT feature.feature_id AS polymer_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nucleic_acid'::text) OR ((cvterm.name)::text = 'synthetic_sequence'::text) OR ((cvterm.name)::text = 'topology_attribute'::text) OR ((cvterm.name)::text = 'peptidyl'::text) OR ((cvterm.name)::text = 'DNA'::text) OR ((cvterm.name)::text = 'RNA'::text) OR ((cvterm.name)::text = 'morpholino_backbone'::text) OR ((cvterm.name)::text = 'PNA'::text) OR ((cvterm.name)::text = 'LNA'::text) OR ((cvterm.name)::text = 'TNA'::text) OR ((cvterm.name)::text = 'GNA'::text) OR ((cvterm.name)::text = 'cDNA'::text) OR ((cvterm.name)::text = 'genomic_DNA'::text) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text) OR ((cvterm.name)::text = 'R_GNA'::text) OR ((cvterm.name)::text = 'S_GNA'::text) OR ((cvterm.name)::text = 'random_sequence'::text) OR ((cvterm.name)::text = 'designed_sequence'::text) OR ((cvterm.name)::text = 'linear'::text) OR ((cvterm.name)::text = 'circular'::text) OR ((cvterm.name)::text = 'polymer_attribute'::text));


ALTER TABLE so.polymer_attribute OWNER TO kmr44;

--
-- Name: polymerase_synthesis_read; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polymerase_synthesis_read AS
 SELECT feature.feature_id AS polymerase_synthesis_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymerase_synthesis_read'::text);


ALTER TABLE so.polymerase_synthesis_read OWNER TO kmr44;

--
-- Name: polymorphic_sequence_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polymorphic_sequence_variant AS
 SELECT feature.feature_id AS polymorphic_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymorphic_sequence_variant'::text);


ALTER TABLE so.polymorphic_sequence_variant OWNER TO kmr44;

--
-- Name: polymorphic_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polymorphic_variant AS
 SELECT feature.feature_id AS polymorphic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymorphic_variant'::text);


ALTER TABLE so.polymorphic_variant OWNER TO kmr44;

--
-- Name: polypeptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide AS
 SELECT feature.feature_id AS polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide'::text);


ALTER TABLE so.polypeptide OWNER TO kmr44;

--
-- Name: polypeptide_binding_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_binding_motif AS
 SELECT feature.feature_id AS polypeptide_binding_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_binding_motif'::text);


ALTER TABLE so.polypeptide_binding_motif OWNER TO kmr44;

--
-- Name: polypeptide_calcium_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_calcium_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_calcium_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text);


ALTER TABLE so.polypeptide_calcium_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_catalytic_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_catalytic_motif AS
 SELECT feature.feature_id AS polypeptide_catalytic_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text);


ALTER TABLE so.polypeptide_catalytic_motif OWNER TO kmr44;

--
-- Name: polypeptide_cobalt_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_cobalt_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_cobalt_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text);


ALTER TABLE so.polypeptide_cobalt_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_conserved_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_conserved_motif AS
 SELECT feature.feature_id AS polypeptide_conserved_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_conserved_motif'::text);


ALTER TABLE so.polypeptide_conserved_motif OWNER TO kmr44;

--
-- Name: polypeptide_conserved_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_conserved_region AS
 SELECT feature.feature_id AS polypeptide_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text) OR ((cvterm.name)::text = 'polypeptide_repeat'::text) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text) OR ((cvterm.name)::text = 'molecular_contact_region'::text) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text));


ALTER TABLE so.polypeptide_conserved_region OWNER TO kmr44;

--
-- Name: polypeptide_copper_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_copper_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_copper_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text);


ALTER TABLE so.polypeptide_copper_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_dna_contact; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_dna_contact AS
 SELECT feature.feature_id AS polypeptide_dna_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_DNA_contact'::text);


ALTER TABLE so.polypeptide_dna_contact OWNER TO kmr44;

--
-- Name: polypeptide_domain; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_domain AS
 SELECT feature.feature_id AS polypeptide_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_domain'::text);


ALTER TABLE so.polypeptide_domain OWNER TO kmr44;

--
-- Name: polypeptide_function_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_function_variant AS
 SELECT feature.feature_id AS polypeptide_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text));


ALTER TABLE so.polypeptide_function_variant OWNER TO kmr44;

--
-- Name: polypeptide_fusion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_fusion AS
 SELECT feature.feature_id AS polypeptide_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_fusion'::text);


ALTER TABLE so.polypeptide_fusion OWNER TO kmr44;

--
-- Name: polypeptide_gain_of_function_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_gain_of_function_variant AS
 SELECT feature.feature_id AS polypeptide_gain_of_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text);


ALTER TABLE so.polypeptide_gain_of_function_variant OWNER TO kmr44;

--
-- Name: polypeptide_iron_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_iron_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_iron_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text);


ALTER TABLE so.polypeptide_iron_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_ligand_contact; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_ligand_contact AS
 SELECT feature.feature_id AS polypeptide_ligand_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_ligand_contact'::text);


ALTER TABLE so.polypeptide_ligand_contact OWNER TO kmr44;

--
-- Name: polypeptide_localization_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_localization_variant AS
 SELECT feature.feature_id AS polypeptide_localization_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_localization_variant'::text);


ALTER TABLE so.polypeptide_localization_variant OWNER TO kmr44;

--
-- Name: polypeptide_loss_of_function_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_loss_of_function_variant AS
 SELECT feature.feature_id AS polypeptide_loss_of_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inactive_ligand_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text));


ALTER TABLE so.polypeptide_loss_of_function_variant OWNER TO kmr44;

--
-- Name: polypeptide_magnesium_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_magnesium_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_magnesium_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text);


ALTER TABLE so.polypeptide_magnesium_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_manganese_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_manganese_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_manganese_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text);


ALTER TABLE so.polypeptide_manganese_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_metal_contact; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_metal_contact AS
 SELECT feature.feature_id AS polypeptide_metal_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text));


ALTER TABLE so.polypeptide_metal_contact OWNER TO kmr44;

--
-- Name: polypeptide_molybdenum_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_molybdenum_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_molybdenum_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text);


ALTER TABLE so.polypeptide_molybdenum_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_motif AS
 SELECT feature.feature_id AS polypeptide_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text) OR ((cvterm.name)::text = 'molecular_contact_region'::text) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text));


ALTER TABLE so.polypeptide_motif OWNER TO kmr44;

--
-- Name: polypeptide_nest_left_right_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_nest_left_right_motif AS
 SELECT feature.feature_id AS polypeptide_nest_left_right_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text);


ALTER TABLE so.polypeptide_nest_left_right_motif OWNER TO kmr44;

--
-- Name: polypeptide_nest_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_nest_motif AS
 SELECT feature.feature_id AS polypeptide_nest_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text));


ALTER TABLE so.polypeptide_nest_motif OWNER TO kmr44;

--
-- Name: polypeptide_nest_right_left_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_nest_right_left_motif AS
 SELECT feature.feature_id AS polypeptide_nest_right_left_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text);


ALTER TABLE so.polypeptide_nest_right_left_motif OWNER TO kmr44;

--
-- Name: polypeptide_nickel_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_nickel_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_nickel_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text);


ALTER TABLE so.polypeptide_nickel_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_partial_loss_of_function; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_partial_loss_of_function AS
 SELECT feature.feature_id AS polypeptide_partial_loss_of_function_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text);


ALTER TABLE so.polypeptide_partial_loss_of_function OWNER TO kmr44;

--
-- Name: polypeptide_post_translational_processing_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_post_translational_processing_variant AS
 SELECT feature.feature_id AS polypeptide_post_translational_processing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text);


ALTER TABLE so.polypeptide_post_translational_processing_variant OWNER TO kmr44;

--
-- Name: polypeptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_region AS
 SELECT feature.feature_id AS polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mature_protein_region'::text) OR ((cvterm.name)::text = 'immature_peptide_region'::text) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text) OR ((cvterm.name)::text = 'peptide_localization_signal'::text) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text) OR ((cvterm.name)::text = 'active_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'membrane_structure'::text) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text) OR ((cvterm.name)::text = 'beta_bulge_loop'::text) OR ((cvterm.name)::text = 'beta_strand'::text) OR ((cvterm.name)::text = 'peptide_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop'::text) OR ((cvterm.name)::text = 'serine_threonine_motif'::text) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text) OR ((cvterm.name)::text = 'alpha_beta_motif'::text) OR ((cvterm.name)::text = 'peptide_coil'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text) OR ((cvterm.name)::text = 'three_ten_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text) OR ((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text) OR ((cvterm.name)::text = 'gamma_turn'::text) OR ((cvterm.name)::text = 'serine_threonine_turn'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text) OR ((cvterm.name)::text = 'natural_variant_site'::text) OR ((cvterm.name)::text = 'mutated_variant_site'::text) OR ((cvterm.name)::text = 'alternate_sequence_site'::text) OR ((cvterm.name)::text = 'signal_peptide'::text) OR ((cvterm.name)::text = 'transit_peptide'::text) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text) OR ((cvterm.name)::text = 'nuclear_export_signal'::text) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text) OR ((cvterm.name)::text = 'intein'::text) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text) OR ((cvterm.name)::text = 'propeptide'::text) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text) OR ((cvterm.name)::text = 'n_terminal_region'::text) OR ((cvterm.name)::text = 'c_terminal_region'::text) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text) OR ((cvterm.name)::text = 'polypeptide_repeat'::text) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text) OR ((cvterm.name)::text = 'molecular_contact_region'::text) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_region'::text));


ALTER TABLE so.polypeptide_region OWNER TO kmr44;

--
-- Name: polypeptide_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_repeat AS
 SELECT feature.feature_id AS polypeptide_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_repeat'::text);


ALTER TABLE so.polypeptide_repeat OWNER TO kmr44;

--
-- Name: polypeptide_secondary_structure; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_secondary_structure AS
 SELECT feature.feature_id AS polypeptide_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text) OR ((cvterm.name)::text = 'beta_bulge_loop'::text) OR ((cvterm.name)::text = 'beta_strand'::text) OR ((cvterm.name)::text = 'peptide_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop'::text) OR ((cvterm.name)::text = 'serine_threonine_motif'::text) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text) OR ((cvterm.name)::text = 'alpha_beta_motif'::text) OR ((cvterm.name)::text = 'peptide_coil'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text) OR ((cvterm.name)::text = 'three_ten_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text) OR ((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text) OR ((cvterm.name)::text = 'gamma_turn'::text) OR ((cvterm.name)::text = 'serine_threonine_turn'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text));


ALTER TABLE so.polypeptide_secondary_structure OWNER TO kmr44;

--
-- Name: polypeptide_sequence_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_sequence_variant AS
 SELECT feature.feature_id AS polypeptide_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'amino_acid_deletion'::text) OR ((cvterm.name)::text = 'amino_acid_insertion'::text) OR ((cvterm.name)::text = 'amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide'::text) OR ((cvterm.name)::text = 'polypeptide_fusion'::text) OR ((cvterm.name)::text = 'polypeptide_truncation'::text) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text));


ALTER TABLE so.polypeptide_sequence_variant OWNER TO kmr44;

--
-- Name: polypeptide_sequencing_information; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_sequencing_information AS
 SELECT feature.feature_id AS polypeptide_sequencing_information_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'non_adjacent_residues'::text) OR ((cvterm.name)::text = 'non_terminal_residue'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text) OR ((cvterm.name)::text = 'sequence_uncertainty'::text) OR ((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text));


ALTER TABLE so.polypeptide_sequencing_information OWNER TO kmr44;

--
-- Name: polypeptide_structural_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_structural_motif AS
 SELECT feature.feature_id AS polypeptide_structural_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text));


ALTER TABLE so.polypeptide_structural_motif OWNER TO kmr44;

--
-- Name: polypeptide_structural_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_structural_region AS
 SELECT feature.feature_id AS polypeptide_structural_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'membrane_structure'::text) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text) OR ((cvterm.name)::text = 'beta_bulge_loop'::text) OR ((cvterm.name)::text = 'beta_strand'::text) OR ((cvterm.name)::text = 'peptide_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop'::text) OR ((cvterm.name)::text = 'serine_threonine_motif'::text) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text) OR ((cvterm.name)::text = 'alpha_beta_motif'::text) OR ((cvterm.name)::text = 'peptide_coil'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text) OR ((cvterm.name)::text = 'three_ten_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text) OR ((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text) OR ((cvterm.name)::text = 'gamma_turn'::text) OR ((cvterm.name)::text = 'serine_threonine_turn'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text));


ALTER TABLE so.polypeptide_structural_region OWNER TO kmr44;

--
-- Name: polypeptide_truncation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_truncation AS
 SELECT feature.feature_id AS polypeptide_truncation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_truncation'::text);


ALTER TABLE so.polypeptide_truncation OWNER TO kmr44;

--
-- Name: polypeptide_tungsten_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_tungsten_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_tungsten_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text);


ALTER TABLE so.polypeptide_tungsten_ion_contact_site OWNER TO kmr44;

--
-- Name: polypeptide_turn_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_turn_motif AS
 SELECT feature.feature_id AS polypeptide_turn_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text) OR ((cvterm.name)::text = 'gamma_turn'::text) OR ((cvterm.name)::text = 'serine_threonine_turn'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text));


ALTER TABLE so.polypeptide_turn_motif OWNER TO kmr44;

--
-- Name: polypeptide_variation_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_variation_site AS
 SELECT feature.feature_id AS polypeptide_variation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'natural_variant_site'::text) OR ((cvterm.name)::text = 'mutated_variant_site'::text) OR ((cvterm.name)::text = 'alternate_sequence_site'::text) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text));


ALTER TABLE so.polypeptide_variation_site OWNER TO kmr44;

--
-- Name: polypeptide_zinc_ion_contact_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypeptide_zinc_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_zinc_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text);


ALTER TABLE so.polypeptide_zinc_ion_contact_site OWNER TO kmr44;

--
-- Name: polyploid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polyploid AS
 SELECT feature.feature_id AS polyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'autopolyploid'::text) OR ((cvterm.name)::text = 'allopolyploid'::text) OR ((cvterm.name)::text = 'polyploid'::text));


ALTER TABLE so.polyploid OWNER TO kmr44;

--
-- Name: polypyrimidine_tract; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.polypyrimidine_tract AS
 SELECT feature.feature_id AS polypyrimidine_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypyrimidine_tract'::text);


ALTER TABLE so.polypyrimidine_tract OWNER TO kmr44;

--
-- Name: population_specific_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.population_specific_variant AS
 SELECT feature.feature_id AS population_specific_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'population_specific_variant'::text);


ALTER TABLE so.population_specific_variant OWNER TO kmr44;

--
-- Name: positive_sense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.positive_sense_ssrna_viral_sequence AS
 SELECT feature.feature_id AS positive_sense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text);


ALTER TABLE so.positive_sense_ssrna_viral_sequence OWNER TO kmr44;

--
-- Name: positively_autoregulated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.positively_autoregulated AS
 SELECT feature.feature_id AS positively_autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positively_autoregulated'::text);


ALTER TABLE so.positively_autoregulated OWNER TO kmr44;

--
-- Name: positively_autoregulated_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.positively_autoregulated_gene AS
 SELECT feature.feature_id AS positively_autoregulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positively_autoregulated_gene'::text);


ALTER TABLE so.positively_autoregulated_gene OWNER TO kmr44;

--
-- Name: possible_assembly_error; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.possible_assembly_error AS
 SELECT feature.feature_id AS possible_assembly_error_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'possible_assembly_error'::text);


ALTER TABLE so.possible_assembly_error OWNER TO kmr44;

--
-- Name: possible_base_call_error; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.possible_base_call_error AS
 SELECT feature.feature_id AS possible_base_call_error_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'possible_base_call_error'::text);


ALTER TABLE so.possible_base_call_error OWNER TO kmr44;

--
-- Name: post_translationally_modified_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.post_translationally_modified_region AS
 SELECT feature.feature_id AS post_translationally_modified_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text));


ALTER TABLE so.post_translationally_modified_region OWNER TO kmr44;

--
-- Name: post_translationally_regulated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.post_translationally_regulated AS
 SELECT feature.feature_id AS post_translationally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text) OR ((cvterm.name)::text = 'post_translationally_regulated'::text));


ALTER TABLE so.post_translationally_regulated OWNER TO kmr44;

--
-- Name: post_translationally_regulated_by_protein_modification; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.post_translationally_regulated_by_protein_modification AS
 SELECT feature.feature_id AS post_translationally_regulated_by_protein_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text);


ALTER TABLE so.post_translationally_regulated_by_protein_modification OWNER TO kmr44;

--
-- Name: post_translationally_regulated_by_protein_stability; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.post_translationally_regulated_by_protein_stability AS
 SELECT feature.feature_id AS post_translationally_regulated_by_protein_stability_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text);


ALTER TABLE so.post_translationally_regulated_by_protein_stability OWNER TO kmr44;

--
-- Name: post_translationally_regulated_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.post_translationally_regulated_gene AS
 SELECT feature.feature_id AS post_translationally_regulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_gene'::text);


ALTER TABLE so.post_translationally_regulated_gene OWNER TO kmr44;

--
-- Name: pre_edited_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pre_edited_mrna AS
 SELECT feature.feature_id AS pre_edited_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_edited_mRNA'::text);


ALTER TABLE so.pre_edited_mrna OWNER TO kmr44;

--
-- Name: pre_edited_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pre_edited_region AS
 SELECT feature.feature_id AS pre_edited_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_edited_region'::text);


ALTER TABLE so.pre_edited_region OWNER TO kmr44;

--
-- Name: pre_mirna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pre_mirna AS
 SELECT feature.feature_id AS pre_mirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_miRNA'::text);


ALTER TABLE so.pre_mirna OWNER TO kmr44;

--
-- Name: predicted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.predicted AS
 SELECT feature.feature_id AS predicted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'supported_by_sequence_similarity'::text) OR ((cvterm.name)::text = 'orphan'::text) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text) OR ((cvterm.name)::text = 'supported_by_domain_match'::text) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text) OR ((cvterm.name)::text = 'predicted'::text));


ALTER TABLE so.predicted OWNER TO kmr44;

--
-- Name: predicted_by_ab_initio_computation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.predicted_by_ab_initio_computation AS
 SELECT feature.feature_id AS predicted_by_ab_initio_computation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text);


ALTER TABLE so.predicted_by_ab_initio_computation OWNER TO kmr44;

--
-- Name: predicted_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.predicted_gene AS
 SELECT feature.feature_id AS predicted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'predicted_gene'::text);


ALTER TABLE so.predicted_gene OWNER TO kmr44;

--
-- Name: primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.primary_transcript AS
 SELECT feature.feature_id AS primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text) OR ((cvterm.name)::text = 'capped_primary_transcript'::text) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'primary_transcript'::text));


ALTER TABLE so.primary_transcript OWNER TO kmr44;

--
-- Name: primary_transcript_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.primary_transcript_region AS
 SELECT feature.feature_id AS primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'splice_site'::text) OR ((cvterm.name)::text = 'intron'::text) OR ((cvterm.name)::text = 'clip'::text) OR ((cvterm.name)::text = 'TSS'::text) OR ((cvterm.name)::text = 'transcription_end_site'::text) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text) OR ((cvterm.name)::text = 'intron_domain'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'outron'::text) OR ((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text) OR ((cvterm.name)::text = 'cryptic_splice_site'::text) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'recursive_splice_site'::text) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text) OR ((cvterm.name)::text = 'three_prime_intron'::text) OR ((cvterm.name)::text = 'twintron'::text) OR ((cvterm.name)::text = 'UTR_intron'::text) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text) OR ((cvterm.name)::text = 'spliceosomal_intron'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text) OR ((cvterm.name)::text = 'group_III_intron'::text) OR ((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text) OR ((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text) OR ((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text) OR ((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text) OR ((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text) OR ((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text) OR ((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text) OR ((cvterm.name)::text = 'miRNA_loop'::text) OR ((cvterm.name)::text = 'miRNA_antiguide'::text) OR ((cvterm.name)::text = 'primary_transcript_region'::text));


ALTER TABLE so.primary_transcript_region OWNER TO kmr44;

--
-- Name: primer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.primer AS
 SELECT feature.feature_id AS primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text) OR ((cvterm.name)::text = 'reverse_primer'::text) OR ((cvterm.name)::text = 'ASPE_primer'::text) OR ((cvterm.name)::text = 'dCAPS_primer'::text) OR ((cvterm.name)::text = 'primer'::text));


ALTER TABLE so.primer OWNER TO kmr44;

--
-- Name: primer_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.primer_binding_site AS
 SELECT feature.feature_id AS primer_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'primer_binding_site'::text);


ALTER TABLE so.primer_binding_site OWNER TO kmr44;

--
-- Name: primer_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.primer_match AS
 SELECT feature.feature_id AS primer_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'primer_match'::text);


ALTER TABLE so.primer_match OWNER TO kmr44;

--
-- Name: probe; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.probe AS
 SELECT feature.feature_id AS probe_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'probe'::text));


ALTER TABLE so.probe OWNER TO kmr44;

--
-- Name: processed_pseudogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.processed_pseudogene AS
 SELECT feature.feature_id AS processed_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'processed_pseudogene'::text);


ALTER TABLE so.processed_pseudogene OWNER TO kmr44;

--
-- Name: processed_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.processed_transcript AS
 SELECT feature.feature_id AS processed_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'processed_transcript'::text);


ALTER TABLE so.processed_transcript OWNER TO kmr44;

--
-- Name: proline; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.proline AS
 SELECT feature.feature_id AS proline_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proline'::text);


ALTER TABLE so.proline OWNER TO kmr44;

--
-- Name: proline_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.proline_trna_primary_transcript AS
 SELECT feature.feature_id AS proline_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text);


ALTER TABLE so.proline_trna_primary_transcript OWNER TO kmr44;

--
-- Name: prolyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.prolyl_trna AS
 SELECT feature.feature_id AS prolyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'prolyl_tRNA'::text);


ALTER TABLE so.prolyl_trna OWNER TO kmr44;

--
-- Name: promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.promoter AS
 SELECT feature.feature_id AS promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'promoter'::text));


ALTER TABLE so.promoter OWNER TO kmr44;

--
-- Name: promoter_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.promoter_element AS
 SELECT feature.feature_id AS promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text) OR ((cvterm.name)::text = 'DMv5_motif'::text) OR ((cvterm.name)::text = 'DMv3_motif'::text) OR ((cvterm.name)::text = 'DMv2_motif'::text) OR ((cvterm.name)::text = 'DPE1_motif'::text) OR ((cvterm.name)::text = 'DMv1_motif'::text) OR ((cvterm.name)::text = 'NDM2_motif'::text) OR ((cvterm.name)::text = 'NDM3_motif'::text) OR ((cvterm.name)::text = 'core_promoter_element'::text) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text) OR ((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text) OR ((cvterm.name)::text = 'BREu_motif'::text) OR ((cvterm.name)::text = 'TATA_box'::text) OR ((cvterm.name)::text = 'A_box'::text) OR ((cvterm.name)::text = 'B_box'::text) OR ((cvterm.name)::text = 'C_box'::text) OR ((cvterm.name)::text = 'MTE'::text) OR ((cvterm.name)::text = 'BREd_motif'::text) OR ((cvterm.name)::text = 'DCE'::text) OR ((cvterm.name)::text = 'intermediate_element'::text) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text) OR ((cvterm.name)::text = 'promoter_element'::text));


ALTER TABLE so.promoter_element OWNER TO kmr44;

--
-- Name: promoter_targeting_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.promoter_targeting_sequence AS
 SELECT feature.feature_id AS promoter_targeting_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'promoter_targeting_sequence'::text);


ALTER TABLE so.promoter_targeting_sequence OWNER TO kmr44;

--
-- Name: promoter_trap_construct; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.promoter_trap_construct AS
 SELECT feature.feature_id AS promoter_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'promoter_trap_construct'::text);


ALTER TABLE so.promoter_trap_construct OWNER TO kmr44;

--
-- Name: propeptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.propeptide AS
 SELECT feature.feature_id AS propeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'propeptide'::text);


ALTER TABLE so.propeptide OWNER TO kmr44;

--
-- Name: propeptide_cleavage_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.propeptide_cleavage_site AS
 SELECT feature.feature_id AS propeptide_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'propeptide_cleavage_site'::text);


ALTER TABLE so.propeptide_cleavage_site OWNER TO kmr44;

--
-- Name: prophage; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.prophage AS
 SELECT feature.feature_id AS prophage_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'prophage'::text);


ALTER TABLE so.prophage OWNER TO kmr44;

--
-- Name: proplastid_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.proplastid_gene AS
 SELECT feature.feature_id AS proplastid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proplastid_gene'::text);


ALTER TABLE so.proplastid_gene OWNER TO kmr44;

--
-- Name: proplastid_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.proplastid_sequence AS
 SELECT feature.feature_id AS proplastid_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proplastid_sequence'::text);


ALTER TABLE so.proplastid_sequence OWNER TO kmr44;

--
-- Name: protein_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.protein_binding_site AS
 SELECT feature.feature_id AS protein_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'histone_binding_site'::text) OR ((cvterm.name)::text = 'insulator_binding_site'::text) OR ((cvterm.name)::text = 'enhancer_binding_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'protein_binding_site'::text));


ALTER TABLE so.protein_binding_site OWNER TO kmr44;

--
-- Name: protein_coding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.protein_coding AS
 SELECT feature.feature_id AS protein_coding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'intein_containing'::text) OR ((cvterm.name)::text = 'protein_coding'::text));


ALTER TABLE so.protein_coding OWNER TO kmr44;

--
-- Name: protein_coding_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.protein_coding_gene AS
 SELECT feature.feature_id AS protein_coding_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'protein_coding_gene'::text));


ALTER TABLE so.protein_coding_gene OWNER TO kmr44;

--
-- Name: protein_coding_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.protein_coding_primary_transcript AS
 SELECT feature.feature_id AS protein_coding_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text));


ALTER TABLE so.protein_coding_primary_transcript OWNER TO kmr44;

--
-- Name: protein_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.protein_match AS
 SELECT feature.feature_id AS protein_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'protein_match'::text);


ALTER TABLE so.protein_match OWNER TO kmr44;

--
-- Name: protein_protein_contact; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.protein_protein_contact AS
 SELECT feature.feature_id AS protein_protein_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'protein_protein_contact'::text);


ALTER TABLE so.protein_protein_contact OWNER TO kmr44;

--
-- Name: proviral_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.proviral_gene AS
 SELECT feature.feature_id AS proviral_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'endogenous_retroviral_gene'::text) OR ((cvterm.name)::text = 'proviral_gene'::text));


ALTER TABLE so.proviral_gene OWNER TO kmr44;

--
-- Name: proviral_location; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.proviral_location AS
 SELECT feature.feature_id AS proviral_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'endogenous_retroviral_sequence'::text) OR ((cvterm.name)::text = 'proviral_location'::text));


ALTER TABLE so.proviral_location OWNER TO kmr44;

--
-- Name: proviral_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.proviral_region AS
 SELECT feature.feature_id AS proviral_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'proviral_region'::text));


ALTER TABLE so.proviral_region OWNER TO kmr44;

--
-- Name: proximal_promoter_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.proximal_promoter_element AS
 SELECT feature.feature_id AS proximal_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proximal_promoter_element'::text);


ALTER TABLE so.proximal_promoter_element OWNER TO kmr44;

--
-- Name: pse_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pse_motif AS
 SELECT feature.feature_id AS pse_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PSE_motif'::text);


ALTER TABLE so.pse_motif OWNER TO kmr44;

--
-- Name: pseudogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudogene AS
 SELECT feature.feature_id AS pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'processed_pseudogene'::text) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text) OR ((cvterm.name)::text = 'cassette_pseudogene'::text) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text) OR ((cvterm.name)::text = 'unitary_pseudogene'::text) OR ((cvterm.name)::text = 'pseudogene'::text));


ALTER TABLE so.pseudogene OWNER TO kmr44;

--
-- Name: pseudogene_by_unequal_crossing_over; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudogene_by_unequal_crossing_over AS
 SELECT feature.feature_id AS pseudogene_by_unequal_crossing_over_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text);


ALTER TABLE so.pseudogene_by_unequal_crossing_over OWNER TO kmr44;

--
-- Name: pseudogenic_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudogenic_exon AS
 SELECT feature.feature_id AS pseudogenic_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_exon'::text);


ALTER TABLE so.pseudogenic_exon OWNER TO kmr44;

--
-- Name: pseudogenic_gene_segment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudogenic_gene_segment AS
 SELECT feature.feature_id AS pseudogenic_gene_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_gene_segment'::text);


ALTER TABLE so.pseudogenic_gene_segment OWNER TO kmr44;

--
-- Name: pseudogenic_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudogenic_region AS
 SELECT feature.feature_id AS pseudogenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'decayed_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text) OR ((cvterm.name)::text = 'pseudogenic_region'::text));


ALTER TABLE so.pseudogenic_region OWNER TO kmr44;

--
-- Name: pseudogenic_rrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudogenic_rrna AS
 SELECT feature.feature_id AS pseudogenic_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_rRNA'::text);


ALTER TABLE so.pseudogenic_rrna OWNER TO kmr44;

--
-- Name: pseudogenic_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudogenic_transcript AS
 SELECT feature.feature_id AS pseudogenic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_transcript'::text);


ALTER TABLE so.pseudogenic_transcript OWNER TO kmr44;

--
-- Name: pseudogenic_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudogenic_trna AS
 SELECT feature.feature_id AS pseudogenic_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_tRNA'::text);


ALTER TABLE so.pseudogenic_trna OWNER TO kmr44;

--
-- Name: pseudoknot; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudoknot AS
 SELECT feature.feature_id AS pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'recoding_pseudoknot'::text) OR ((cvterm.name)::text = 'H_pseudoknot'::text) OR ((cvterm.name)::text = 'pseudoknot'::text));


ALTER TABLE so.pseudoknot OWNER TO kmr44;

--
-- Name: pseudouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudouridine AS
 SELECT feature.feature_id AS pseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudouridine'::text);


ALTER TABLE so.pseudouridine OWNER TO kmr44;

--
-- Name: pseudouridylation_guide_snorna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pseudouridylation_guide_snorna AS
 SELECT feature.feature_id AS pseudouridylation_guide_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text);


ALTER TABLE so.pseudouridylation_guide_snorna OWNER TO kmr44;

--
-- Name: purine_to_pyrimidine_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.purine_to_pyrimidine_transversion AS
 SELECT feature.feature_id AS purine_to_pyrimidine_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text));


ALTER TABLE so.purine_to_pyrimidine_transversion OWNER TO kmr44;

--
-- Name: purine_transition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.purine_transition AS
 SELECT feature.feature_id AS purine_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text));


ALTER TABLE so.purine_transition OWNER TO kmr44;

--
-- Name: pyrimidine_to_purine_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pyrimidine_to_purine_transversion AS
 SELECT feature.feature_id AS pyrimidine_to_purine_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text));


ALTER TABLE so.pyrimidine_to_purine_transversion OWNER TO kmr44;

--
-- Name: pyrimidine_transition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pyrimidine_transition AS
 SELECT feature.feature_id AS pyrimidine_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'pyrimidine_transition'::text));


ALTER TABLE so.pyrimidine_transition OWNER TO kmr44;

--
-- Name: pyrosequenced_read; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pyrosequenced_read AS
 SELECT feature.feature_id AS pyrosequenced_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrosequenced_read'::text);


ALTER TABLE so.pyrosequenced_read OWNER TO kmr44;

--
-- Name: pyrrolysine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pyrrolysine AS
 SELECT feature.feature_id AS pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysine'::text);


ALTER TABLE so.pyrrolysine OWNER TO kmr44;

--
-- Name: pyrrolysine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pyrrolysine_trna_primary_transcript AS
 SELECT feature.feature_id AS pyrrolysine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text);


ALTER TABLE so.pyrrolysine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: pyrrolysyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.pyrrolysyl_trna AS
 SELECT feature.feature_id AS pyrrolysyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text);


ALTER TABLE so.pyrrolysyl_trna OWNER TO kmr44;

--
-- Name: qtl; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.qtl AS
 SELECT feature.feature_id AS qtl_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'QTL'::text);


ALTER TABLE so.qtl OWNER TO kmr44;

--
-- Name: quality_value; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.quality_value AS
 SELECT feature.feature_id AS quality_value_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'quality_value'::text);


ALTER TABLE so.quality_value OWNER TO kmr44;

--
-- Name: quantitative_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.quantitative_variant AS
 SELECT feature.feature_id AS quantitative_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'quantitative_variant'::text);


ALTER TABLE so.quantitative_variant OWNER TO kmr44;

--
-- Name: queuosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.queuosine AS
 SELECT feature.feature_id AS queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'queuosine'::text);


ALTER TABLE so.queuosine OWNER TO kmr44;

--
-- Name: r_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.r_five_prime_ltr_region AS
 SELECT feature.feature_id AS r_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_five_prime_LTR_region'::text);


ALTER TABLE so.r_five_prime_ltr_region OWNER TO kmr44;

--
-- Name: r_gna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.r_gna AS
 SELECT feature.feature_id AS r_gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_GNA'::text);


ALTER TABLE so.r_gna OWNER TO kmr44;

--
-- Name: r_gna_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.r_gna_oligo AS
 SELECT feature.feature_id AS r_gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_GNA_oligo'::text);


ALTER TABLE so.r_gna_oligo OWNER TO kmr44;

--
-- Name: r_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.r_ltr_region AS
 SELECT feature.feature_id AS r_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text));


ALTER TABLE so.r_ltr_region OWNER TO kmr44;

--
-- Name: r_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.r_three_prime_ltr_region AS
 SELECT feature.feature_id AS r_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_three_prime_LTR_region'::text);


ALTER TABLE so.r_three_prime_ltr_region OWNER TO kmr44;

--
-- Name: random_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.random_sequence AS
 SELECT feature.feature_id AS random_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'random_sequence'::text);


ALTER TABLE so.random_sequence OWNER TO kmr44;

--
-- Name: rapd; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rapd AS
 SELECT feature.feature_id AS rapd_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RAPD'::text);


ALTER TABLE so.rapd OWNER TO kmr44;

--
-- Name: rare_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rare_variant AS
 SELECT feature.feature_id AS rare_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rare_variant'::text);


ALTER TABLE so.rare_variant OWNER TO kmr44;

--
-- Name: rasirna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rasirna AS
 SELECT feature.feature_id AS rasirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rasiRNA'::text);


ALTER TABLE so.rasirna OWNER TO kmr44;

--
-- Name: rate_of_transcription_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rate_of_transcription_variant AS
 SELECT feature.feature_id AS rate_of_transcription_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'increased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text));


ALTER TABLE so.rate_of_transcription_variant OWNER TO kmr44;

--
-- Name: read; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.read AS
 SELECT feature.feature_id AS read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'read_pair'::text) OR ((cvterm.name)::text = 'contig_read'::text) OR ((cvterm.name)::text = 'BAC_end'::text) OR ((cvterm.name)::text = 'dye_terminator_read'::text) OR ((cvterm.name)::text = 'pyrosequenced_read'::text) OR ((cvterm.name)::text = 'ligation_based_read'::text) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text) OR ((cvterm.name)::text = 'PAC_end'::text) OR ((cvterm.name)::text = 'YAC_end'::text) OR ((cvterm.name)::text = 'clone_end'::text) OR ((cvterm.name)::text = 'read'::text));


ALTER TABLE so.read OWNER TO kmr44;

--
-- Name: read_pair; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.read_pair AS
 SELECT feature.feature_id AS read_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'read_pair'::text);


ALTER TABLE so.read_pair OWNER TO kmr44;

--
-- Name: reading_frame; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.reading_frame AS
 SELECT feature.feature_id AS reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'ORF'::text) OR ((cvterm.name)::text = 'blocked_reading_frame'::text) OR ((cvterm.name)::text = 'mini_gene'::text) OR ((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'reading_frame'::text));


ALTER TABLE so.reading_frame OWNER TO kmr44;

--
-- Name: reagent; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.reagent AS
 SELECT feature.feature_id AS reagent_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'PCR_product'::text) OR ((cvterm.name)::text = 'clone'::text) OR ((cvterm.name)::text = 'rescue_region'::text) OR ((cvterm.name)::text = 'oligo'::text) OR ((cvterm.name)::text = 'clone_insert'::text) OR ((cvterm.name)::text = 'cloned_region'::text) OR ((cvterm.name)::text = 'databank_entry'::text) OR ((cvterm.name)::text = 'RAPD'::text) OR ((cvterm.name)::text = 'genomic_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text) OR ((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'aptamer'::text) OR ((cvterm.name)::text = 'probe'::text) OR ((cvterm.name)::text = 'tag'::text) OR ((cvterm.name)::text = 'ss_oligo'::text) OR ((cvterm.name)::text = 'ds_oligo'::text) OR ((cvterm.name)::text = 'DNAzyme'::text) OR ((cvterm.name)::text = 'synthetic_oligo'::text) OR ((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text) OR ((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text) OR ((cvterm.name)::text = 'EST'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text) OR ((cvterm.name)::text = 'UST'::text) OR ((cvterm.name)::text = 'RST'::text) OR ((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text) OR ((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text) OR ((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text) OR ((cvterm.name)::text = 'reverse_primer'::text) OR ((cvterm.name)::text = 'ASPE_primer'::text) OR ((cvterm.name)::text = 'dCAPS_primer'::text) OR ((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text) OR ((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text) OR ((cvterm.name)::text = 'LNA_oligo'::text) OR ((cvterm.name)::text = 'TNA_oligo'::text) OR ((cvterm.name)::text = 'GNA_oligo'::text) OR ((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'reagent'::text));


ALTER TABLE so.reagent OWNER TO kmr44;

--
-- Name: rearranged_at_dna_level; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rearranged_at_dna_level AS
 SELECT feature.feature_id AS rearranged_at_dna_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rearranged_at_DNA_level'::text);


ALTER TABLE so.rearranged_at_dna_level OWNER TO kmr44;

--
-- Name: reciprocal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.reciprocal AS
 SELECT feature.feature_id AS reciprocal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reciprocal'::text);


ALTER TABLE so.reciprocal OWNER TO kmr44;

--
-- Name: reciprocal_chromosomal_translocation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.reciprocal_chromosomal_translocation AS
 SELECT feature.feature_id AS reciprocal_chromosomal_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text);


ALTER TABLE so.reciprocal_chromosomal_translocation OWNER TO kmr44;

--
-- Name: recoded; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recoded AS
 SELECT feature.feature_id AS recoded_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'codon_redefined'::text) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'translationally_frameshifted'::text) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'recoded'::text));


ALTER TABLE so.recoded OWNER TO kmr44;

--
-- Name: recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recoded_by_translational_bypass AS
 SELECT feature.feature_id AS recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recoded_by_translational_bypass'::text);


ALTER TABLE so.recoded_by_translational_bypass OWNER TO kmr44;

--
-- Name: recoded_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recoded_codon AS
 SELECT feature.feature_id AS recoded_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'recoded_codon'::text));


ALTER TABLE so.recoded_codon OWNER TO kmr44;

--
-- Name: recoded_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recoded_mrna AS
 SELECT feature.feature_id AS recoded_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text) OR ((cvterm.name)::text = 'recoded_mRNA'::text));


ALTER TABLE so.recoded_mrna OWNER TO kmr44;

--
-- Name: recoding_pseudoknot; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recoding_pseudoknot AS
 SELECT feature.feature_id AS recoding_pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recoding_pseudoknot'::text);


ALTER TABLE so.recoding_pseudoknot OWNER TO kmr44;

--
-- Name: recoding_stimulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recoding_stimulatory_region AS
 SELECT feature.feature_id AS recoding_stimulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text) OR ((cvterm.name)::text = 'stop_codon_signal'::text) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text));


ALTER TABLE so.recoding_stimulatory_region OWNER TO kmr44;

--
-- Name: recombination_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombination_feature AS
 SELECT feature.feature_id AS recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'recombination_hotspot'::text) OR ((cvterm.name)::text = 'haplotype_block'::text) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text) OR ((cvterm.name)::text = 'iDNA'::text) OR ((cvterm.name)::text = 'specific_recombination_site'::text) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text) OR ((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text) OR ((cvterm.name)::text = 'inversion_site_part'::text) OR ((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text) OR ((cvterm.name)::text = 'attB_site'::text) OR ((cvterm.name)::text = 'attL_site'::text) OR ((cvterm.name)::text = 'attR_site'::text) OR ((cvterm.name)::text = 'attC_site'::text) OR ((cvterm.name)::text = 'attCtn_site'::text) OR ((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text) OR ((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text) OR ((cvterm.name)::text = 'recombination_feature'::text));


ALTER TABLE so.recombination_feature OWNER TO kmr44;

--
-- Name: recombination_feature_of_rearranged_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombination_feature_of_rearranged_gene AS
 SELECT feature.feature_id AS recombination_feature_of_rearranged_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text) OR ((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text));


ALTER TABLE so.recombination_feature_of_rearranged_gene OWNER TO kmr44;

--
-- Name: recombination_hotspot; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombination_hotspot AS
 SELECT feature.feature_id AS recombination_hotspot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_hotspot'::text);


ALTER TABLE so.recombination_hotspot OWNER TO kmr44;

--
-- Name: recombination_regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombination_regulatory_region AS
 SELECT feature.feature_id AS recombination_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_regulatory_region'::text);


ALTER TABLE so.recombination_regulatory_region OWNER TO kmr44;

--
-- Name: recombination_signal_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombination_signal_sequence AS
 SELECT feature.feature_id AS recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_signal_sequence'::text);


ALTER TABLE so.recombination_signal_sequence OWNER TO kmr44;

--
-- Name: recombinationally_inverted_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombinationally_inverted_gene AS
 SELECT feature.feature_id AS recombinationally_inverted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_inverted_gene'::text);


ALTER TABLE so.recombinationally_inverted_gene OWNER TO kmr44;

--
-- Name: recombinationally_rearranged; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombinationally_rearranged AS
 SELECT feature.feature_id AS recombinationally_rearranged_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_rearranged'::text);


ALTER TABLE so.recombinationally_rearranged OWNER TO kmr44;

--
-- Name: recombinationally_rearranged_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombinationally_rearranged_gene AS
 SELECT feature.feature_id AS recombinationally_rearranged_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'recombinationally_inverted_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text));


ALTER TABLE so.recombinationally_rearranged_gene OWNER TO kmr44;

--
-- Name: recombinationally_rearranged_vertebrate_immune_system_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recombinationally_rearranged_vertebrate_immune_system_gene AS
 SELECT feature.feature_id AS recombinationally_rearranged_vertebrate_immune_system_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text);


ALTER TABLE so.recombinationally_rearranged_vertebrate_immune_system_gene OWNER TO kmr44;

--
-- Name: recursive_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.recursive_splice_site AS
 SELECT feature.feature_id AS recursive_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recursive_splice_site'::text);


ALTER TABLE so.recursive_splice_site OWNER TO kmr44;

--
-- Name: reference_genome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.reference_genome AS
 SELECT feature.feature_id AS reference_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reference_genome'::text);


ALTER TABLE so.reference_genome OWNER TO kmr44;

--
-- Name: region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.region AS
 SELECT feature.feature_id AS region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'biomaterial_region'::text) OR ((cvterm.name)::text = 'experimental_feature'::text) OR ((cvterm.name)::text = 'biological_region'::text) OR ((cvterm.name)::text = 'topologically_defined_region'::text) OR ((cvterm.name)::text = 'reagent'::text) OR ((cvterm.name)::text = 'engineered_region'::text) OR ((cvterm.name)::text = 'PCR_product'::text) OR ((cvterm.name)::text = 'clone'::text) OR ((cvterm.name)::text = 'rescue_region'::text) OR ((cvterm.name)::text = 'oligo'::text) OR ((cvterm.name)::text = 'clone_insert'::text) OR ((cvterm.name)::text = 'cloned_region'::text) OR ((cvterm.name)::text = 'databank_entry'::text) OR ((cvterm.name)::text = 'RAPD'::text) OR ((cvterm.name)::text = 'genomic_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text) OR ((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'aptamer'::text) OR ((cvterm.name)::text = 'probe'::text) OR ((cvterm.name)::text = 'tag'::text) OR ((cvterm.name)::text = 'ss_oligo'::text) OR ((cvterm.name)::text = 'ds_oligo'::text) OR ((cvterm.name)::text = 'DNAzyme'::text) OR ((cvterm.name)::text = 'synthetic_oligo'::text) OR ((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text) OR ((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text) OR ((cvterm.name)::text = 'EST'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text) OR ((cvterm.name)::text = 'UST'::text) OR ((cvterm.name)::text = 'RST'::text) OR ((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text) OR ((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text) OR ((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text) OR ((cvterm.name)::text = 'reverse_primer'::text) OR ((cvterm.name)::text = 'ASPE_primer'::text) OR ((cvterm.name)::text = 'dCAPS_primer'::text) OR ((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text) OR ((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text) OR ((cvterm.name)::text = 'LNA_oligo'::text) OR ((cvterm.name)::text = 'TNA_oligo'::text) OR ((cvterm.name)::text = 'GNA_oligo'::text) OR ((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_region'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'match_part'::text) OR ((cvterm.name)::text = 'assembly_component'::text) OR ((cvterm.name)::text = 'conserved_region'::text) OR ((cvterm.name)::text = 'match'::text) OR ((cvterm.name)::text = 'remark'::text) OR ((cvterm.name)::text = 'reading_frame'::text) OR ((cvterm.name)::text = 'consensus_region'::text) OR ((cvterm.name)::text = 'low_complexity_region'::text) OR ((cvterm.name)::text = 'assembly'::text) OR ((cvterm.name)::text = 'transcribed_fragment'::text) OR ((cvterm.name)::text = 'transcribed_cluster'::text) OR ((cvterm.name)::text = 'high_identity_region'::text) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text) OR ((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'read'::text) OR ((cvterm.name)::text = 'restriction_fragment'::text) OR ((cvterm.name)::text = 'golden_path_fragment'::text) OR ((cvterm.name)::text = 'tiling_path_fragment'::text) OR ((cvterm.name)::text = 'gap'::text) OR ((cvterm.name)::text = 'sonicate_fragment'::text) OR ((cvterm.name)::text = 'paired_end_fragment'::text) OR ((cvterm.name)::text = 'read_pair'::text) OR ((cvterm.name)::text = 'contig_read'::text) OR ((cvterm.name)::text = 'BAC_end'::text) OR ((cvterm.name)::text = 'dye_terminator_read'::text) OR ((cvterm.name)::text = 'pyrosequenced_read'::text) OR ((cvterm.name)::text = 'ligation_based_read'::text) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text) OR ((cvterm.name)::text = 'PAC_end'::text) OR ((cvterm.name)::text = 'YAC_end'::text) OR ((cvterm.name)::text = 'clone_end'::text) OR ((cvterm.name)::text = 'RFLP_fragment'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'coding_conserved_region'::text) OR ((cvterm.name)::text = 'nc_conserved_region'::text) OR ((cvterm.name)::text = 'RR_tract'::text) OR ((cvterm.name)::text = 'homologous_region'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text) OR ((cvterm.name)::text = 'X_element'::text) OR ((cvterm.name)::text = 'U_box'::text) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text) OR ((cvterm.name)::text = 'syntenic_region'::text) OR ((cvterm.name)::text = 'paralogous_region'::text) OR ((cvterm.name)::text = 'orthologous_region'::text) OR ((cvterm.name)::text = 'nucleotide_match'::text) OR ((cvterm.name)::text = 'protein_match'::text) OR ((cvterm.name)::text = 'expressed_sequence_match'::text) OR ((cvterm.name)::text = 'cross_genome_match'::text) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text) OR ((cvterm.name)::text = 'primer_match'::text) OR ((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text) OR ((cvterm.name)::text = 'UST_match'::text) OR ((cvterm.name)::text = 'RST_match'::text) OR ((cvterm.name)::text = 'sequence_difference'::text) OR ((cvterm.name)::text = 'experimental_result_region'::text) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text) OR ((cvterm.name)::text = 'possible_base_call_error'::text) OR ((cvterm.name)::text = 'possible_assembly_error'::text) OR ((cvterm.name)::text = 'assembly_error_correction'::text) OR ((cvterm.name)::text = 'base_call_error_correction'::text) OR ((cvterm.name)::text = 'overlapping_feature_set'::text) OR ((cvterm.name)::text = 'no_output'::text) OR ((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'non_adjacent_residues'::text) OR ((cvterm.name)::text = 'non_terminal_residue'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text) OR ((cvterm.name)::text = 'sequence_uncertainty'::text) OR ((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'ORF'::text) OR ((cvterm.name)::text = 'blocked_reading_frame'::text) OR ((cvterm.name)::text = 'mini_gene'::text) OR ((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'sequence_assembly'::text) OR ((cvterm.name)::text = 'fragment_assembly'::text) OR ((cvterm.name)::text = 'supercontig'::text) OR ((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'tiling_path'::text) OR ((cvterm.name)::text = 'virtual_sequence'::text) OR ((cvterm.name)::text = 'golden_path'::text) OR ((cvterm.name)::text = 'ultracontig'::text) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text) OR ((cvterm.name)::text = 'fingerprint_map'::text) OR ((cvterm.name)::text = 'STS_map'::text) OR ((cvterm.name)::text = 'RH_map'::text) OR ((cvterm.name)::text = 'unigene_cluster'::text) OR ((cvterm.name)::text = 'CHiP_seq_region'::text) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'linkage_group'::text) OR ((cvterm.name)::text = 'polypeptide'::text) OR ((cvterm.name)::text = 'deletion'::text) OR ((cvterm.name)::text = 'origin_of_replication'::text) OR ((cvterm.name)::text = 'recombination_feature'::text) OR ((cvterm.name)::text = 'CpG_island'::text) OR ((cvterm.name)::text = 'pseudogene'::text) OR ((cvterm.name)::text = 'binding_site'::text) OR ((cvterm.name)::text = 'pseudogenic_region'::text) OR ((cvterm.name)::text = 'cap'::text) OR ((cvterm.name)::text = 'intergenic_region'::text) OR ((cvterm.name)::text = 'oligo_U_tail'::text) OR ((cvterm.name)::text = 'polyA_sequence'::text) OR ((cvterm.name)::text = 'repeat_region'::text) OR ((cvterm.name)::text = 'insertion'::text) OR ((cvterm.name)::text = 'gene'::text) OR ((cvterm.name)::text = 'repeat_unit'::text) OR ((cvterm.name)::text = 'QTL'::text) OR ((cvterm.name)::text = 'chromosome_part'::text) OR ((cvterm.name)::text = 'gene_member_region'::text) OR ((cvterm.name)::text = 'transcript_region'::text) OR ((cvterm.name)::text = 'polypeptide_region'::text) OR ((cvterm.name)::text = 'gene_component_region'::text) OR ((cvterm.name)::text = 'mobile_genetic_element'::text) OR ((cvterm.name)::text = 'replicon'::text) OR ((cvterm.name)::text = 'base'::text) OR ((cvterm.name)::text = 'amino_acid'::text) OR ((cvterm.name)::text = 'genetic_marker'::text) OR ((cvterm.name)::text = 'sequence_motif'::text) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text) OR ((cvterm.name)::text = 'open_chromatin_region'::text) OR ((cvterm.name)::text = 'gene_group'::text) OR ((cvterm.name)::text = 'substitution'::text) OR ((cvterm.name)::text = 'inversion'::text) OR ((cvterm.name)::text = 'retron'::text) OR ((cvterm.name)::text = 'G_quartet'::text) OR ((cvterm.name)::text = 'base_pair'::text) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'pseudoknot'::text) OR ((cvterm.name)::text = 'WC_base_pair'::text) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'wobble_base_pair'::text) OR ((cvterm.name)::text = 'stem_loop'::text) OR ((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'i_motif'::text) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text) OR ((cvterm.name)::text = 'H_pseudoknot'::text) OR ((cvterm.name)::text = 'D_loop'::text) OR ((cvterm.name)::text = 'ARS'::text) OR ((cvterm.name)::text = 'oriT'::text) OR ((cvterm.name)::text = 'amplification_origin'::text) OR ((cvterm.name)::text = 'oriV'::text) OR ((cvterm.name)::text = 'oriC'::text) OR ((cvterm.name)::text = 'recombination_hotspot'::text) OR ((cvterm.name)::text = 'haplotype_block'::text) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text) OR ((cvterm.name)::text = 'iDNA'::text) OR ((cvterm.name)::text = 'specific_recombination_site'::text) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text) OR ((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text) OR ((cvterm.name)::text = 'inversion_site_part'::text) OR ((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text) OR ((cvterm.name)::text = 'attB_site'::text) OR ((cvterm.name)::text = 'attL_site'::text) OR ((cvterm.name)::text = 'attR_site'::text) OR ((cvterm.name)::text = 'attC_site'::text) OR ((cvterm.name)::text = 'attCtn_site'::text) OR ((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text) OR ((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text) OR ((cvterm.name)::text = 'processed_pseudogene'::text) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text) OR ((cvterm.name)::text = 'cassette_pseudogene'::text) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text) OR ((cvterm.name)::text = 'unitary_pseudogene'::text) OR ((cvterm.name)::text = 'protein_binding_site'::text) OR ((cvterm.name)::text = 'epitope'::text) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text) OR ((cvterm.name)::text = 'metal_binding_site'::text) OR ((cvterm.name)::text = 'ligand_binding_site'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'histone_binding_site'::text) OR ((cvterm.name)::text = 'insulator_binding_site'::text) OR ((cvterm.name)::text = 'enhancer_binding_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'miRNA_target_site'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text) OR ((cvterm.name)::text = 'primer_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'decayed_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text) OR ((cvterm.name)::text = 'long_terminal_repeat'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'inverted_repeat'::text) OR ((cvterm.name)::text = 'direct_repeat'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'dispersed_repeat'::text) OR ((cvterm.name)::text = 'tandem_repeat'::text) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text) OR ((cvterm.name)::text = 'Y_prime_element'::text) OR ((cvterm.name)::text = 'telomeric_repeat'::text) OR ((cvterm.name)::text = 'nested_repeat'::text) OR ((cvterm.name)::text = 'centromeric_repeat'::text) OR ((cvterm.name)::text = 'five_prime_LTR'::text) OR ((cvterm.name)::text = 'three_prime_LTR'::text) OR ((cvterm.name)::text = 'solo_LTR'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'target_site_duplication'::text) OR ((cvterm.name)::text = 'CRISPR'::text) OR ((cvterm.name)::text = 'satellite_DNA'::text) OR ((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text) OR ((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text) OR ((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text) OR ((cvterm.name)::text = 'nuclear_gene'::text) OR ((cvterm.name)::text = 'mt_gene'::text) OR ((cvterm.name)::text = 'plastid_gene'::text) OR ((cvterm.name)::text = 'nucleomorph_gene'::text) OR ((cvterm.name)::text = 'plasmid_gene'::text) OR ((cvterm.name)::text = 'proviral_gene'::text) OR ((cvterm.name)::text = 'transposable_element_gene'::text) OR ((cvterm.name)::text = 'silenced_gene'::text) OR ((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'foreign_gene'::text) OR ((cvterm.name)::text = 'fusion_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text) OR ((cvterm.name)::text = 'rescue_gene'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text) OR ((cvterm.name)::text = 'transgene'::text) OR ((cvterm.name)::text = 'predicted_gene'::text) OR ((cvterm.name)::text = 'protein_coding_gene'::text) OR ((cvterm.name)::text = 'retrogene'::text) OR ((cvterm.name)::text = 'ncRNA_gene'::text) OR ((cvterm.name)::text = 'cryptic_gene'::text) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'gene_cassette'::text) OR ((cvterm.name)::text = 'kinetoplast_gene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'apicoplast_gene'::text) OR ((cvterm.name)::text = 'ct_gene'::text) OR ((cvterm.name)::text = 'chromoplast_gene'::text) OR ((cvterm.name)::text = 'cyanelle_gene'::text) OR ((cvterm.name)::text = 'leucoplast_gene'::text) OR ((cvterm.name)::text = 'proplastid_gene'::text) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'floxed_gene'::text) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'gRNA_gene'::text) OR ((cvterm.name)::text = 'miRNA_gene'::text) OR ((cvterm.name)::text = 'scRNA_gene'::text) OR ((cvterm.name)::text = 'snoRNA_gene'::text) OR ((cvterm.name)::text = 'snRNA_gene'::text) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text) OR ((cvterm.name)::text = 'stRNA_gene'::text) OR ((cvterm.name)::text = 'tmRNA_gene'::text) OR ((cvterm.name)::text = 'tRNA_gene'::text) OR ((cvterm.name)::text = 'rRNA_gene'::text) OR ((cvterm.name)::text = 'piRNA_gene'::text) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text) OR ((cvterm.name)::text = 'lincRNA_gene'::text) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text) OR ((cvterm.name)::text = 'chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosome_band'::text) OR ((cvterm.name)::text = 'interband'::text) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text) OR ((cvterm.name)::text = 'matrix_attachment_site'::text) OR ((cvterm.name)::text = 'centromere'::text) OR ((cvterm.name)::text = 'telomere'::text) OR ((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text) OR ((cvterm.name)::text = 'transcript'::text) OR ((cvterm.name)::text = 'regulatory_region'::text) OR ((cvterm.name)::text = 'polycistronic_transcript'::text) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'primary_transcript'::text) OR ((cvterm.name)::text = 'mature_transcript'::text) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_transcript'::text) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text) OR ((cvterm.name)::text = 'edited_transcript'::text) OR ((cvterm.name)::text = 'processed_transcript'::text) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text) OR ((cvterm.name)::text = 'capped_primary_transcript'::text) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'exemplar_mRNA'::text) OR ((cvterm.name)::text = 'capped_mRNA'::text) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'recoded_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text) OR ((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text) OR ((cvterm.name)::text = 'tRNA'::text) OR ((cvterm.name)::text = 'snRNA'::text) OR ((cvterm.name)::text = 'snoRNA'::text) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text) OR ((cvterm.name)::text = 'RNase_P_RNA'::text) OR ((cvterm.name)::text = 'telomerase_RNA'::text) OR ((cvterm.name)::text = 'vault_RNA'::text) OR ((cvterm.name)::text = 'Y_RNA'::text) OR ((cvterm.name)::text = 'rasiRNA'::text) OR ((cvterm.name)::text = 'SRP_RNA'::text) OR ((cvterm.name)::text = 'guide_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text) OR ((cvterm.name)::text = 'siRNA'::text) OR ((cvterm.name)::text = 'stRNA'::text) OR ((cvterm.name)::text = 'class_II_RNA'::text) OR ((cvterm.name)::text = 'class_I_RNA'::text) OR ((cvterm.name)::text = 'piRNA'::text) OR ((cvterm.name)::text = 'lincRNA'::text) OR ((cvterm.name)::text = 'tasiRNA'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text) OR ((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text) OR ((cvterm.name)::text = 'glycyl_tRNA'::text) OR ((cvterm.name)::text = 'histidyl_tRNA'::text) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text) OR ((cvterm.name)::text = 'leucyl_tRNA'::text) OR ((cvterm.name)::text = 'lysyl_tRNA'::text) OR ((cvterm.name)::text = 'methionyl_tRNA'::text) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text) OR ((cvterm.name)::text = 'prolyl_tRNA'::text) OR ((cvterm.name)::text = 'seryl_tRNA'::text) OR ((cvterm.name)::text = 'threonyl_tRNA'::text) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text) OR ((cvterm.name)::text = 'valyl_tRNA'::text) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text) OR ((cvterm.name)::text = 'arginyl_tRNA'::text) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text) OR ((cvterm.name)::text = 'U4_snRNA'::text) OR ((cvterm.name)::text = 'U4atac_snRNA'::text) OR ((cvterm.name)::text = 'U5_snRNA'::text) OR ((cvterm.name)::text = 'U6_snRNA'::text) OR ((cvterm.name)::text = 'U6atac_snRNA'::text) OR ((cvterm.name)::text = 'U11_snRNA'::text) OR ((cvterm.name)::text = 'U12_snRNA'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text) OR ((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text) OR ((cvterm.name)::text = 'OxyS_RNA'::text) OR ((cvterm.name)::text = 'RprA_RNA'::text) OR ((cvterm.name)::text = 'RRE_RNA'::text) OR ((cvterm.name)::text = 'spot_42_RNA'::text) OR ((cvterm.name)::text = 'tmRNA'::text) OR ((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text) OR ((cvterm.name)::text = 'replication_regulatory_region'::text) OR ((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text) OR ((cvterm.name)::text = 'CRM'::text) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text) OR ((cvterm.name)::text = 'ISRE'::text) OR ((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text) OR ((cvterm.name)::text = 'silencer'::text) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text) OR ((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'exon'::text) OR ((cvterm.name)::text = 'edited_transcript_feature'::text) OR ((cvterm.name)::text = 'mature_transcript_region'::text) OR ((cvterm.name)::text = 'primary_transcript_region'::text) OR ((cvterm.name)::text = 'exon_region'::text) OR ((cvterm.name)::text = 'anchor_binding_site'::text) OR ((cvterm.name)::text = 'coding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text) OR ((cvterm.name)::text = 'interior_exon'::text) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text) OR ((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'pre_edited_region'::text) OR ((cvterm.name)::text = 'editing_block'::text) OR ((cvterm.name)::text = 'editing_domain'::text) OR ((cvterm.name)::text = 'unedited_region'::text) OR ((cvterm.name)::text = 'mRNA_region'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text) OR ((cvterm.name)::text = 'guide_RNA_region'::text) OR ((cvterm.name)::text = 'tRNA_region'::text) OR ((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text) OR ((cvterm.name)::text = 'UTR'::text) OR ((cvterm.name)::text = 'CDS'::text) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text) OR ((cvterm.name)::text = 'UTR_region'::text) OR ((cvterm.name)::text = 'CDS_region'::text) OR ((cvterm.name)::text = 'translational_frameshift'::text) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'kozak_sequence'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text) OR ((cvterm.name)::text = 'internal_UTR'::text) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text) OR ((cvterm.name)::text = 'CDS_independently_known'::text) OR ((cvterm.name)::text = 'CDS_predicted'::text) OR ((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text) OR ((cvterm.name)::text = 'Bruno_response_element'::text) OR ((cvterm.name)::text = 'iron_responsive_element'::text) OR ((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text) OR ((cvterm.name)::text = 'codon'::text) OR ((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text) OR ((cvterm.name)::text = 'stop_codon'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text) OR ((cvterm.name)::text = 'stop_codon_signal'::text) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text) OR ((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text) OR ((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text) OR ((cvterm.name)::text = 'CCA_tail'::text) OR ((cvterm.name)::text = 'DHU_loop'::text) OR ((cvterm.name)::text = 'T_loop'::text) OR ((cvterm.name)::text = 'splice_site'::text) OR ((cvterm.name)::text = 'intron'::text) OR ((cvterm.name)::text = 'clip'::text) OR ((cvterm.name)::text = 'TSS'::text) OR ((cvterm.name)::text = 'transcription_end_site'::text) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text) OR ((cvterm.name)::text = 'intron_domain'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'outron'::text) OR ((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text) OR ((cvterm.name)::text = 'cryptic_splice_site'::text) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'recursive_splice_site'::text) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text) OR ((cvterm.name)::text = 'three_prime_intron'::text) OR ((cvterm.name)::text = 'twintron'::text) OR ((cvterm.name)::text = 'UTR_intron'::text) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text) OR ((cvterm.name)::text = 'spliceosomal_intron'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text) OR ((cvterm.name)::text = 'group_III_intron'::text) OR ((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text) OR ((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text) OR ((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text) OR ((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text) OR ((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text) OR ((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text) OR ((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text) OR ((cvterm.name)::text = 'miRNA_loop'::text) OR ((cvterm.name)::text = 'miRNA_antiguide'::text) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'mature_protein_region'::text) OR ((cvterm.name)::text = 'immature_peptide_region'::text) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text) OR ((cvterm.name)::text = 'peptide_localization_signal'::text) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text) OR ((cvterm.name)::text = 'active_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'membrane_structure'::text) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text) OR ((cvterm.name)::text = 'beta_bulge_loop'::text) OR ((cvterm.name)::text = 'beta_strand'::text) OR ((cvterm.name)::text = 'peptide_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop'::text) OR ((cvterm.name)::text = 'serine_threonine_motif'::text) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text) OR ((cvterm.name)::text = 'alpha_beta_motif'::text) OR ((cvterm.name)::text = 'peptide_coil'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text) OR ((cvterm.name)::text = 'three_ten_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text) OR ((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text) OR ((cvterm.name)::text = 'gamma_turn'::text) OR ((cvterm.name)::text = 'serine_threonine_turn'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text) OR ((cvterm.name)::text = 'natural_variant_site'::text) OR ((cvterm.name)::text = 'mutated_variant_site'::text) OR ((cvterm.name)::text = 'alternate_sequence_site'::text) OR ((cvterm.name)::text = 'signal_peptide'::text) OR ((cvterm.name)::text = 'transit_peptide'::text) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text) OR ((cvterm.name)::text = 'nuclear_export_signal'::text) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text) OR ((cvterm.name)::text = 'intein'::text) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text) OR ((cvterm.name)::text = 'propeptide'::text) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text) OR ((cvterm.name)::text = 'n_terminal_region'::text) OR ((cvterm.name)::text = 'c_terminal_region'::text) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text) OR ((cvterm.name)::text = 'polypeptide_repeat'::text) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text) OR ((cvterm.name)::text = 'molecular_contact_region'::text) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'non_transcribed_region'::text) OR ((cvterm.name)::text = 'gene_fragment'::text) OR ((cvterm.name)::text = 'TSS_region'::text) OR ((cvterm.name)::text = 'gene_segment'::text) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'transposable_element'::text) OR ((cvterm.name)::text = 'proviral_region'::text) OR ((cvterm.name)::text = 'integron'::text) OR ((cvterm.name)::text = 'genomic_island'::text) OR ((cvterm.name)::text = 'integrated_plasmid'::text) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text) OR ((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'nested_transposon'::text) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text) OR ((cvterm.name)::text = 'conjugative_transposon'::text) OR ((cvterm.name)::text = 'helitron'::text) OR ((cvterm.name)::text = 'p_element'::text) OR ((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text) OR ((cvterm.name)::text = 'polinton'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text) OR ((cvterm.name)::text = 'adaptive_island'::text) OR ((cvterm.name)::text = 'symbiosis_island'::text) OR ((cvterm.name)::text = 'cryptic_prophage'::text) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text) OR ((cvterm.name)::text = 'plasmid'::text) OR ((cvterm.name)::text = 'chromosome'::text) OR ((cvterm.name)::text = 'vector_replicon'::text) OR ((cvterm.name)::text = 'maxicircle'::text) OR ((cvterm.name)::text = 'minicircle'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'episome'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text) OR ((cvterm.name)::text = 'nuclear_chromosome'::text) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text) OR ((cvterm.name)::text = 'DNA_chromosome'::text) OR ((cvterm.name)::text = 'RNA_chromosome'::text) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'YAC'::text) OR ((cvterm.name)::text = 'BAC'::text) OR ((cvterm.name)::text = 'PAC'::text) OR ((cvterm.name)::text = 'cosmid'::text) OR ((cvterm.name)::text = 'phagemid'::text) OR ((cvterm.name)::text = 'fosmid'::text) OR ((cvterm.name)::text = 'lambda_vector'::text) OR ((cvterm.name)::text = 'plasmid_vector'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text) OR ((cvterm.name)::text = 'inosine'::text) OR ((cvterm.name)::text = 'seven_methylguanine'::text) OR ((cvterm.name)::text = 'ribothymidine'::text) OR ((cvterm.name)::text = 'modified_adenosine'::text) OR ((cvterm.name)::text = 'modified_cytidine'::text) OR ((cvterm.name)::text = 'modified_guanosine'::text) OR ((cvterm.name)::text = 'modified_uridine'::text) OR ((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text) OR ((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text) OR ((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'two_thiocytidine'::text) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text) OR ((cvterm.name)::text = 'five_formylcytidine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'lysidine'::text) OR ((cvterm.name)::text = 'N4_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_methylguanosine'::text) OR ((cvterm.name)::text = 'seven_methylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text) OR ((cvterm.name)::text = 'wybutosine'::text) OR ((cvterm.name)::text = 'peroxywybutosine'::text) OR ((cvterm.name)::text = 'hydroxywybutosine'::text) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text) OR ((cvterm.name)::text = 'wyosine'::text) OR ((cvterm.name)::text = 'methylwyosine'::text) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'four_demethylwyosine'::text) OR ((cvterm.name)::text = 'isowyosine'::text) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'archaeosine'::text) OR ((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text) OR ((cvterm.name)::text = 'five_methyluridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_thiouridine'::text) OR ((cvterm.name)::text = 'four_thiouridine'::text) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text) OR ((cvterm.name)::text = 'five_methoxyuridine'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'three_methyluridine'::text) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'catalytic_residue'::text) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text) OR ((cvterm.name)::text = 'alanine'::text) OR ((cvterm.name)::text = 'valine'::text) OR ((cvterm.name)::text = 'leucine'::text) OR ((cvterm.name)::text = 'isoleucine'::text) OR ((cvterm.name)::text = 'proline'::text) OR ((cvterm.name)::text = 'tryptophan'::text) OR ((cvterm.name)::text = 'phenylalanine'::text) OR ((cvterm.name)::text = 'methionine'::text) OR ((cvterm.name)::text = 'glycine'::text) OR ((cvterm.name)::text = 'serine'::text) OR ((cvterm.name)::text = 'threonine'::text) OR ((cvterm.name)::text = 'tyrosine'::text) OR ((cvterm.name)::text = 'cysteine'::text) OR ((cvterm.name)::text = 'glutamine'::text) OR ((cvterm.name)::text = 'asparagine'::text) OR ((cvterm.name)::text = 'lysine'::text) OR ((cvterm.name)::text = 'arginine'::text) OR ((cvterm.name)::text = 'histidine'::text) OR ((cvterm.name)::text = 'aspartic_acid'::text) OR ((cvterm.name)::text = 'glutamic_acid'::text) OR ((cvterm.name)::text = 'selenocysteine'::text) OR ((cvterm.name)::text = 'pyrrolysine'::text) OR ((cvterm.name)::text = 'modified_glycine'::text) OR ((cvterm.name)::text = 'modified_L_alanine'::text) OR ((cvterm.name)::text = 'modified_L_asparagine'::text) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text) OR ((cvterm.name)::text = 'modified_L_cysteine'::text) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text) OR ((cvterm.name)::text = 'modified_L_threonine'::text) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text) OR ((cvterm.name)::text = 'modified_L_glutamine'::text) OR ((cvterm.name)::text = 'modified_L_methionine'::text) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text) OR ((cvterm.name)::text = 'modified_L_histidine'::text) OR ((cvterm.name)::text = 'modified_L_serine'::text) OR ((cvterm.name)::text = 'modified_L_lysine'::text) OR ((cvterm.name)::text = 'modified_L_leucine'::text) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text) OR ((cvterm.name)::text = 'modified_L_valine'::text) OR ((cvterm.name)::text = 'modified_L_proline'::text) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text) OR ((cvterm.name)::text = 'modified_L_arginine'::text) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text) OR ((cvterm.name)::text = 'DArT_marker'::text) OR ((cvterm.name)::text = 'nucleotide_motif'::text) OR ((cvterm.name)::text = 'DNA_motif'::text) OR ((cvterm.name)::text = 'RNA_motif'::text) OR ((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text) OR ((cvterm.name)::text = 'minus_10_signal'::text) OR ((cvterm.name)::text = 'minus_35_signal'::text) OR ((cvterm.name)::text = 'DRE_motif'::text) OR ((cvterm.name)::text = 'E_box_motif'::text) OR ((cvterm.name)::text = 'INR1_motif'::text) OR ((cvterm.name)::text = 'GAGA_motif'::text) OR ((cvterm.name)::text = 'octamer_motif'::text) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text) OR ((cvterm.name)::text = 'promoter_element'::text) OR ((cvterm.name)::text = 'DCE_SI'::text) OR ((cvterm.name)::text = 'DCE_SII'::text) OR ((cvterm.name)::text = 'DCE_SIII'::text) OR ((cvterm.name)::text = 'minus_12_signal'::text) OR ((cvterm.name)::text = 'minus_24_signal'::text) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text) OR ((cvterm.name)::text = 'DMv5_motif'::text) OR ((cvterm.name)::text = 'DMv3_motif'::text) OR ((cvterm.name)::text = 'DMv2_motif'::text) OR ((cvterm.name)::text = 'DPE1_motif'::text) OR ((cvterm.name)::text = 'DMv1_motif'::text) OR ((cvterm.name)::text = 'NDM2_motif'::text) OR ((cvterm.name)::text = 'NDM3_motif'::text) OR ((cvterm.name)::text = 'core_promoter_element'::text) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text) OR ((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text) OR ((cvterm.name)::text = 'BREu_motif'::text) OR ((cvterm.name)::text = 'TATA_box'::text) OR ((cvterm.name)::text = 'A_box'::text) OR ((cvterm.name)::text = 'B_box'::text) OR ((cvterm.name)::text = 'C_box'::text) OR ((cvterm.name)::text = 'MTE'::text) OR ((cvterm.name)::text = 'BREd_motif'::text) OR ((cvterm.name)::text = 'DCE'::text) OR ((cvterm.name)::text = 'intermediate_element'::text) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text) OR ((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'modified_base'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'methylated_base_feature'::text) OR ((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'operon'::text) OR ((cvterm.name)::text = 'mating_type_region'::text) OR ((cvterm.name)::text = 'gene_array'::text) OR ((cvterm.name)::text = 'gene_subarray'::text) OR ((cvterm.name)::text = 'gene_cassette_array'::text) OR ((cvterm.name)::text = 'regulon'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text) OR ((cvterm.name)::text = 'SNV'::text) OR ((cvterm.name)::text = 'complex_substitution'::text) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text) OR ((cvterm.name)::text = 'transition'::text) OR ((cvterm.name)::text = 'transversion'::text) OR ((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text) OR ((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'flanking_region'::text) OR ((cvterm.name)::text = 'repeat_component'::text) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'LTR_component'::text) OR ((cvterm.name)::text = 'repeat_fragment'::text) OR ((cvterm.name)::text = 'transposon_fragment'::text) OR ((cvterm.name)::text = 'U5_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'region'::text));


ALTER TABLE so.region OWNER TO kmr44;

--
-- Name: regional_centromere; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regional_centromere AS
 SELECT feature.feature_id AS regional_centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere'::text);


ALTER TABLE so.regional_centromere OWNER TO kmr44;

--
-- Name: regional_centromere_central_core; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regional_centromere_central_core AS
 SELECT feature.feature_id AS regional_centromere_central_core_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_central_core'::text);


ALTER TABLE so.regional_centromere_central_core OWNER TO kmr44;

--
-- Name: regional_centromere_inner_repeat_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regional_centromere_inner_repeat_region AS
 SELECT feature.feature_id AS regional_centromere_inner_repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text);


ALTER TABLE so.regional_centromere_inner_repeat_region OWNER TO kmr44;

--
-- Name: regional_centromere_outer_repeat_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regional_centromere_outer_repeat_region AS
 SELECT feature.feature_id AS regional_centromere_outer_repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text);


ALTER TABLE so.regional_centromere_outer_repeat_region OWNER TO kmr44;

--
-- Name: regulated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regulated AS
 SELECT feature.feature_id AS regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transcriptionally_regulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated'::text) OR ((cvterm.name)::text = 'translationally_regulated'::text) OR ((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text) OR ((cvterm.name)::text = 'autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text) OR ((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'regulated'::text));


ALTER TABLE so.regulated OWNER TO kmr44;

--
-- Name: regulatory_promoter_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regulatory_promoter_element AS
 SELECT feature.feature_id AS regulatory_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text));


ALTER TABLE so.regulatory_promoter_element OWNER TO kmr44;

--
-- Name: regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regulatory_region AS
 SELECT feature.feature_id AS regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transcription_regulatory_region'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text) OR ((cvterm.name)::text = 'replication_regulatory_region'::text) OR ((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text) OR ((cvterm.name)::text = 'CRM'::text) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text) OR ((cvterm.name)::text = 'ISRE'::text) OR ((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text) OR ((cvterm.name)::text = 'silencer'::text) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text) OR ((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'regulatory_region'::text));


ALTER TABLE so.regulatory_region OWNER TO kmr44;

--
-- Name: regulatory_region_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regulatory_region_variant AS
 SELECT feature.feature_id AS regulatory_region_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'TF_binding_site_variant'::text) OR ((cvterm.name)::text = 'regulatory_region_variant'::text));


ALTER TABLE so.regulatory_region_variant OWNER TO kmr44;

--
-- Name: regulon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.regulon AS
 SELECT feature.feature_id AS regulon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regulon'::text);


ALTER TABLE so.regulon OWNER TO kmr44;

--
-- Name: remark; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.remark AS
 SELECT feature.feature_id AS remark_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'sequence_difference'::text) OR ((cvterm.name)::text = 'experimental_result_region'::text) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text) OR ((cvterm.name)::text = 'possible_base_call_error'::text) OR ((cvterm.name)::text = 'possible_assembly_error'::text) OR ((cvterm.name)::text = 'assembly_error_correction'::text) OR ((cvterm.name)::text = 'base_call_error_correction'::text) OR ((cvterm.name)::text = 'overlapping_feature_set'::text) OR ((cvterm.name)::text = 'no_output'::text) OR ((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'non_adjacent_residues'::text) OR ((cvterm.name)::text = 'non_terminal_residue'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text) OR ((cvterm.name)::text = 'sequence_uncertainty'::text) OR ((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'remark'::text));


ALTER TABLE so.remark OWNER TO kmr44;

--
-- Name: repeat_component; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.repeat_component AS
 SELECT feature.feature_id AS repeat_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'LTR_component'::text) OR ((cvterm.name)::text = 'repeat_fragment'::text) OR ((cvterm.name)::text = 'transposon_fragment'::text) OR ((cvterm.name)::text = 'U5_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'repeat_component'::text));


ALTER TABLE so.repeat_component OWNER TO kmr44;

--
-- Name: repeat_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.repeat_fragment AS
 SELECT feature.feature_id AS repeat_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'repeat_fragment'::text);


ALTER TABLE so.repeat_fragment OWNER TO kmr44;

--
-- Name: repeat_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.repeat_region AS
 SELECT feature.feature_id AS repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'long_terminal_repeat'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'inverted_repeat'::text) OR ((cvterm.name)::text = 'direct_repeat'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'dispersed_repeat'::text) OR ((cvterm.name)::text = 'tandem_repeat'::text) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text) OR ((cvterm.name)::text = 'Y_prime_element'::text) OR ((cvterm.name)::text = 'telomeric_repeat'::text) OR ((cvterm.name)::text = 'nested_repeat'::text) OR ((cvterm.name)::text = 'centromeric_repeat'::text) OR ((cvterm.name)::text = 'five_prime_LTR'::text) OR ((cvterm.name)::text = 'three_prime_LTR'::text) OR ((cvterm.name)::text = 'solo_LTR'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'target_site_duplication'::text) OR ((cvterm.name)::text = 'CRISPR'::text) OR ((cvterm.name)::text = 'satellite_DNA'::text) OR ((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text) OR ((cvterm.name)::text = 'repeat_region'::text));


ALTER TABLE so.repeat_region OWNER TO kmr44;

--
-- Name: repeat_unit; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.repeat_unit AS
 SELECT feature.feature_id AS repeat_unit_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'repeat_unit'::text);


ALTER TABLE so.repeat_unit OWNER TO kmr44;

--
-- Name: replication_regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.replication_regulatory_region AS
 SELECT feature.feature_id AS replication_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'replication_regulatory_region'::text);


ALTER TABLE so.replication_regulatory_region OWNER TO kmr44;

--
-- Name: replicon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.replicon AS
 SELECT feature.feature_id AS replicon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'plasmid'::text) OR ((cvterm.name)::text = 'chromosome'::text) OR ((cvterm.name)::text = 'vector_replicon'::text) OR ((cvterm.name)::text = 'maxicircle'::text) OR ((cvterm.name)::text = 'minicircle'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'episome'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text) OR ((cvterm.name)::text = 'nuclear_chromosome'::text) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text) OR ((cvterm.name)::text = 'DNA_chromosome'::text) OR ((cvterm.name)::text = 'RNA_chromosome'::text) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'YAC'::text) OR ((cvterm.name)::text = 'BAC'::text) OR ((cvterm.name)::text = 'PAC'::text) OR ((cvterm.name)::text = 'cosmid'::text) OR ((cvterm.name)::text = 'phagemid'::text) OR ((cvterm.name)::text = 'fosmid'::text) OR ((cvterm.name)::text = 'lambda_vector'::text) OR ((cvterm.name)::text = 'plasmid_vector'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'replicon'::text));


ALTER TABLE so.replicon OWNER TO kmr44;

--
-- Name: rescue; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rescue AS
 SELECT feature.feature_id AS rescue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rescue'::text);


ALTER TABLE so.rescue OWNER TO kmr44;

--
-- Name: rescue_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rescue_gene AS
 SELECT feature.feature_id AS rescue_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'wild_type_rescue_gene'::text) OR ((cvterm.name)::text = 'rescue_gene'::text));


ALTER TABLE so.rescue_gene OWNER TO kmr44;

--
-- Name: rescue_mini_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rescue_mini_gene AS
 SELECT feature.feature_id AS rescue_mini_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rescue_mini_gene'::text);


ALTER TABLE so.rescue_mini_gene OWNER TO kmr44;

--
-- Name: rescue_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rescue_region AS
 SELECT feature.feature_id AS rescue_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'rescue_region'::text));


ALTER TABLE so.rescue_region OWNER TO kmr44;

--
-- Name: resolution_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.resolution_site AS
 SELECT feature.feature_id AS resolution_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text));


ALTER TABLE so.resolution_site OWNER TO kmr44;

--
-- Name: restriction_enzyme_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.restriction_enzyme_binding_site AS
 SELECT feature.feature_id AS restriction_enzyme_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text);


ALTER TABLE so.restriction_enzyme_binding_site OWNER TO kmr44;

--
-- Name: restriction_enzyme_cleavage_junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.restriction_enzyme_cleavage_junction AS
 SELECT feature.feature_id AS restriction_enzyme_cleavage_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text));


ALTER TABLE so.restriction_enzyme_cleavage_junction OWNER TO kmr44;

--
-- Name: restriction_enzyme_recognition_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.restriction_enzyme_recognition_site AS
 SELECT feature.feature_id AS restriction_enzyme_recognition_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text));


ALTER TABLE so.restriction_enzyme_recognition_site OWNER TO kmr44;

--
-- Name: restriction_enzyme_single_strand_overhang; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.restriction_enzyme_single_strand_overhang AS
 SELECT feature.feature_id AS restriction_enzyme_single_strand_overhang_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text);


ALTER TABLE so.restriction_enzyme_single_strand_overhang OWNER TO kmr44;

--
-- Name: restriction_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.restriction_fragment AS
 SELECT feature.feature_id AS restriction_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RFLP_fragment'::text) OR ((cvterm.name)::text = 'restriction_fragment'::text));


ALTER TABLE so.restriction_fragment OWNER TO kmr44;

--
-- Name: retinoic_acid_responsive_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.retinoic_acid_responsive_element AS
 SELECT feature.feature_id AS retinoic_acid_responsive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text);


ALTER TABLE so.retinoic_acid_responsive_element OWNER TO kmr44;

--
-- Name: retrogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.retrogene AS
 SELECT feature.feature_id AS retrogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retrogene'::text);


ALTER TABLE so.retrogene OWNER TO kmr44;

--
-- Name: retron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.retron AS
 SELECT feature.feature_id AS retron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retron'::text);


ALTER TABLE so.retron OWNER TO kmr44;

--
-- Name: retrotransposed; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.retrotransposed AS
 SELECT feature.feature_id AS retrotransposed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retrotransposed'::text);


ALTER TABLE so.retrotransposed OWNER TO kmr44;

--
-- Name: retrotransposon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.retrotransposon AS
 SELECT feature.feature_id AS retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text) OR ((cvterm.name)::text = 'retrotransposon'::text));


ALTER TABLE so.retrotransposon OWNER TO kmr44;

--
-- Name: reverse; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.reverse AS
 SELECT feature.feature_id AS reverse_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse'::text);


ALTER TABLE so.reverse OWNER TO kmr44;

--
-- Name: reverse_hoogsteen_base_pair; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.reverse_hoogsteen_base_pair AS
 SELECT feature.feature_id AS reverse_hoogsteen_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text);


ALTER TABLE so.reverse_hoogsteen_base_pair OWNER TO kmr44;

--
-- Name: reverse_primer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.reverse_primer AS
 SELECT feature.feature_id AS reverse_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse_primer'::text);


ALTER TABLE so.reverse_primer OWNER TO kmr44;

--
-- Name: rflp_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rflp_fragment AS
 SELECT feature.feature_id AS rflp_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RFLP_fragment'::text);


ALTER TABLE so.rflp_fragment OWNER TO kmr44;

--
-- Name: rh_map; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rh_map AS
 SELECT feature.feature_id AS rh_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RH_map'::text);


ALTER TABLE so.rh_map OWNER TO kmr44;

--
-- Name: rho_dependent_bacterial_terminator; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rho_dependent_bacterial_terminator AS
 SELECT feature.feature_id AS rho_dependent_bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text);


ALTER TABLE so.rho_dependent_bacterial_terminator OWNER TO kmr44;

--
-- Name: rho_independent_bacterial_terminator; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rho_independent_bacterial_terminator AS
 SELECT feature.feature_id AS rho_independent_bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text);


ALTER TABLE so.rho_independent_bacterial_terminator OWNER TO kmr44;

--
-- Name: ribosome_entry_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ribosome_entry_site AS
 SELECT feature.feature_id AS ribosome_entry_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'kozak_sequence'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text));


ALTER TABLE so.ribosome_entry_site OWNER TO kmr44;

--
-- Name: riboswitch; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.riboswitch AS
 SELECT feature.feature_id AS riboswitch_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'riboswitch'::text);


ALTER TABLE so.riboswitch OWNER TO kmr44;

--
-- Name: ribothymidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ribothymidine AS
 SELECT feature.feature_id AS ribothymidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribothymidine'::text);


ALTER TABLE so.ribothymidine OWNER TO kmr44;

--
-- Name: ribozyme; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ribozyme AS
 SELECT feature.feature_id AS ribozyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribozyme'::text);


ALTER TABLE so.ribozyme OWNER TO kmr44;

--
-- Name: ribozymic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ribozymic AS
 SELECT feature.feature_id AS ribozymic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribozymic'::text);


ALTER TABLE so.ribozymic OWNER TO kmr44;

--
-- Name: right_handed_peptide_helix; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.right_handed_peptide_helix AS
 SELECT feature.feature_id AS right_handed_peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text) OR ((cvterm.name)::text = 'three_ten_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text));


ALTER TABLE so.right_handed_peptide_helix OWNER TO kmr44;

--
-- Name: ring_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ring_chromosome AS
 SELECT feature.feature_id AS ring_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'ring_chromosome'::text));


ALTER TABLE so.ring_chromosome OWNER TO kmr44;

--
-- Name: rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna AS
 SELECT feature.feature_id AS rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA'::text);


ALTER TABLE so.rna OWNER TO kmr44;

--
-- Name: rna_6s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_6s AS
 SELECT feature.feature_id AS rna_6s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_6S'::text);


ALTER TABLE so.rna_6s OWNER TO kmr44;

--
-- Name: rna_aptamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_aptamer AS
 SELECT feature.feature_id AS rna_aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_aptamer'::text);


ALTER TABLE so.rna_aptamer OWNER TO kmr44;

--
-- Name: rna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_chromosome AS
 SELECT feature.feature_id AS rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'RNA_chromosome'::text));


ALTER TABLE so.rna_chromosome OWNER TO kmr44;

--
-- Name: rna_hook_turn; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_hook_turn AS
 SELECT feature.feature_id AS rna_hook_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_hook_turn'::text);


ALTER TABLE so.rna_hook_turn OWNER TO kmr44;

--
-- Name: rna_internal_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_internal_loop AS
 SELECT feature.feature_id AS rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_internal_loop'::text));


ALTER TABLE so.rna_internal_loop OWNER TO kmr44;

--
-- Name: rna_junction_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_junction_loop AS
 SELECT feature.feature_id AS rna_junction_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text));


ALTER TABLE so.rna_junction_loop OWNER TO kmr44;

--
-- Name: rna_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_motif AS
 SELECT feature.feature_id AS rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'RNA_motif'::text));


ALTER TABLE so.rna_motif OWNER TO kmr44;

--
-- Name: rna_polymerase_ii_tata_box; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_polymerase_ii_tata_box AS
 SELECT feature.feature_id AS rna_polymerase_ii_tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text);


ALTER TABLE so.rna_polymerase_ii_tata_box OWNER TO kmr44;

--
-- Name: rna_polymerase_iii_tata_box; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_polymerase_iii_tata_box AS
 SELECT feature.feature_id AS rna_polymerase_iii_tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text);


ALTER TABLE so.rna_polymerase_iii_tata_box OWNER TO kmr44;

--
-- Name: rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_polymerase_promoter AS
 SELECT feature.feature_id AS rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text));


ALTER TABLE so.rna_polymerase_promoter OWNER TO kmr44;

--
-- Name: rna_sequence_secondary_structure; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rna_sequence_secondary_structure AS
 SELECT feature.feature_id AS rna_sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'stem_loop'::text) OR ((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text));


ALTER TABLE so.rna_sequence_secondary_structure OWNER TO kmr44;

--
-- Name: rnai_reagent; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnai_reagent AS
 SELECT feature.feature_id AS rnai_reagent_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNAi_reagent'::text);


ALTER TABLE so.rnai_reagent OWNER TO kmr44;

--
-- Name: rnapol_i_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnapol_i_promoter AS
 SELECT feature.feature_id AS rnapol_i_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_I_promoter'::text);


ALTER TABLE so.rnapol_i_promoter OWNER TO kmr44;

--
-- Name: rnapol_ii_core_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnapol_ii_core_promoter AS
 SELECT feature.feature_id AS rnapol_ii_core_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_II_core_promoter'::text);


ALTER TABLE so.rnapol_ii_core_promoter OWNER TO kmr44;

--
-- Name: rnapol_ii_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnapol_ii_promoter AS
 SELECT feature.feature_id AS rnapol_ii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text));


ALTER TABLE so.rnapol_ii_promoter OWNER TO kmr44;

--
-- Name: rnapol_iii_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnapol_iii_promoter AS
 SELECT feature.feature_id AS rnapol_iii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text));


ALTER TABLE so.rnapol_iii_promoter OWNER TO kmr44;

--
-- Name: rnapol_iii_promoter_type_1; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnapol_iii_promoter_type_1 AS
 SELECT feature.feature_id AS rnapol_iii_promoter_type_1_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text);


ALTER TABLE so.rnapol_iii_promoter_type_1 OWNER TO kmr44;

--
-- Name: rnapol_iii_promoter_type_2; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnapol_iii_promoter_type_2 AS
 SELECT feature.feature_id AS rnapol_iii_promoter_type_2_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text);


ALTER TABLE so.rnapol_iii_promoter_type_2 OWNER TO kmr44;

--
-- Name: rnapol_iii_promoter_type_3; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnapol_iii_promoter_type_3 AS
 SELECT feature.feature_id AS rnapol_iii_promoter_type_3_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text);


ALTER TABLE so.rnapol_iii_promoter_type_3 OWNER TO kmr44;

--
-- Name: rnase_mrp_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnase_mrp_rna AS
 SELECT feature.feature_id AS rnase_mrp_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_MRP_RNA'::text);


ALTER TABLE so.rnase_mrp_rna OWNER TO kmr44;

--
-- Name: rnase_mrp_rna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnase_mrp_rna_gene AS
 SELECT feature.feature_id AS rnase_mrp_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text);


ALTER TABLE so.rnase_mrp_rna_gene OWNER TO kmr44;

--
-- Name: rnase_p_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnase_p_rna AS
 SELECT feature.feature_id AS rnase_p_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_P_RNA'::text);


ALTER TABLE so.rnase_p_rna OWNER TO kmr44;

--
-- Name: rnase_p_rna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rnase_p_rna_gene AS
 SELECT feature.feature_id AS rnase_p_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_P_RNA_gene'::text);


ALTER TABLE so.rnase_p_rna_gene OWNER TO kmr44;

--
-- Name: robertsonian_fusion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.robertsonian_fusion AS
 SELECT feature.feature_id AS robertsonian_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Robertsonian_fusion'::text);


ALTER TABLE so.robertsonian_fusion OWNER TO kmr44;

--
-- Name: rpra_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rpra_rna AS
 SELECT feature.feature_id AS rpra_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RprA_RNA'::text);


ALTER TABLE so.rpra_rna OWNER TO kmr44;

--
-- Name: rr_tract; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rr_tract AS
 SELECT feature.feature_id AS rr_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RR_tract'::text);


ALTER TABLE so.rr_tract OWNER TO kmr44;

--
-- Name: rre_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rre_rna AS
 SELECT feature.feature_id AS rre_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RRE_RNA'::text);


ALTER TABLE so.rre_rna OWNER TO kmr44;

--
-- Name: rrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna AS
 SELECT feature.feature_id AS rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text) OR ((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'rRNA'::text));


ALTER TABLE so.rrna OWNER TO kmr44;

--
-- Name: rrna_16s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_16s AS
 SELECT feature.feature_id AS rrna_16s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_16S'::text);


ALTER TABLE so.rrna_16s OWNER TO kmr44;

--
-- Name: rrna_18s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_18s AS
 SELECT feature.feature_id AS rrna_18s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_18S'::text);


ALTER TABLE so.rrna_18s OWNER TO kmr44;

--
-- Name: rrna_21s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_21s AS
 SELECT feature.feature_id AS rrna_21s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_21S'::text);


ALTER TABLE so.rrna_21s OWNER TO kmr44;

--
-- Name: rrna_23s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_23s AS
 SELECT feature.feature_id AS rrna_23s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_23S'::text);


ALTER TABLE so.rrna_23s OWNER TO kmr44;

--
-- Name: rrna_25s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_25s AS
 SELECT feature.feature_id AS rrna_25s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_25S'::text);


ALTER TABLE so.rrna_25s OWNER TO kmr44;

--
-- Name: rrna_28s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_28s AS
 SELECT feature.feature_id AS rrna_28s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_28S'::text);


ALTER TABLE so.rrna_28s OWNER TO kmr44;

--
-- Name: rrna_5_8s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_5_8s AS
 SELECT feature.feature_id AS rrna_5_8s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_5_8S'::text);


ALTER TABLE so.rrna_5_8s OWNER TO kmr44;

--
-- Name: rrna_5s; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_5s AS
 SELECT feature.feature_id AS rrna_5s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_5S'::text);


ALTER TABLE so.rrna_5s OWNER TO kmr44;

--
-- Name: rrna_cleavage_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_cleavage_rna AS
 SELECT feature.feature_id AS rrna_cleavage_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text);


ALTER TABLE so.rrna_cleavage_rna OWNER TO kmr44;

--
-- Name: rrna_cleavage_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_cleavage_snorna_primary_transcript AS
 SELECT feature.feature_id AS rrna_cleavage_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text);


ALTER TABLE so.rrna_cleavage_snorna_primary_transcript OWNER TO kmr44;

--
-- Name: rrna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_encoding AS
 SELECT feature.feature_id AS rrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_encoding'::text);


ALTER TABLE so.rrna_encoding OWNER TO kmr44;

--
-- Name: rrna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_gene AS
 SELECT feature.feature_id AS rrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_gene'::text);


ALTER TABLE so.rrna_gene OWNER TO kmr44;

--
-- Name: rrna_large_subunit_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_large_subunit_primary_transcript AS
 SELECT feature.feature_id AS rrna_large_subunit_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text);


ALTER TABLE so.rrna_large_subunit_primary_transcript OWNER TO kmr44;

--
-- Name: rrna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_primary_transcript AS
 SELECT feature.feature_id AS rrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text));


ALTER TABLE so.rrna_primary_transcript OWNER TO kmr44;

--
-- Name: rrna_primary_transcript_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_primary_transcript_region AS
 SELECT feature.feature_id AS rrna_primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text));


ALTER TABLE so.rrna_primary_transcript_region OWNER TO kmr44;

--
-- Name: rrna_small_subunit_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rrna_small_subunit_primary_transcript AS
 SELECT feature.feature_id AS rrna_small_subunit_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text);


ALTER TABLE so.rrna_small_subunit_primary_transcript OWNER TO kmr44;

--
-- Name: rst; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rst AS
 SELECT feature.feature_id AS rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text) OR ((cvterm.name)::text = 'RST'::text));


ALTER TABLE so.rst OWNER TO kmr44;

--
-- Name: rst_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.rst_match AS
 SELECT feature.feature_id AS rst_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RST_match'::text);


ALTER TABLE so.rst_match OWNER TO kmr44;

--
-- Name: s_gna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.s_gna AS
 SELECT feature.feature_id AS s_gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'S_GNA'::text);


ALTER TABLE so.s_gna OWNER TO kmr44;

--
-- Name: s_gna_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.s_gna_oligo AS
 SELECT feature.feature_id AS s_gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'S_GNA_oligo'::text);


ALTER TABLE so.s_gna_oligo OWNER TO kmr44;

--
-- Name: sage_tag; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sage_tag AS
 SELECT feature.feature_id AS sage_tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SAGE_tag'::text);


ALTER TABLE so.sage_tag OWNER TO kmr44;

--
-- Name: sarcin_like_rna_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sarcin_like_rna_motif AS
 SELECT feature.feature_id AS sarcin_like_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text);


ALTER TABLE so.sarcin_like_rna_motif OWNER TO kmr44;

--
-- Name: satellite_dna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.satellite_dna AS
 SELECT feature.feature_id AS satellite_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'satellite_DNA'::text));


ALTER TABLE so.satellite_dna OWNER TO kmr44;

--
-- Name: schellmann_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.schellmann_loop AS
 SELECT feature.feature_id AS schellmann_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text) OR ((cvterm.name)::text = 'schellmann_loop'::text));


ALTER TABLE so.schellmann_loop OWNER TO kmr44;

--
-- Name: schellmann_loop_seven; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.schellmann_loop_seven AS
 SELECT feature.feature_id AS schellmann_loop_seven_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'schellmann_loop_seven'::text);


ALTER TABLE so.schellmann_loop_seven OWNER TO kmr44;

--
-- Name: schellmann_loop_six; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.schellmann_loop_six AS
 SELECT feature.feature_id AS schellmann_loop_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'schellmann_loop_six'::text);


ALTER TABLE so.schellmann_loop_six OWNER TO kmr44;

--
-- Name: score; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.score AS
 SELECT feature.feature_id AS score_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'score'::text);


ALTER TABLE so.score OWNER TO kmr44;

--
-- Name: scrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.scrna AS
 SELECT feature.feature_id AS scrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA'::text);


ALTER TABLE so.scrna OWNER TO kmr44;

--
-- Name: scrna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.scrna_encoding AS
 SELECT feature.feature_id AS scrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_encoding'::text);


ALTER TABLE so.scrna_encoding OWNER TO kmr44;

--
-- Name: scrna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.scrna_gene AS
 SELECT feature.feature_id AS scrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_gene'::text);


ALTER TABLE so.scrna_gene OWNER TO kmr44;

--
-- Name: scrna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.scrna_primary_transcript AS
 SELECT feature.feature_id AS scrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_primary_transcript'::text);


ALTER TABLE so.scrna_primary_transcript OWNER TO kmr44;

--
-- Name: secis_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.secis_element AS
 SELECT feature.feature_id AS secis_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SECIS_element'::text);


ALTER TABLE so.secis_element OWNER TO kmr44;

--
-- Name: selenocysteine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.selenocysteine AS
 SELECT feature.feature_id AS selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteine'::text);


ALTER TABLE so.selenocysteine OWNER TO kmr44;

--
-- Name: selenocysteine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.selenocysteine_trna_primary_transcript AS
 SELECT feature.feature_id AS selenocysteine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text);


ALTER TABLE so.selenocysteine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: selenocysteinyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.selenocysteinyl_trna AS
 SELECT feature.feature_id AS selenocysteinyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text);


ALTER TABLE so.selenocysteinyl_trna OWNER TO kmr44;

--
-- Name: sequence_alteration; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_alteration AS
 SELECT feature.feature_id AS sequence_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'deletion'::text) OR ((cvterm.name)::text = 'translocation'::text) OR ((cvterm.name)::text = 'insertion'::text) OR ((cvterm.name)::text = 'copy_number_variation'::text) OR ((cvterm.name)::text = 'UPD'::text) OR ((cvterm.name)::text = 'structural_alteration'::text) OR ((cvterm.name)::text = 'substitution'::text) OR ((cvterm.name)::text = 'indel'::text) OR ((cvterm.name)::text = 'inversion'::text) OR ((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text) OR ((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text) OR ((cvterm.name)::text = 'copy_number_gain'::text) OR ((cvterm.name)::text = 'copy_number_loss'::text) OR ((cvterm.name)::text = 'maternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'complex_structural_alteration'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text) OR ((cvterm.name)::text = 'SNV'::text) OR ((cvterm.name)::text = 'complex_substitution'::text) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text) OR ((cvterm.name)::text = 'transition'::text) OR ((cvterm.name)::text = 'transversion'::text) OR ((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text) OR ((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'sequence_alteration'::text));


ALTER TABLE so.sequence_alteration OWNER TO kmr44;

--
-- Name: sequence_assembly; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_assembly AS
 SELECT feature.feature_id AS sequence_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'supercontig'::text) OR ((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'tiling_path'::text) OR ((cvterm.name)::text = 'virtual_sequence'::text) OR ((cvterm.name)::text = 'golden_path'::text) OR ((cvterm.name)::text = 'ultracontig'::text) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text) OR ((cvterm.name)::text = 'sequence_assembly'::text));


ALTER TABLE so.sequence_assembly OWNER TO kmr44;

--
-- Name: sequence_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_attribute AS
 SELECT feature.feature_id AS sequence_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polymer_attribute'::text) OR ((cvterm.name)::text = 'feature_attribute'::text) OR ((cvterm.name)::text = 'sequence_location'::text) OR ((cvterm.name)::text = 'variant_quality'::text) OR ((cvterm.name)::text = 'nucleic_acid'::text) OR ((cvterm.name)::text = 'synthetic_sequence'::text) OR ((cvterm.name)::text = 'topology_attribute'::text) OR ((cvterm.name)::text = 'peptidyl'::text) OR ((cvterm.name)::text = 'DNA'::text) OR ((cvterm.name)::text = 'RNA'::text) OR ((cvterm.name)::text = 'morpholino_backbone'::text) OR ((cvterm.name)::text = 'PNA'::text) OR ((cvterm.name)::text = 'LNA'::text) OR ((cvterm.name)::text = 'TNA'::text) OR ((cvterm.name)::text = 'GNA'::text) OR ((cvterm.name)::text = 'cDNA'::text) OR ((cvterm.name)::text = 'genomic_DNA'::text) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text) OR ((cvterm.name)::text = 'R_GNA'::text) OR ((cvterm.name)::text = 'S_GNA'::text) OR ((cvterm.name)::text = 'random_sequence'::text) OR ((cvterm.name)::text = 'designed_sequence'::text) OR ((cvterm.name)::text = 'linear'::text) OR ((cvterm.name)::text = 'circular'::text) OR ((cvterm.name)::text = 'transcript_attribute'::text) OR ((cvterm.name)::text = 'bound_by_factor'::text) OR ((cvterm.name)::text = 'flanked'::text) OR ((cvterm.name)::text = 'gene_attribute'::text) OR ((cvterm.name)::text = 'retrotransposed'::text) OR ((cvterm.name)::text = 'transgenic'::text) OR ((cvterm.name)::text = 'natural'::text) OR ((cvterm.name)::text = 'engineered'::text) OR ((cvterm.name)::text = 'foreign'::text) OR ((cvterm.name)::text = 'fusion'::text) OR ((cvterm.name)::text = 'rescue'::text) OR ((cvterm.name)::text = 'wild_type'::text) OR ((cvterm.name)::text = 'conserved'::text) OR ((cvterm.name)::text = 'status'::text) OR ((cvterm.name)::text = 'intermediate'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged'::text) OR ((cvterm.name)::text = 'cryptic'::text) OR ((cvterm.name)::text = 'strand_attribute'::text) OR ((cvterm.name)::text = 'direction_attribute'::text) OR ((cvterm.name)::text = 'enzymatic'::text) OR ((cvterm.name)::text = 'mobile'::text) OR ((cvterm.name)::text = 'alteration_attribute'::text) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text) OR ((cvterm.name)::text = 'edited'::text) OR ((cvterm.name)::text = 'capped'::text) OR ((cvterm.name)::text = 'mRNA_attribute'::text) OR ((cvterm.name)::text = 'trans_spliced'::text) OR ((cvterm.name)::text = 'alternatively_spliced'::text) OR ((cvterm.name)::text = 'monocistronic'::text) OR ((cvterm.name)::text = 'polycistronic'::text) OR ((cvterm.name)::text = 'polyadenylated'::text) OR ((cvterm.name)::text = 'exemplar'::text) OR ((cvterm.name)::text = 'frameshift'::text) OR ((cvterm.name)::text = 'recoded'::text) OR ((cvterm.name)::text = 'minus_1_frameshift'::text) OR ((cvterm.name)::text = 'minus_2_frameshift'::text) OR ((cvterm.name)::text = 'plus_1_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_framshift'::text) OR ((cvterm.name)::text = 'codon_redefined'::text) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'translationally_frameshifted'::text) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'dicistronic'::text) OR ((cvterm.name)::text = 'bound_by_protein'::text) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text) OR ((cvterm.name)::text = 'floxed'::text) OR ((cvterm.name)::text = 'FRT_flanked'::text) OR ((cvterm.name)::text = 'protein_coding'::text) OR ((cvterm.name)::text = 'non_protein_coding'::text) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text) OR ((cvterm.name)::text = 'gene_array_member'::text) OR ((cvterm.name)::text = 'regulated'::text) OR ((cvterm.name)::text = 'epigenetically_modified'::text) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text) OR ((cvterm.name)::text = 'intein_containing'::text) OR ((cvterm.name)::text = 'miRNA_encoding'::text) OR ((cvterm.name)::text = 'rRNA_encoding'::text) OR ((cvterm.name)::text = 'scRNA_encoding'::text) OR ((cvterm.name)::text = 'snoRNA_encoding'::text) OR ((cvterm.name)::text = 'snRNA_encoding'::text) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text) OR ((cvterm.name)::text = 'stRNA_encoding'::text) OR ((cvterm.name)::text = 'tmRNA_encoding'::text) OR ((cvterm.name)::text = 'tRNA_encoding'::text) OR ((cvterm.name)::text = 'gRNA_encoding'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'overlapping'::text) OR ((cvterm.name)::text = 'inside_intron'::text) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text) OR ((cvterm.name)::text = 'antisense'::text) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text) OR ((cvterm.name)::text = 'operon_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text) OR ((cvterm.name)::text = 'gene_subarray_member'::text) OR ((cvterm.name)::text = 'member_of_regulon'::text) OR ((cvterm.name)::text = 'cassette_array_member'::text) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated'::text) OR ((cvterm.name)::text = 'translationally_regulated'::text) OR ((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text) OR ((cvterm.name)::text = 'autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text) OR ((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'allelically_excluded'::text) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text) OR ((cvterm.name)::text = 'homologous'::text) OR ((cvterm.name)::text = 'syntenic'::text) OR ((cvterm.name)::text = 'orthologous'::text) OR ((cvterm.name)::text = 'paralogous'::text) OR ((cvterm.name)::text = 'fragmentary'::text) OR ((cvterm.name)::text = 'predicted'::text) OR ((cvterm.name)::text = 'validated'::text) OR ((cvterm.name)::text = 'invalidated'::text) OR ((cvterm.name)::text = 'independently_known'::text) OR ((cvterm.name)::text = 'consensus'::text) OR ((cvterm.name)::text = 'low_complexity'::text) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text) OR ((cvterm.name)::text = 'orphan'::text) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text) OR ((cvterm.name)::text = 'supported_by_domain_match'::text) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text) OR ((cvterm.name)::text = 'experimentally_determined'::text) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text) OR ((cvterm.name)::text = 'standard_draft'::text) OR ((cvterm.name)::text = 'high_quality_draft'::text) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text) OR ((cvterm.name)::text = 'noncontiguous_finished'::text) OR ((cvterm.name)::text = 'finished_genome'::text) OR ((cvterm.name)::text = 'single'::text) OR ((cvterm.name)::text = 'double'::text) OR ((cvterm.name)::text = 'forward'::text) OR ((cvterm.name)::text = 'reverse'::text) OR ((cvterm.name)::text = 'ribozymic'::text) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text) OR ((cvterm.name)::text = 'insertion_attribute'::text) OR ((cvterm.name)::text = 'inversion_attribute'::text) OR ((cvterm.name)::text = 'translocaton_attribute'::text) OR ((cvterm.name)::text = 'duplication_attribute'::text) OR ((cvterm.name)::text = 'intrachromosomal'::text) OR ((cvterm.name)::text = 'interchromosomal'::text) OR ((cvterm.name)::text = 'tandem'::text) OR ((cvterm.name)::text = 'direct'::text) OR ((cvterm.name)::text = 'inverted'::text) OR ((cvterm.name)::text = 'pericentric'::text) OR ((cvterm.name)::text = 'paracentric'::text) OR ((cvterm.name)::text = 'reciprocal'::text) OR ((cvterm.name)::text = 'insertional'::text) OR ((cvterm.name)::text = 'free'::text) OR ((cvterm.name)::text = 'score'::text) OR ((cvterm.name)::text = 'quality_value'::text) OR ((cvterm.name)::text = 'organelle_sequence'::text) OR ((cvterm.name)::text = 'plasmid_location'::text) OR ((cvterm.name)::text = 'proviral_location'::text) OR ((cvterm.name)::text = 'macronuclear_sequence'::text) OR ((cvterm.name)::text = 'micronuclear_sequence'::text) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text) OR ((cvterm.name)::text = 'nuclear_sequence'::text) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text) OR ((cvterm.name)::text = 'plastid_sequence'::text) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text) OR ((cvterm.name)::text = 'apicoplast_sequence'::text) OR ((cvterm.name)::text = 'chromoplast_sequence'::text) OR ((cvterm.name)::text = 'chloroplast_sequence'::text) OR ((cvterm.name)::text = 'cyanelle_sequence'::text) OR ((cvterm.name)::text = 'leucoplast_sequence'::text) OR ((cvterm.name)::text = 'proplastid_sequence'::text) OR ((cvterm.name)::text = 'chloroplast_DNA'::text) OR ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text) OR ((cvterm.name)::text = 'variant_origin'::text) OR ((cvterm.name)::text = 'variant_frequency'::text) OR ((cvterm.name)::text = 'variant_phenotype'::text) OR ((cvterm.name)::text = 'maternal_variant'::text) OR ((cvterm.name)::text = 'paternal_variant'::text) OR ((cvterm.name)::text = 'somatic_variant'::text) OR ((cvterm.name)::text = 'germline_variant'::text) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text) OR ((cvterm.name)::text = 'population_specific_variant'::text) OR ((cvterm.name)::text = 'de_novo_variant'::text) OR ((cvterm.name)::text = 'unique_variant'::text) OR ((cvterm.name)::text = 'rare_variant'::text) OR ((cvterm.name)::text = 'polymorphic_variant'::text) OR ((cvterm.name)::text = 'common_variant'::text) OR ((cvterm.name)::text = 'fixed_variant'::text) OR ((cvterm.name)::text = 'benign_variant'::text) OR ((cvterm.name)::text = 'disease_associated_variant'::text) OR ((cvterm.name)::text = 'disease_causing_variant'::text) OR ((cvterm.name)::text = 'lethal_variant'::text) OR ((cvterm.name)::text = 'quantitative_variant'::text) OR ((cvterm.name)::text = 'sequence_attribute'::text));


ALTER TABLE so.sequence_attribute OWNER TO kmr44;

--
-- Name: sequence_collection; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_collection AS
 SELECT feature.feature_id AS sequence_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'genome'::text) OR ((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'peptide_collection'::text) OR ((cvterm.name)::text = 'variant_collection'::text) OR ((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'reference_genome'::text) OR ((cvterm.name)::text = 'variant_genome'::text) OR ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text) OR ((cvterm.name)::text = 'chromosome_variation'::text) OR ((cvterm.name)::text = 'allele'::text) OR ((cvterm.name)::text = 'haplotype'::text) OR ((cvterm.name)::text = 'genotype'::text) OR ((cvterm.name)::text = 'diplotype'::text) OR ((cvterm.name)::text = 'assortment_derived_variation'::text) OR ((cvterm.name)::text = 'chromosome_number_variation'::text) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text) OR ((cvterm.name)::text = 'aneuploid'::text) OR ((cvterm.name)::text = 'polyploid'::text) OR ((cvterm.name)::text = 'hyperploid'::text) OR ((cvterm.name)::text = 'hypoploid'::text) OR ((cvterm.name)::text = 'autopolyploid'::text) OR ((cvterm.name)::text = 'allopolyploid'::text) OR ((cvterm.name)::text = 'free_chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosomal_transposition'::text) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text) OR ((cvterm.name)::text = 'chromosomal_duplication'::text) OR ((cvterm.name)::text = 'compound_chromosome'::text) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'chromosomal_deletion'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'ring_chromosome'::text) OR ((cvterm.name)::text = 'chromosome_fission'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text) OR ((cvterm.name)::text = 'paracentric_inversion'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'bipartite_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'chromosomal_translocation'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'cyclic_translocation'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text) OR ((cvterm.name)::text = 'insertional_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'polymorphic_sequence_variant'::text) OR ((cvterm.name)::text = 'sequence_collection'::text));


ALTER TABLE so.sequence_collection OWNER TO kmr44;

--
-- Name: sequence_conflict; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_conflict AS
 SELECT feature.feature_id AS sequence_conflict_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text));


ALTER TABLE so.sequence_conflict OWNER TO kmr44;

--
-- Name: sequence_cv_lookup_table; Type: TABLE; Schema: so; Owner: kmr44
--

CREATE TABLE so.sequence_cv_lookup_table (
    sequence_cv_lookup_table_id integer NOT NULL,
    original_cvterm_name character varying(1024),
    relation_name character varying(128)
);


ALTER TABLE so.sequence_cv_lookup_table OWNER TO kmr44;

--
-- Name: sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq; Type: SEQUENCE; Schema: so; Owner: kmr44
--

CREATE SEQUENCE so.sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE so.sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq OWNER TO kmr44;

--
-- Name: sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq; Type: SEQUENCE OWNED BY; Schema: so; Owner: kmr44
--

ALTER SEQUENCE so.sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq OWNED BY so.sequence_cv_lookup_table.sequence_cv_lookup_table_id;


--
-- Name: sequence_difference; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_difference AS
 SELECT feature.feature_id AS sequence_difference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'possible_base_call_error'::text) OR ((cvterm.name)::text = 'possible_assembly_error'::text) OR ((cvterm.name)::text = 'assembly_error_correction'::text) OR ((cvterm.name)::text = 'base_call_error_correction'::text) OR ((cvterm.name)::text = 'sequence_difference'::text));


ALTER TABLE so.sequence_difference OWNER TO kmr44;

--
-- Name: sequence_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_feature AS
 SELECT feature.feature_id AS sequence_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'region'::text) OR ((cvterm.name)::text = 'junction'::text) OR ((cvterm.name)::text = 'sequence_alteration'::text) OR ((cvterm.name)::text = 'biomaterial_region'::text) OR ((cvterm.name)::text = 'experimental_feature'::text) OR ((cvterm.name)::text = 'biological_region'::text) OR ((cvterm.name)::text = 'topologically_defined_region'::text) OR ((cvterm.name)::text = 'reagent'::text) OR ((cvterm.name)::text = 'engineered_region'::text) OR ((cvterm.name)::text = 'PCR_product'::text) OR ((cvterm.name)::text = 'clone'::text) OR ((cvterm.name)::text = 'rescue_region'::text) OR ((cvterm.name)::text = 'oligo'::text) OR ((cvterm.name)::text = 'clone_insert'::text) OR ((cvterm.name)::text = 'cloned_region'::text) OR ((cvterm.name)::text = 'databank_entry'::text) OR ((cvterm.name)::text = 'RAPD'::text) OR ((cvterm.name)::text = 'genomic_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text) OR ((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'aptamer'::text) OR ((cvterm.name)::text = 'probe'::text) OR ((cvterm.name)::text = 'tag'::text) OR ((cvterm.name)::text = 'ss_oligo'::text) OR ((cvterm.name)::text = 'ds_oligo'::text) OR ((cvterm.name)::text = 'DNAzyme'::text) OR ((cvterm.name)::text = 'synthetic_oligo'::text) OR ((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text) OR ((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text) OR ((cvterm.name)::text = 'EST'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text) OR ((cvterm.name)::text = 'UST'::text) OR ((cvterm.name)::text = 'RST'::text) OR ((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text) OR ((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text) OR ((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text) OR ((cvterm.name)::text = 'reverse_primer'::text) OR ((cvterm.name)::text = 'ASPE_primer'::text) OR ((cvterm.name)::text = 'dCAPS_primer'::text) OR ((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text) OR ((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text) OR ((cvterm.name)::text = 'LNA_oligo'::text) OR ((cvterm.name)::text = 'TNA_oligo'::text) OR ((cvterm.name)::text = 'GNA_oligo'::text) OR ((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_region'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'engineered_insert'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'match_part'::text) OR ((cvterm.name)::text = 'assembly_component'::text) OR ((cvterm.name)::text = 'conserved_region'::text) OR ((cvterm.name)::text = 'match'::text) OR ((cvterm.name)::text = 'remark'::text) OR ((cvterm.name)::text = 'reading_frame'::text) OR ((cvterm.name)::text = 'consensus_region'::text) OR ((cvterm.name)::text = 'low_complexity_region'::text) OR ((cvterm.name)::text = 'assembly'::text) OR ((cvterm.name)::text = 'transcribed_fragment'::text) OR ((cvterm.name)::text = 'transcribed_cluster'::text) OR ((cvterm.name)::text = 'high_identity_region'::text) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text) OR ((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'read'::text) OR ((cvterm.name)::text = 'restriction_fragment'::text) OR ((cvterm.name)::text = 'golden_path_fragment'::text) OR ((cvterm.name)::text = 'tiling_path_fragment'::text) OR ((cvterm.name)::text = 'gap'::text) OR ((cvterm.name)::text = 'sonicate_fragment'::text) OR ((cvterm.name)::text = 'paired_end_fragment'::text) OR ((cvterm.name)::text = 'read_pair'::text) OR ((cvterm.name)::text = 'contig_read'::text) OR ((cvterm.name)::text = 'BAC_end'::text) OR ((cvterm.name)::text = 'dye_terminator_read'::text) OR ((cvterm.name)::text = 'pyrosequenced_read'::text) OR ((cvterm.name)::text = 'ligation_based_read'::text) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text) OR ((cvterm.name)::text = 'PAC_end'::text) OR ((cvterm.name)::text = 'YAC_end'::text) OR ((cvterm.name)::text = 'clone_end'::text) OR ((cvterm.name)::text = 'RFLP_fragment'::text) OR ((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'coding_conserved_region'::text) OR ((cvterm.name)::text = 'nc_conserved_region'::text) OR ((cvterm.name)::text = 'RR_tract'::text) OR ((cvterm.name)::text = 'homologous_region'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text) OR ((cvterm.name)::text = 'X_element'::text) OR ((cvterm.name)::text = 'U_box'::text) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text) OR ((cvterm.name)::text = 'syntenic_region'::text) OR ((cvterm.name)::text = 'paralogous_region'::text) OR ((cvterm.name)::text = 'orthologous_region'::text) OR ((cvterm.name)::text = 'nucleotide_match'::text) OR ((cvterm.name)::text = 'protein_match'::text) OR ((cvterm.name)::text = 'expressed_sequence_match'::text) OR ((cvterm.name)::text = 'cross_genome_match'::text) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text) OR ((cvterm.name)::text = 'primer_match'::text) OR ((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text) OR ((cvterm.name)::text = 'UST_match'::text) OR ((cvterm.name)::text = 'RST_match'::text) OR ((cvterm.name)::text = 'sequence_difference'::text) OR ((cvterm.name)::text = 'experimental_result_region'::text) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text) OR ((cvterm.name)::text = 'possible_base_call_error'::text) OR ((cvterm.name)::text = 'possible_assembly_error'::text) OR ((cvterm.name)::text = 'assembly_error_correction'::text) OR ((cvterm.name)::text = 'base_call_error_correction'::text) OR ((cvterm.name)::text = 'overlapping_feature_set'::text) OR ((cvterm.name)::text = 'no_output'::text) OR ((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'non_adjacent_residues'::text) OR ((cvterm.name)::text = 'non_terminal_residue'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text) OR ((cvterm.name)::text = 'sequence_uncertainty'::text) OR ((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'ORF'::text) OR ((cvterm.name)::text = 'blocked_reading_frame'::text) OR ((cvterm.name)::text = 'mini_gene'::text) OR ((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'sequence_assembly'::text) OR ((cvterm.name)::text = 'fragment_assembly'::text) OR ((cvterm.name)::text = 'supercontig'::text) OR ((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'tiling_path'::text) OR ((cvterm.name)::text = 'virtual_sequence'::text) OR ((cvterm.name)::text = 'golden_path'::text) OR ((cvterm.name)::text = 'ultracontig'::text) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text) OR ((cvterm.name)::text = 'fingerprint_map'::text) OR ((cvterm.name)::text = 'STS_map'::text) OR ((cvterm.name)::text = 'RH_map'::text) OR ((cvterm.name)::text = 'unigene_cluster'::text) OR ((cvterm.name)::text = 'CHiP_seq_region'::text) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'linkage_group'::text) OR ((cvterm.name)::text = 'polypeptide'::text) OR ((cvterm.name)::text = 'deletion'::text) OR ((cvterm.name)::text = 'origin_of_replication'::text) OR ((cvterm.name)::text = 'recombination_feature'::text) OR ((cvterm.name)::text = 'CpG_island'::text) OR ((cvterm.name)::text = 'pseudogene'::text) OR ((cvterm.name)::text = 'binding_site'::text) OR ((cvterm.name)::text = 'pseudogenic_region'::text) OR ((cvterm.name)::text = 'cap'::text) OR ((cvterm.name)::text = 'intergenic_region'::text) OR ((cvterm.name)::text = 'oligo_U_tail'::text) OR ((cvterm.name)::text = 'polyA_sequence'::text) OR ((cvterm.name)::text = 'repeat_region'::text) OR ((cvterm.name)::text = 'insertion'::text) OR ((cvterm.name)::text = 'gene'::text) OR ((cvterm.name)::text = 'repeat_unit'::text) OR ((cvterm.name)::text = 'QTL'::text) OR ((cvterm.name)::text = 'chromosome_part'::text) OR ((cvterm.name)::text = 'gene_member_region'::text) OR ((cvterm.name)::text = 'transcript_region'::text) OR ((cvterm.name)::text = 'polypeptide_region'::text) OR ((cvterm.name)::text = 'gene_component_region'::text) OR ((cvterm.name)::text = 'mobile_genetic_element'::text) OR ((cvterm.name)::text = 'replicon'::text) OR ((cvterm.name)::text = 'base'::text) OR ((cvterm.name)::text = 'amino_acid'::text) OR ((cvterm.name)::text = 'genetic_marker'::text) OR ((cvterm.name)::text = 'sequence_motif'::text) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text) OR ((cvterm.name)::text = 'open_chromatin_region'::text) OR ((cvterm.name)::text = 'gene_group'::text) OR ((cvterm.name)::text = 'substitution'::text) OR ((cvterm.name)::text = 'inversion'::text) OR ((cvterm.name)::text = 'retron'::text) OR ((cvterm.name)::text = 'G_quartet'::text) OR ((cvterm.name)::text = 'base_pair'::text) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'pseudoknot'::text) OR ((cvterm.name)::text = 'WC_base_pair'::text) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'wobble_base_pair'::text) OR ((cvterm.name)::text = 'stem_loop'::text) OR ((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'i_motif'::text) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text) OR ((cvterm.name)::text = 'H_pseudoknot'::text) OR ((cvterm.name)::text = 'D_loop'::text) OR ((cvterm.name)::text = 'ARS'::text) OR ((cvterm.name)::text = 'oriT'::text) OR ((cvterm.name)::text = 'amplification_origin'::text) OR ((cvterm.name)::text = 'oriV'::text) OR ((cvterm.name)::text = 'oriC'::text) OR ((cvterm.name)::text = 'recombination_hotspot'::text) OR ((cvterm.name)::text = 'haplotype_block'::text) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text) OR ((cvterm.name)::text = 'iDNA'::text) OR ((cvterm.name)::text = 'specific_recombination_site'::text) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text) OR ((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text) OR ((cvterm.name)::text = 'inversion_site_part'::text) OR ((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text) OR ((cvterm.name)::text = 'attB_site'::text) OR ((cvterm.name)::text = 'attL_site'::text) OR ((cvterm.name)::text = 'attR_site'::text) OR ((cvterm.name)::text = 'attC_site'::text) OR ((cvterm.name)::text = 'attCtn_site'::text) OR ((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text) OR ((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text) OR ((cvterm.name)::text = 'processed_pseudogene'::text) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text) OR ((cvterm.name)::text = 'cassette_pseudogene'::text) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text) OR ((cvterm.name)::text = 'unitary_pseudogene'::text) OR ((cvterm.name)::text = 'protein_binding_site'::text) OR ((cvterm.name)::text = 'epitope'::text) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text) OR ((cvterm.name)::text = 'metal_binding_site'::text) OR ((cvterm.name)::text = 'ligand_binding_site'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'histone_binding_site'::text) OR ((cvterm.name)::text = 'insulator_binding_site'::text) OR ((cvterm.name)::text = 'enhancer_binding_site'::text) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'miRNA_target_site'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text) OR ((cvterm.name)::text = 'primer_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'decayed_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text) OR ((cvterm.name)::text = 'long_terminal_repeat'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text) OR ((cvterm.name)::text = 'inverted_repeat'::text) OR ((cvterm.name)::text = 'direct_repeat'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'dispersed_repeat'::text) OR ((cvterm.name)::text = 'tandem_repeat'::text) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text) OR ((cvterm.name)::text = 'Y_prime_element'::text) OR ((cvterm.name)::text = 'telomeric_repeat'::text) OR ((cvterm.name)::text = 'nested_repeat'::text) OR ((cvterm.name)::text = 'centromeric_repeat'::text) OR ((cvterm.name)::text = 'five_prime_LTR'::text) OR ((cvterm.name)::text = 'three_prime_LTR'::text) OR ((cvterm.name)::text = 'solo_LTR'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'target_site_duplication'::text) OR ((cvterm.name)::text = 'CRISPR'::text) OR ((cvterm.name)::text = 'satellite_DNA'::text) OR ((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text) OR ((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text) OR ((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text) OR ((cvterm.name)::text = 'nuclear_gene'::text) OR ((cvterm.name)::text = 'mt_gene'::text) OR ((cvterm.name)::text = 'plastid_gene'::text) OR ((cvterm.name)::text = 'nucleomorph_gene'::text) OR ((cvterm.name)::text = 'plasmid_gene'::text) OR ((cvterm.name)::text = 'proviral_gene'::text) OR ((cvterm.name)::text = 'transposable_element_gene'::text) OR ((cvterm.name)::text = 'silenced_gene'::text) OR ((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'foreign_gene'::text) OR ((cvterm.name)::text = 'fusion_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text) OR ((cvterm.name)::text = 'rescue_gene'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text) OR ((cvterm.name)::text = 'transgene'::text) OR ((cvterm.name)::text = 'predicted_gene'::text) OR ((cvterm.name)::text = 'protein_coding_gene'::text) OR ((cvterm.name)::text = 'retrogene'::text) OR ((cvterm.name)::text = 'ncRNA_gene'::text) OR ((cvterm.name)::text = 'cryptic_gene'::text) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'gene_cassette'::text) OR ((cvterm.name)::text = 'kinetoplast_gene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'apicoplast_gene'::text) OR ((cvterm.name)::text = 'ct_gene'::text) OR ((cvterm.name)::text = 'chromoplast_gene'::text) OR ((cvterm.name)::text = 'cyanelle_gene'::text) OR ((cvterm.name)::text = 'leucoplast_gene'::text) OR ((cvterm.name)::text = 'proplastid_gene'::text) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'floxed_gene'::text) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'gRNA_gene'::text) OR ((cvterm.name)::text = 'miRNA_gene'::text) OR ((cvterm.name)::text = 'scRNA_gene'::text) OR ((cvterm.name)::text = 'snoRNA_gene'::text) OR ((cvterm.name)::text = 'snRNA_gene'::text) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text) OR ((cvterm.name)::text = 'stRNA_gene'::text) OR ((cvterm.name)::text = 'tmRNA_gene'::text) OR ((cvterm.name)::text = 'tRNA_gene'::text) OR ((cvterm.name)::text = 'rRNA_gene'::text) OR ((cvterm.name)::text = 'piRNA_gene'::text) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text) OR ((cvterm.name)::text = 'lincRNA_gene'::text) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text) OR ((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text) OR ((cvterm.name)::text = 'chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosome_band'::text) OR ((cvterm.name)::text = 'interband'::text) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text) OR ((cvterm.name)::text = 'matrix_attachment_site'::text) OR ((cvterm.name)::text = 'centromere'::text) OR ((cvterm.name)::text = 'telomere'::text) OR ((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text) OR ((cvterm.name)::text = 'transcript'::text) OR ((cvterm.name)::text = 'regulatory_region'::text) OR ((cvterm.name)::text = 'polycistronic_transcript'::text) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'primary_transcript'::text) OR ((cvterm.name)::text = 'mature_transcript'::text) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_transcript'::text) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text) OR ((cvterm.name)::text = 'edited_transcript'::text) OR ((cvterm.name)::text = 'processed_transcript'::text) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text) OR ((cvterm.name)::text = 'capped_primary_transcript'::text) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'exemplar_mRNA'::text) OR ((cvterm.name)::text = 'capped_mRNA'::text) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'recoded_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text) OR ((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text) OR ((cvterm.name)::text = 'tRNA'::text) OR ((cvterm.name)::text = 'snRNA'::text) OR ((cvterm.name)::text = 'snoRNA'::text) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text) OR ((cvterm.name)::text = 'RNase_P_RNA'::text) OR ((cvterm.name)::text = 'telomerase_RNA'::text) OR ((cvterm.name)::text = 'vault_RNA'::text) OR ((cvterm.name)::text = 'Y_RNA'::text) OR ((cvterm.name)::text = 'rasiRNA'::text) OR ((cvterm.name)::text = 'SRP_RNA'::text) OR ((cvterm.name)::text = 'guide_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text) OR ((cvterm.name)::text = 'siRNA'::text) OR ((cvterm.name)::text = 'stRNA'::text) OR ((cvterm.name)::text = 'class_II_RNA'::text) OR ((cvterm.name)::text = 'class_I_RNA'::text) OR ((cvterm.name)::text = 'piRNA'::text) OR ((cvterm.name)::text = 'lincRNA'::text) OR ((cvterm.name)::text = 'tasiRNA'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text) OR ((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text) OR ((cvterm.name)::text = 'glycyl_tRNA'::text) OR ((cvterm.name)::text = 'histidyl_tRNA'::text) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text) OR ((cvterm.name)::text = 'leucyl_tRNA'::text) OR ((cvterm.name)::text = 'lysyl_tRNA'::text) OR ((cvterm.name)::text = 'methionyl_tRNA'::text) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text) OR ((cvterm.name)::text = 'prolyl_tRNA'::text) OR ((cvterm.name)::text = 'seryl_tRNA'::text) OR ((cvterm.name)::text = 'threonyl_tRNA'::text) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text) OR ((cvterm.name)::text = 'valyl_tRNA'::text) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text) OR ((cvterm.name)::text = 'arginyl_tRNA'::text) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text) OR ((cvterm.name)::text = 'U4_snRNA'::text) OR ((cvterm.name)::text = 'U4atac_snRNA'::text) OR ((cvterm.name)::text = 'U5_snRNA'::text) OR ((cvterm.name)::text = 'U6_snRNA'::text) OR ((cvterm.name)::text = 'U6atac_snRNA'::text) OR ((cvterm.name)::text = 'U11_snRNA'::text) OR ((cvterm.name)::text = 'U12_snRNA'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text) OR ((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text) OR ((cvterm.name)::text = 'OxyS_RNA'::text) OR ((cvterm.name)::text = 'RprA_RNA'::text) OR ((cvterm.name)::text = 'RRE_RNA'::text) OR ((cvterm.name)::text = 'spot_42_RNA'::text) OR ((cvterm.name)::text = 'tmRNA'::text) OR ((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text) OR ((cvterm.name)::text = 'replication_regulatory_region'::text) OR ((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text) OR ((cvterm.name)::text = 'CRM'::text) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text) OR ((cvterm.name)::text = 'ISRE'::text) OR ((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text) OR ((cvterm.name)::text = 'silencer'::text) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text) OR ((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'exon'::text) OR ((cvterm.name)::text = 'edited_transcript_feature'::text) OR ((cvterm.name)::text = 'mature_transcript_region'::text) OR ((cvterm.name)::text = 'primary_transcript_region'::text) OR ((cvterm.name)::text = 'exon_region'::text) OR ((cvterm.name)::text = 'anchor_binding_site'::text) OR ((cvterm.name)::text = 'coding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text) OR ((cvterm.name)::text = 'interior_exon'::text) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text) OR ((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'pre_edited_region'::text) OR ((cvterm.name)::text = 'editing_block'::text) OR ((cvterm.name)::text = 'editing_domain'::text) OR ((cvterm.name)::text = 'unedited_region'::text) OR ((cvterm.name)::text = 'mRNA_region'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text) OR ((cvterm.name)::text = 'guide_RNA_region'::text) OR ((cvterm.name)::text = 'tRNA_region'::text) OR ((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text) OR ((cvterm.name)::text = 'UTR'::text) OR ((cvterm.name)::text = 'CDS'::text) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text) OR ((cvterm.name)::text = 'UTR_region'::text) OR ((cvterm.name)::text = 'CDS_region'::text) OR ((cvterm.name)::text = 'translational_frameshift'::text) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'kozak_sequence'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text) OR ((cvterm.name)::text = 'internal_UTR'::text) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text) OR ((cvterm.name)::text = 'CDS_independently_known'::text) OR ((cvterm.name)::text = 'CDS_predicted'::text) OR ((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text) OR ((cvterm.name)::text = 'Bruno_response_element'::text) OR ((cvterm.name)::text = 'iron_responsive_element'::text) OR ((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text) OR ((cvterm.name)::text = 'codon'::text) OR ((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text) OR ((cvterm.name)::text = 'stop_codon'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text) OR ((cvterm.name)::text = 'stop_codon_signal'::text) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text) OR ((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text) OR ((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text) OR ((cvterm.name)::text = 'CCA_tail'::text) OR ((cvterm.name)::text = 'DHU_loop'::text) OR ((cvterm.name)::text = 'T_loop'::text) OR ((cvterm.name)::text = 'splice_site'::text) OR ((cvterm.name)::text = 'intron'::text) OR ((cvterm.name)::text = 'clip'::text) OR ((cvterm.name)::text = 'TSS'::text) OR ((cvterm.name)::text = 'transcription_end_site'::text) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text) OR ((cvterm.name)::text = 'intron_domain'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'outron'::text) OR ((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text) OR ((cvterm.name)::text = 'cryptic_splice_site'::text) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'recursive_splice_site'::text) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text) OR ((cvterm.name)::text = 'three_prime_intron'::text) OR ((cvterm.name)::text = 'twintron'::text) OR ((cvterm.name)::text = 'UTR_intron'::text) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text) OR ((cvterm.name)::text = 'spliceosomal_intron'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text) OR ((cvterm.name)::text = 'group_III_intron'::text) OR ((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text) OR ((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text) OR ((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text) OR ((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text) OR ((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text) OR ((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text) OR ((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text) OR ((cvterm.name)::text = 'miRNA_loop'::text) OR ((cvterm.name)::text = 'miRNA_antiguide'::text) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'mature_protein_region'::text) OR ((cvterm.name)::text = 'immature_peptide_region'::text) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text) OR ((cvterm.name)::text = 'peptide_localization_signal'::text) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text) OR ((cvterm.name)::text = 'active_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'membrane_structure'::text) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text) OR ((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text) OR ((cvterm.name)::text = 'beta_bulge_loop'::text) OR ((cvterm.name)::text = 'beta_strand'::text) OR ((cvterm.name)::text = 'peptide_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop'::text) OR ((cvterm.name)::text = 'serine_threonine_motif'::text) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text) OR ((cvterm.name)::text = 'alpha_beta_motif'::text) OR ((cvterm.name)::text = 'peptide_coil'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text) OR ((cvterm.name)::text = 'three_ten_helix'::text) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text) OR ((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text) OR ((cvterm.name)::text = 'gamma_turn'::text) OR ((cvterm.name)::text = 'serine_threonine_turn'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'beta_turn_type_six'::text) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text) OR ((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text) OR ((cvterm.name)::text = 'natural_variant_site'::text) OR ((cvterm.name)::text = 'mutated_variant_site'::text) OR ((cvterm.name)::text = 'alternate_sequence_site'::text) OR ((cvterm.name)::text = 'signal_peptide'::text) OR ((cvterm.name)::text = 'transit_peptide'::text) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text) OR ((cvterm.name)::text = 'nuclear_export_signal'::text) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text) OR ((cvterm.name)::text = 'intein'::text) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text) OR ((cvterm.name)::text = 'propeptide'::text) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text) OR ((cvterm.name)::text = 'n_terminal_region'::text) OR ((cvterm.name)::text = 'c_terminal_region'::text) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text) OR ((cvterm.name)::text = 'polypeptide_repeat'::text) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text) OR ((cvterm.name)::text = 'molecular_contact_region'::text) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text) OR ((cvterm.name)::text = 'non_transcribed_region'::text) OR ((cvterm.name)::text = 'gene_fragment'::text) OR ((cvterm.name)::text = 'TSS_region'::text) OR ((cvterm.name)::text = 'gene_segment'::text) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'transposable_element'::text) OR ((cvterm.name)::text = 'proviral_region'::text) OR ((cvterm.name)::text = 'integron'::text) OR ((cvterm.name)::text = 'genomic_island'::text) OR ((cvterm.name)::text = 'integrated_plasmid'::text) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text) OR ((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'nested_transposon'::text) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text) OR ((cvterm.name)::text = 'conjugative_transposon'::text) OR ((cvterm.name)::text = 'helitron'::text) OR ((cvterm.name)::text = 'p_element'::text) OR ((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text) OR ((cvterm.name)::text = 'polinton'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text) OR ((cvterm.name)::text = 'adaptive_island'::text) OR ((cvterm.name)::text = 'symbiosis_island'::text) OR ((cvterm.name)::text = 'cryptic_prophage'::text) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text) OR ((cvterm.name)::text = 'plasmid'::text) OR ((cvterm.name)::text = 'chromosome'::text) OR ((cvterm.name)::text = 'vector_replicon'::text) OR ((cvterm.name)::text = 'maxicircle'::text) OR ((cvterm.name)::text = 'minicircle'::text) OR ((cvterm.name)::text = 'viral_sequence'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'episome'::text) OR ((cvterm.name)::text = 'natural_plasmid'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text) OR ((cvterm.name)::text = 'promoter_trap_construct'::text) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text) OR ((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text) OR ((cvterm.name)::text = 'nuclear_chromosome'::text) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text) OR ((cvterm.name)::text = 'DNA_chromosome'::text) OR ((cvterm.name)::text = 'RNA_chromosome'::text) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'YAC'::text) OR ((cvterm.name)::text = 'BAC'::text) OR ((cvterm.name)::text = 'PAC'::text) OR ((cvterm.name)::text = 'cosmid'::text) OR ((cvterm.name)::text = 'phagemid'::text) OR ((cvterm.name)::text = 'fosmid'::text) OR ((cvterm.name)::text = 'lambda_vector'::text) OR ((cvterm.name)::text = 'plasmid_vector'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text) OR ((cvterm.name)::text = 'inosine'::text) OR ((cvterm.name)::text = 'seven_methylguanine'::text) OR ((cvterm.name)::text = 'ribothymidine'::text) OR ((cvterm.name)::text = 'modified_adenosine'::text) OR ((cvterm.name)::text = 'modified_cytidine'::text) OR ((cvterm.name)::text = 'modified_guanosine'::text) OR ((cvterm.name)::text = 'modified_uridine'::text) OR ((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text) OR ((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text) OR ((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'two_thiocytidine'::text) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text) OR ((cvterm.name)::text = 'five_formylcytidine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'lysidine'::text) OR ((cvterm.name)::text = 'N4_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_methylguanosine'::text) OR ((cvterm.name)::text = 'seven_methylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text) OR ((cvterm.name)::text = 'wybutosine'::text) OR ((cvterm.name)::text = 'peroxywybutosine'::text) OR ((cvterm.name)::text = 'hydroxywybutosine'::text) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text) OR ((cvterm.name)::text = 'wyosine'::text) OR ((cvterm.name)::text = 'methylwyosine'::text) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text) OR ((cvterm.name)::text = 'four_demethylwyosine'::text) OR ((cvterm.name)::text = 'isowyosine'::text) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text) OR ((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'archaeosine'::text) OR ((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text) OR ((cvterm.name)::text = 'five_methyluridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text) OR ((cvterm.name)::text = 'two_thiouridine'::text) OR ((cvterm.name)::text = 'four_thiouridine'::text) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text) OR ((cvterm.name)::text = 'five_methoxyuridine'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'three_methyluridine'::text) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text) OR ((cvterm.name)::text = 'catalytic_residue'::text) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text) OR ((cvterm.name)::text = 'alanine'::text) OR ((cvterm.name)::text = 'valine'::text) OR ((cvterm.name)::text = 'leucine'::text) OR ((cvterm.name)::text = 'isoleucine'::text) OR ((cvterm.name)::text = 'proline'::text) OR ((cvterm.name)::text = 'tryptophan'::text) OR ((cvterm.name)::text = 'phenylalanine'::text) OR ((cvterm.name)::text = 'methionine'::text) OR ((cvterm.name)::text = 'glycine'::text) OR ((cvterm.name)::text = 'serine'::text) OR ((cvterm.name)::text = 'threonine'::text) OR ((cvterm.name)::text = 'tyrosine'::text) OR ((cvterm.name)::text = 'cysteine'::text) OR ((cvterm.name)::text = 'glutamine'::text) OR ((cvterm.name)::text = 'asparagine'::text) OR ((cvterm.name)::text = 'lysine'::text) OR ((cvterm.name)::text = 'arginine'::text) OR ((cvterm.name)::text = 'histidine'::text) OR ((cvterm.name)::text = 'aspartic_acid'::text) OR ((cvterm.name)::text = 'glutamic_acid'::text) OR ((cvterm.name)::text = 'selenocysteine'::text) OR ((cvterm.name)::text = 'pyrrolysine'::text) OR ((cvterm.name)::text = 'modified_glycine'::text) OR ((cvterm.name)::text = 'modified_L_alanine'::text) OR ((cvterm.name)::text = 'modified_L_asparagine'::text) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text) OR ((cvterm.name)::text = 'modified_L_cysteine'::text) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text) OR ((cvterm.name)::text = 'modified_L_threonine'::text) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text) OR ((cvterm.name)::text = 'modified_L_glutamine'::text) OR ((cvterm.name)::text = 'modified_L_methionine'::text) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text) OR ((cvterm.name)::text = 'modified_L_histidine'::text) OR ((cvterm.name)::text = 'modified_L_serine'::text) OR ((cvterm.name)::text = 'modified_L_lysine'::text) OR ((cvterm.name)::text = 'modified_L_leucine'::text) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text) OR ((cvterm.name)::text = 'modified_L_valine'::text) OR ((cvterm.name)::text = 'modified_L_proline'::text) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text) OR ((cvterm.name)::text = 'modified_L_arginine'::text) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text) OR ((cvterm.name)::text = 'DArT_marker'::text) OR ((cvterm.name)::text = 'nucleotide_motif'::text) OR ((cvterm.name)::text = 'DNA_motif'::text) OR ((cvterm.name)::text = 'RNA_motif'::text) OR ((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text) OR ((cvterm.name)::text = 'minus_10_signal'::text) OR ((cvterm.name)::text = 'minus_35_signal'::text) OR ((cvterm.name)::text = 'DRE_motif'::text) OR ((cvterm.name)::text = 'E_box_motif'::text) OR ((cvterm.name)::text = 'INR1_motif'::text) OR ((cvterm.name)::text = 'GAGA_motif'::text) OR ((cvterm.name)::text = 'octamer_motif'::text) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text) OR ((cvterm.name)::text = 'promoter_element'::text) OR ((cvterm.name)::text = 'DCE_SI'::text) OR ((cvterm.name)::text = 'DCE_SII'::text) OR ((cvterm.name)::text = 'DCE_SIII'::text) OR ((cvterm.name)::text = 'minus_12_signal'::text) OR ((cvterm.name)::text = 'minus_24_signal'::text) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text) OR ((cvterm.name)::text = 'DMv5_motif'::text) OR ((cvterm.name)::text = 'DMv3_motif'::text) OR ((cvterm.name)::text = 'DMv2_motif'::text) OR ((cvterm.name)::text = 'DPE1_motif'::text) OR ((cvterm.name)::text = 'DMv1_motif'::text) OR ((cvterm.name)::text = 'NDM2_motif'::text) OR ((cvterm.name)::text = 'NDM3_motif'::text) OR ((cvterm.name)::text = 'core_promoter_element'::text) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text) OR ((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text) OR ((cvterm.name)::text = 'BREu_motif'::text) OR ((cvterm.name)::text = 'TATA_box'::text) OR ((cvterm.name)::text = 'A_box'::text) OR ((cvterm.name)::text = 'B_box'::text) OR ((cvterm.name)::text = 'C_box'::text) OR ((cvterm.name)::text = 'MTE'::text) OR ((cvterm.name)::text = 'BREd_motif'::text) OR ((cvterm.name)::text = 'DCE'::text) OR ((cvterm.name)::text = 'intermediate_element'::text) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text) OR ((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'modified_base'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text) OR ((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'methylated_base_feature'::text) OR ((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K23_acylation site'::text) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text) OR ((cvterm.name)::text = 'H4K8_acylation site'::text) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'operon'::text) OR ((cvterm.name)::text = 'mating_type_region'::text) OR ((cvterm.name)::text = 'gene_array'::text) OR ((cvterm.name)::text = 'gene_subarray'::text) OR ((cvterm.name)::text = 'gene_cassette_array'::text) OR ((cvterm.name)::text = 'regulon'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text) OR ((cvterm.name)::text = 'SNV'::text) OR ((cvterm.name)::text = 'complex_substitution'::text) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text) OR ((cvterm.name)::text = 'transition'::text) OR ((cvterm.name)::text = 'transversion'::text) OR ((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text) OR ((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'flanking_region'::text) OR ((cvterm.name)::text = 'repeat_component'::text) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'LTR_component'::text) OR ((cvterm.name)::text = 'repeat_fragment'::text) OR ((cvterm.name)::text = 'transposon_fragment'::text) OR ((cvterm.name)::text = 'U5_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'clone_insert_end'::text) OR ((cvterm.name)::text = 'clone_insert_start'::text) OR ((cvterm.name)::text = 'exon_junction'::text) OR ((cvterm.name)::text = 'insertion_site'::text) OR ((cvterm.name)::text = 'polyA_site'::text) OR ((cvterm.name)::text = 'deletion_junction'::text) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text) OR ((cvterm.name)::text = 'splice_junction'::text) OR ((cvterm.name)::text = 'trans_splice_junction'::text) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text) OR ((cvterm.name)::text = 'transposable_element_insertion_site'::text) OR ((cvterm.name)::text = 'inversion_breakpoint'::text) OR ((cvterm.name)::text = 'translocation_breakpoint'::text) OR ((cvterm.name)::text = 'insertion_breakpoint'::text) OR ((cvterm.name)::text = 'deletion_breakpoint'::text) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'deletion'::text) OR ((cvterm.name)::text = 'translocation'::text) OR ((cvterm.name)::text = 'insertion'::text) OR ((cvterm.name)::text = 'copy_number_variation'::text) OR ((cvterm.name)::text = 'UPD'::text) OR ((cvterm.name)::text = 'structural_alteration'::text) OR ((cvterm.name)::text = 'substitution'::text) OR ((cvterm.name)::text = 'indel'::text) OR ((cvterm.name)::text = 'inversion'::text) OR ((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text) OR ((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text) OR ((cvterm.name)::text = 'copy_number_gain'::text) OR ((cvterm.name)::text = 'copy_number_loss'::text) OR ((cvterm.name)::text = 'maternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'complex_structural_alteration'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text) OR ((cvterm.name)::text = 'SNV'::text) OR ((cvterm.name)::text = 'complex_substitution'::text) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text) OR ((cvterm.name)::text = 'transition'::text) OR ((cvterm.name)::text = 'transversion'::text) OR ((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text) OR ((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'sequence_feature'::text));


ALTER TABLE so.sequence_feature OWNER TO kmr44;

--
-- Name: sequence_length_variation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_length_variation AS
 SELECT feature.feature_id AS sequence_length_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text));


ALTER TABLE so.sequence_length_variation OWNER TO kmr44;

--
-- Name: sequence_location; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_location AS
 SELECT feature.feature_id AS sequence_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'organelle_sequence'::text) OR ((cvterm.name)::text = 'plasmid_location'::text) OR ((cvterm.name)::text = 'proviral_location'::text) OR ((cvterm.name)::text = 'macronuclear_sequence'::text) OR ((cvterm.name)::text = 'micronuclear_sequence'::text) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text) OR ((cvterm.name)::text = 'nuclear_sequence'::text) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text) OR ((cvterm.name)::text = 'plastid_sequence'::text) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text) OR ((cvterm.name)::text = 'apicoplast_sequence'::text) OR ((cvterm.name)::text = 'chromoplast_sequence'::text) OR ((cvterm.name)::text = 'chloroplast_sequence'::text) OR ((cvterm.name)::text = 'cyanelle_sequence'::text) OR ((cvterm.name)::text = 'leucoplast_sequence'::text) OR ((cvterm.name)::text = 'proplastid_sequence'::text) OR ((cvterm.name)::text = 'chloroplast_DNA'::text) OR ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text) OR ((cvterm.name)::text = 'sequence_location'::text));


ALTER TABLE so.sequence_location OWNER TO kmr44;

--
-- Name: sequence_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_motif AS
 SELECT feature.feature_id AS sequence_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nucleotide_motif'::text) OR ((cvterm.name)::text = 'DNA_motif'::text) OR ((cvterm.name)::text = 'RNA_motif'::text) OR ((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text) OR ((cvterm.name)::text = 'minus_10_signal'::text) OR ((cvterm.name)::text = 'minus_35_signal'::text) OR ((cvterm.name)::text = 'DRE_motif'::text) OR ((cvterm.name)::text = 'E_box_motif'::text) OR ((cvterm.name)::text = 'INR1_motif'::text) OR ((cvterm.name)::text = 'GAGA_motif'::text) OR ((cvterm.name)::text = 'octamer_motif'::text) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text) OR ((cvterm.name)::text = 'promoter_element'::text) OR ((cvterm.name)::text = 'DCE_SI'::text) OR ((cvterm.name)::text = 'DCE_SII'::text) OR ((cvterm.name)::text = 'DCE_SIII'::text) OR ((cvterm.name)::text = 'minus_12_signal'::text) OR ((cvterm.name)::text = 'minus_24_signal'::text) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text) OR ((cvterm.name)::text = 'DMv5_motif'::text) OR ((cvterm.name)::text = 'DMv3_motif'::text) OR ((cvterm.name)::text = 'DMv2_motif'::text) OR ((cvterm.name)::text = 'DPE1_motif'::text) OR ((cvterm.name)::text = 'DMv1_motif'::text) OR ((cvterm.name)::text = 'NDM2_motif'::text) OR ((cvterm.name)::text = 'NDM3_motif'::text) OR ((cvterm.name)::text = 'core_promoter_element'::text) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text) OR ((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text) OR ((cvterm.name)::text = 'BREu_motif'::text) OR ((cvterm.name)::text = 'TATA_box'::text) OR ((cvterm.name)::text = 'A_box'::text) OR ((cvterm.name)::text = 'B_box'::text) OR ((cvterm.name)::text = 'C_box'::text) OR ((cvterm.name)::text = 'MTE'::text) OR ((cvterm.name)::text = 'BREd_motif'::text) OR ((cvterm.name)::text = 'DCE'::text) OR ((cvterm.name)::text = 'intermediate_element'::text) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text) OR ((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text) OR ((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text) OR ((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'sequence_motif'::text));


ALTER TABLE so.sequence_motif OWNER TO kmr44;

--
-- Name: sequence_rearrangement_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_rearrangement_feature AS
 SELECT feature.feature_id AS sequence_rearrangement_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'specific_recombination_site'::text) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text) OR ((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text) OR ((cvterm.name)::text = 'inversion_site_part'::text) OR ((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text) OR ((cvterm.name)::text = 'attB_site'::text) OR ((cvterm.name)::text = 'attL_site'::text) OR ((cvterm.name)::text = 'attR_site'::text) OR ((cvterm.name)::text = 'attC_site'::text) OR ((cvterm.name)::text = 'attCtn_site'::text) OR ((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text) OR ((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text));


ALTER TABLE so.sequence_rearrangement_feature OWNER TO kmr44;

--
-- Name: sequence_secondary_structure; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_secondary_structure AS
 SELECT feature.feature_id AS sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'G_quartet'::text) OR ((cvterm.name)::text = 'base_pair'::text) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'pseudoknot'::text) OR ((cvterm.name)::text = 'WC_base_pair'::text) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text) OR ((cvterm.name)::text = 'wobble_base_pair'::text) OR ((cvterm.name)::text = 'stem_loop'::text) OR ((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'i_motif'::text) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text) OR ((cvterm.name)::text = 'H_pseudoknot'::text) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text));


ALTER TABLE so.sequence_secondary_structure OWNER TO kmr44;

--
-- Name: sequence_uncertainty; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_uncertainty AS
 SELECT feature.feature_id AS sequence_uncertainty_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sequence_uncertainty'::text);


ALTER TABLE so.sequence_uncertainty OWNER TO kmr44;

--
-- Name: sequence_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequence_variant AS
 SELECT feature.feature_id AS sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'functional_variant'::text) OR ((cvterm.name)::text = 'structural_variant'::text) OR ((cvterm.name)::text = 'loss_of_heterozygosity'::text) OR ((cvterm.name)::text = 'transcript_function_variant'::text) OR ((cvterm.name)::text = 'translational_product_function_variant'::text) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text) OR ((cvterm.name)::text = 'transcript_processing_variant'::text) OR ((cvterm.name)::text = 'transcript_stability_variant'::text) OR ((cvterm.name)::text = 'transcription_variant'::text) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'editing_variant'::text) OR ((cvterm.name)::text = 'polyadenylation_variant'::text) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'translational_product_level_variant'::text) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text) OR ((cvterm.name)::text = 'increased_translational_product_level'::text) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'silent_mutation'::text) OR ((cvterm.name)::text = 'copy_number_change'::text) OR ((cvterm.name)::text = 'gene_variant'::text) OR ((cvterm.name)::text = 'regulatory_region_variant'::text) OR ((cvterm.name)::text = 'intergenic_variant'::text) OR ((cvterm.name)::text = 'upstream_gene_variant'::text) OR ((cvterm.name)::text = 'downstream_gene_variant'::text) OR ((cvterm.name)::text = 'gene_fusion'::text) OR ((cvterm.name)::text = 'splicing_variant'::text) OR ((cvterm.name)::text = 'transcript_variant'::text) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text) OR ((cvterm.name)::text = 'exon_loss'::text) OR ((cvterm.name)::text = 'intron_gain'::text) OR ((cvterm.name)::text = 'splice_region_variant'::text) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'nc_transcript_variant'::text) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text) OR ((cvterm.name)::text = 'UTR_variant'::text) OR ((cvterm.name)::text = 'intron_variant'::text) OR ((cvterm.name)::text = 'exon_variant'::text) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text) OR ((cvterm.name)::text = 'splice_site_variant'::text) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text) OR ((cvterm.name)::text = 'coding_sequence_variant'::text) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text) OR ((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text) OR ((cvterm.name)::text = 'inframe_variant'::text) OR ((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text) OR ((cvterm.name)::text = 'synonymous_codon'::text) OR ((cvterm.name)::text = 'terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text) OR ((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text) OR ((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text) OR ((cvterm.name)::text = 'conformational_change_variant'::text) OR ((cvterm.name)::text = 'amino_acid_deletion'::text) OR ((cvterm.name)::text = 'amino_acid_insertion'::text) OR ((cvterm.name)::text = 'amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide'::text) OR ((cvterm.name)::text = 'polypeptide_fusion'::text) OR ((cvterm.name)::text = 'polypeptide_truncation'::text) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'TF_binding_site_variant'::text) OR ((cvterm.name)::text = '5KB_upstream_variant'::text) OR ((cvterm.name)::text = '2KB_upstream_variant'::text) OR ((cvterm.name)::text = '5KB_downstream_variant'::text) OR ((cvterm.name)::text = '500B_downstream_variant'::text) OR ((cvterm.name)::text = 'sequence_variant'::text));


ALTER TABLE so.sequence_variant OWNER TO kmr44;

--
-- Name: sequencing_primer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sequencing_primer AS
 SELECT feature.feature_id AS sequencing_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sequencing_primer'::text);


ALTER TABLE so.sequencing_primer OWNER TO kmr44;

--
-- Name: serine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.serine AS
 SELECT feature.feature_id AS serine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine'::text);


ALTER TABLE so.serine OWNER TO kmr44;

--
-- Name: serine_threonine_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.serine_threonine_motif AS
 SELECT feature.feature_id AS serine_threonine_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_threonine_motif'::text);


ALTER TABLE so.serine_threonine_motif OWNER TO kmr44;

--
-- Name: serine_threonine_staple_motif; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.serine_threonine_staple_motif AS
 SELECT feature.feature_id AS serine_threonine_staple_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_threonine_staple_motif'::text);


ALTER TABLE so.serine_threonine_staple_motif OWNER TO kmr44;

--
-- Name: serine_threonine_turn; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.serine_threonine_turn AS
 SELECT feature.feature_id AS serine_threonine_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text) OR ((cvterm.name)::text = 'serine_threonine_turn'::text));


ALTER TABLE so.serine_threonine_turn OWNER TO kmr44;

--
-- Name: serine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.serine_trna_primary_transcript AS
 SELECT feature.feature_id AS serine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text);


ALTER TABLE so.serine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: seryl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.seryl_trna AS
 SELECT feature.feature_id AS seryl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seryl_tRNA'::text);


ALTER TABLE so.seryl_trna OWNER TO kmr44;

--
-- Name: seven_aminomethyl_seven_deazaguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.seven_aminomethyl_seven_deazaguanosine AS
 SELECT feature.feature_id AS seven_aminomethyl_seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text);


ALTER TABLE so.seven_aminomethyl_seven_deazaguanosine OWNER TO kmr44;

--
-- Name: seven_cyano_seven_deazaguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.seven_cyano_seven_deazaguanosine AS
 SELECT feature.feature_id AS seven_cyano_seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text);


ALTER TABLE so.seven_cyano_seven_deazaguanosine OWNER TO kmr44;

--
-- Name: seven_deazaguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.seven_deazaguanosine AS
 SELECT feature.feature_id AS seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'archaeosine'::text) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text));


ALTER TABLE so.seven_deazaguanosine OWNER TO kmr44;

--
-- Name: seven_methylguanine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.seven_methylguanine AS
 SELECT feature.feature_id AS seven_methylguanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_methylguanine'::text);


ALTER TABLE so.seven_methylguanine OWNER TO kmr44;

--
-- Name: seven_methylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.seven_methylguanosine AS
 SELECT feature.feature_id AS seven_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_methylguanosine'::text);


ALTER TABLE so.seven_methylguanosine OWNER TO kmr44;

--
-- Name: shadow_enhancer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.shadow_enhancer AS
 SELECT feature.feature_id AS shadow_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'shadow_enhancer'::text);


ALTER TABLE so.shadow_enhancer OWNER TO kmr44;

--
-- Name: shine_dalgarno_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.shine_dalgarno_sequence AS
 SELECT feature.feature_id AS shine_dalgarno_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text);


ALTER TABLE so.shine_dalgarno_sequence OWNER TO kmr44;

--
-- Name: signal_peptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.signal_peptide AS
 SELECT feature.feature_id AS signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'signal_peptide'::text);


ALTER TABLE so.signal_peptide OWNER TO kmr44;

--
-- Name: silenced; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silenced AS
 SELECT feature.feature_id AS silenced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'silenced'::text));


ALTER TABLE so.silenced OWNER TO kmr44;

--
-- Name: silenced_by_dna_methylation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silenced_by_dna_methylation AS
 SELECT feature.feature_id AS silenced_by_dna_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text);


ALTER TABLE so.silenced_by_dna_methylation OWNER TO kmr44;

--
-- Name: silenced_by_dna_modification; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silenced_by_dna_modification AS
 SELECT feature.feature_id AS silenced_by_dna_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text));


ALTER TABLE so.silenced_by_dna_modification OWNER TO kmr44;

--
-- Name: silenced_by_histone_deacetylation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silenced_by_histone_deacetylation AS
 SELECT feature.feature_id AS silenced_by_histone_deacetylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text);


ALTER TABLE so.silenced_by_histone_deacetylation OWNER TO kmr44;

--
-- Name: silenced_by_histone_methylation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silenced_by_histone_methylation AS
 SELECT feature.feature_id AS silenced_by_histone_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_histone_methylation'::text);


ALTER TABLE so.silenced_by_histone_methylation OWNER TO kmr44;

--
-- Name: silenced_by_histone_modification; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silenced_by_histone_modification AS
 SELECT feature.feature_id AS silenced_by_histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text));


ALTER TABLE so.silenced_by_histone_modification OWNER TO kmr44;

--
-- Name: silenced_by_rna_interference; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silenced_by_rna_interference AS
 SELECT feature.feature_id AS silenced_by_rna_interference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_RNA_interference'::text);


ALTER TABLE so.silenced_by_rna_interference OWNER TO kmr44;

--
-- Name: silenced_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silenced_gene AS
 SELECT feature.feature_id AS silenced_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'silenced_gene'::text));


ALTER TABLE so.silenced_gene OWNER TO kmr44;

--
-- Name: silencer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silencer AS
 SELECT feature.feature_id AS silencer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silencer'::text);


ALTER TABLE so.silencer OWNER TO kmr44;

--
-- Name: silent_mutation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.silent_mutation AS
 SELECT feature.feature_id AS silent_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silent_mutation'::text);


ALTER TABLE so.silent_mutation OWNER TO kmr44;

--
-- Name: simple_sequence_length_variation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.simple_sequence_length_variation AS
 SELECT feature.feature_id AS simple_sequence_length_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'simple_sequence_length_variation'::text);


ALTER TABLE so.simple_sequence_length_variation OWNER TO kmr44;

--
-- Name: sine_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sine_element AS
 SELECT feature.feature_id AS sine_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SINE_element'::text);


ALTER TABLE so.sine_element OWNER TO kmr44;

--
-- Name: single; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.single AS
 SELECT feature.feature_id AS single_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'single'::text);


ALTER TABLE so.single OWNER TO kmr44;

--
-- Name: single_strand_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.single_strand_restriction_enzyme_cleavage_site AS
 SELECT feature.feature_id AS single_strand_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text));


ALTER TABLE so.single_strand_restriction_enzyme_cleavage_site OWNER TO kmr44;

--
-- Name: single_stranded_cdna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.single_stranded_cdna AS
 SELECT feature.feature_id AS single_stranded_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'single_stranded_cDNA'::text);


ALTER TABLE so.single_stranded_cdna OWNER TO kmr44;

--
-- Name: single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.single_stranded_dna_chromosome AS
 SELECT feature.feature_id AS single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text));


ALTER TABLE so.single_stranded_dna_chromosome OWNER TO kmr44;

--
-- Name: single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.single_stranded_rna_chromosome AS
 SELECT feature.feature_id AS single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text));


ALTER TABLE so.single_stranded_rna_chromosome OWNER TO kmr44;

--
-- Name: sirna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sirna AS
 SELECT feature.feature_id AS sirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'siRNA'::text);


ALTER TABLE so.sirna OWNER TO kmr44;

--
-- Name: site_specific_recombination_target_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.site_specific_recombination_target_region AS
 SELECT feature.feature_id AS site_specific_recombination_target_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text) OR ((cvterm.name)::text = 'inversion_site_part'::text) OR ((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text) OR ((cvterm.name)::text = 'attB_site'::text) OR ((cvterm.name)::text = 'attL_site'::text) OR ((cvterm.name)::text = 'attR_site'::text) OR ((cvterm.name)::text = 'attC_site'::text) OR ((cvterm.name)::text = 'attCtn_site'::text) OR ((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text) OR ((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text));


ALTER TABLE so.site_specific_recombination_target_region OWNER TO kmr44;

--
-- Name: sl10_accceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl10_accceptor_site AS
 SELECT feature.feature_id AS sl10_accceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL10_accceptor_site'::text);


ALTER TABLE so.sl10_accceptor_site OWNER TO kmr44;

--
-- Name: sl11_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl11_acceptor_site AS
 SELECT feature.feature_id AS sl11_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL11_acceptor_site'::text);


ALTER TABLE so.sl11_acceptor_site OWNER TO kmr44;

--
-- Name: sl12_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl12_acceptor_site AS
 SELECT feature.feature_id AS sl12_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL12_acceptor_site'::text);


ALTER TABLE so.sl12_acceptor_site OWNER TO kmr44;

--
-- Name: sl1_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl1_acceptor_site AS
 SELECT feature.feature_id AS sl1_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL1_acceptor_site'::text);


ALTER TABLE so.sl1_acceptor_site OWNER TO kmr44;

--
-- Name: sl2_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl2_acceptor_site AS
 SELECT feature.feature_id AS sl2_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text));


ALTER TABLE so.sl2_acceptor_site OWNER TO kmr44;

--
-- Name: sl3_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl3_acceptor_site AS
 SELECT feature.feature_id AS sl3_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL3_acceptor_site'::text);


ALTER TABLE so.sl3_acceptor_site OWNER TO kmr44;

--
-- Name: sl4_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl4_acceptor_site AS
 SELECT feature.feature_id AS sl4_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL4_acceptor_site'::text);


ALTER TABLE so.sl4_acceptor_site OWNER TO kmr44;

--
-- Name: sl5_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl5_acceptor_site AS
 SELECT feature.feature_id AS sl5_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL5_acceptor_site'::text);


ALTER TABLE so.sl5_acceptor_site OWNER TO kmr44;

--
-- Name: sl6_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl6_acceptor_site AS
 SELECT feature.feature_id AS sl6_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL6_acceptor_site'::text);


ALTER TABLE so.sl6_acceptor_site OWNER TO kmr44;

--
-- Name: sl7_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl7_acceptor_site AS
 SELECT feature.feature_id AS sl7_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL7_acceptor_site'::text);


ALTER TABLE so.sl7_acceptor_site OWNER TO kmr44;

--
-- Name: sl8_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl8_acceptor_site AS
 SELECT feature.feature_id AS sl8_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL8_acceptor_site'::text);


ALTER TABLE so.sl8_acceptor_site OWNER TO kmr44;

--
-- Name: sl9_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sl9_acceptor_site AS
 SELECT feature.feature_id AS sl9_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL9_acceptor_site'::text);


ALTER TABLE so.sl9_acceptor_site OWNER TO kmr44;

--
-- Name: small_regulatory_ncrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.small_regulatory_ncrna AS
 SELECT feature.feature_id AS small_regulatory_ncrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text) OR ((cvterm.name)::text = 'OxyS_RNA'::text) OR ((cvterm.name)::text = 'RprA_RNA'::text) OR ((cvterm.name)::text = 'RRE_RNA'::text) OR ((cvterm.name)::text = 'spot_42_RNA'::text) OR ((cvterm.name)::text = 'tmRNA'::text) OR ((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text));


ALTER TABLE so.small_regulatory_ncrna OWNER TO kmr44;

--
-- Name: small_subunit_rrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.small_subunit_rrna AS
 SELECT feature.feature_id AS small_subunit_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text));


ALTER TABLE so.small_subunit_rrna OWNER TO kmr44;

--
-- Name: snorna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snorna AS
 SELECT feature.feature_id AS snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text) OR ((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'snoRNA'::text));


ALTER TABLE so.snorna OWNER TO kmr44;

--
-- Name: snorna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snorna_encoding AS
 SELECT feature.feature_id AS snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'snoRNA_encoding'::text));


ALTER TABLE so.snorna_encoding OWNER TO kmr44;

--
-- Name: snorna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snorna_gene AS
 SELECT feature.feature_id AS snorna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snoRNA_gene'::text);


ALTER TABLE so.snorna_gene OWNER TO kmr44;

--
-- Name: snorna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snorna_primary_transcript AS
 SELECT feature.feature_id AS snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text));


ALTER TABLE so.snorna_primary_transcript OWNER TO kmr44;

--
-- Name: snp; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snp AS
 SELECT feature.feature_id AS snp_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SNP'::text);


ALTER TABLE so.snp OWNER TO kmr44;

--
-- Name: snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snrna AS
 SELECT feature.feature_id AS snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text) OR ((cvterm.name)::text = 'U4_snRNA'::text) OR ((cvterm.name)::text = 'U4atac_snRNA'::text) OR ((cvterm.name)::text = 'U5_snRNA'::text) OR ((cvterm.name)::text = 'U6_snRNA'::text) OR ((cvterm.name)::text = 'U6atac_snRNA'::text) OR ((cvterm.name)::text = 'U11_snRNA'::text) OR ((cvterm.name)::text = 'U12_snRNA'::text) OR ((cvterm.name)::text = 'snRNA'::text));


ALTER TABLE so.snrna OWNER TO kmr44;

--
-- Name: snrna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snrna_encoding AS
 SELECT feature.feature_id AS snrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_encoding'::text);


ALTER TABLE so.snrna_encoding OWNER TO kmr44;

--
-- Name: snrna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snrna_gene AS
 SELECT feature.feature_id AS snrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_gene'::text);


ALTER TABLE so.snrna_gene OWNER TO kmr44;

--
-- Name: snrna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snrna_primary_transcript AS
 SELECT feature.feature_id AS snrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_primary_transcript'::text);


ALTER TABLE so.snrna_primary_transcript OWNER TO kmr44;

--
-- Name: snv; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.snv AS
 SELECT feature.feature_id AS snv_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text) OR ((cvterm.name)::text = 'transition'::text) OR ((cvterm.name)::text = 'transversion'::text) OR ((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text) OR ((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'SNV'::text));


ALTER TABLE so.snv OWNER TO kmr44;

--
-- Name: so_foreign; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.so_foreign AS
 SELECT feature.feature_id AS so_foreign_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'foreign'::text);


ALTER TABLE so.so_foreign OWNER TO kmr44;

--
-- Name: so_genotype; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.so_genotype AS
 SELECT feature.feature_id AS so_genotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genotype'::text);


ALTER TABLE so.so_genotype OWNER TO kmr44;

--
-- Name: so_natural; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.so_natural AS
 SELECT feature.feature_id AS so_natural_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural'::text);


ALTER TABLE so.so_natural OWNER TO kmr44;

--
-- Name: solo_ltr; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.solo_ltr AS
 SELECT feature.feature_id AS solo_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'solo_LTR'::text);


ALTER TABLE so.solo_ltr OWNER TO kmr44;

--
-- Name: somatic_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.somatic_variant AS
 SELECT feature.feature_id AS somatic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'somatic_variant'::text);


ALTER TABLE so.somatic_variant OWNER TO kmr44;

--
-- Name: sonicate_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sonicate_fragment AS
 SELECT feature.feature_id AS sonicate_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sonicate_fragment'::text);


ALTER TABLE so.sonicate_fragment OWNER TO kmr44;

--
-- Name: sp6_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sp6_rna_polymerase_promoter AS
 SELECT feature.feature_id AS sp6_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text);


ALTER TABLE so.sp6_rna_polymerase_promoter OWNER TO kmr44;

--
-- Name: specific_recombination_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.specific_recombination_site AS
 SELECT feature.feature_id AS specific_recombination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text) OR ((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text) OR ((cvterm.name)::text = 'inversion_site_part'::text) OR ((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text) OR ((cvterm.name)::text = 'attB_site'::text) OR ((cvterm.name)::text = 'attL_site'::text) OR ((cvterm.name)::text = 'attR_site'::text) OR ((cvterm.name)::text = 'attC_site'::text) OR ((cvterm.name)::text = 'attCtn_site'::text) OR ((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text) OR ((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text) OR ((cvterm.name)::text = 'specific_recombination_site'::text));


ALTER TABLE so.specific_recombination_site OWNER TO kmr44;

--
-- Name: splice_acceptor_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splice_acceptor_variant AS
 SELECT feature.feature_id AS splice_acceptor_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_acceptor_variant'::text);


ALTER TABLE so.splice_acceptor_variant OWNER TO kmr44;

--
-- Name: splice_donor_5th_base_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splice_donor_5th_base_variant AS
 SELECT feature.feature_id AS splice_donor_5th_base_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text);


ALTER TABLE so.splice_donor_5th_base_variant OWNER TO kmr44;

--
-- Name: splice_donor_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splice_donor_variant AS
 SELECT feature.feature_id AS splice_donor_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_donor_variant'::text);


ALTER TABLE so.splice_donor_variant OWNER TO kmr44;

--
-- Name: splice_enhancer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splice_enhancer AS
 SELECT feature.feature_id AS splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text) OR ((cvterm.name)::text = 'splice_enhancer'::text));


ALTER TABLE so.splice_enhancer OWNER TO kmr44;

--
-- Name: splice_junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splice_junction AS
 SELECT feature.feature_id AS splice_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_junction'::text);


ALTER TABLE so.splice_junction OWNER TO kmr44;

--
-- Name: splice_region_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splice_region_variant AS
 SELECT feature.feature_id AS splice_region_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_region_variant'::text);


ALTER TABLE so.splice_region_variant OWNER TO kmr44;

--
-- Name: splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splice_site AS
 SELECT feature.feature_id AS splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text) OR ((cvterm.name)::text = 'cryptic_splice_site'::text) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'recursive_splice_site'::text) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'splice_site'::text));


ALTER TABLE so.splice_site OWNER TO kmr44;

--
-- Name: splice_site_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splice_site_variant AS
 SELECT feature.feature_id AS splice_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text) OR ((cvterm.name)::text = 'splice_site_variant'::text));


ALTER TABLE so.splice_site_variant OWNER TO kmr44;

--
-- Name: spliced_leader_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.spliced_leader_rna AS
 SELECT feature.feature_id AS spliced_leader_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'spliced_leader_RNA'::text);


ALTER TABLE so.spliced_leader_rna OWNER TO kmr44;

--
-- Name: spliceosomal_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.spliceosomal_intron AS
 SELECT feature.feature_id AS spliceosomal_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text) OR ((cvterm.name)::text = 'spliceosomal_intron'::text));


ALTER TABLE so.spliceosomal_intron OWNER TO kmr44;

--
-- Name: spliceosomal_intron_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.spliceosomal_intron_region AS
 SELECT feature.feature_id AS spliceosomal_intron_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text));


ALTER TABLE so.spliceosomal_intron_region OWNER TO kmr44;

--
-- Name: splicing_regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splicing_regulatory_region AS
 SELECT feature.feature_id AS splicing_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text));


ALTER TABLE so.splicing_regulatory_region OWNER TO kmr44;

--
-- Name: splicing_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.splicing_variant AS
 SELECT feature.feature_id AS splicing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cryptic_splice_site_variant'::text) OR ((cvterm.name)::text = 'exon_loss'::text) OR ((cvterm.name)::text = 'intron_gain'::text) OR ((cvterm.name)::text = 'splice_region_variant'::text) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text) OR ((cvterm.name)::text = 'splicing_variant'::text));


ALTER TABLE so.splicing_variant OWNER TO kmr44;

--
-- Name: spot_42_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.spot_42_rna AS
 SELECT feature.feature_id AS spot_42_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'spot_42_RNA'::text);


ALTER TABLE so.spot_42_rna OWNER TO kmr44;

--
-- Name: srp_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.srp_rna AS
 SELECT feature.feature_id AS srp_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA'::text);


ALTER TABLE so.srp_rna OWNER TO kmr44;

--
-- Name: srp_rna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.srp_rna_encoding AS
 SELECT feature.feature_id AS srp_rna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_encoding'::text);


ALTER TABLE so.srp_rna_encoding OWNER TO kmr44;

--
-- Name: srp_rna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.srp_rna_gene AS
 SELECT feature.feature_id AS srp_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_gene'::text);


ALTER TABLE so.srp_rna_gene OWNER TO kmr44;

--
-- Name: srp_rna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.srp_rna_primary_transcript AS
 SELECT feature.feature_id AS srp_rna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text);


ALTER TABLE so.srp_rna_primary_transcript OWNER TO kmr44;

--
-- Name: ss_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ss_oligo AS
 SELECT feature.feature_id AS ss_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text) OR ((cvterm.name)::text = 'reverse_primer'::text) OR ((cvterm.name)::text = 'ASPE_primer'::text) OR ((cvterm.name)::text = 'dCAPS_primer'::text) OR ((cvterm.name)::text = 'ss_oligo'::text));


ALTER TABLE so.ss_oligo OWNER TO kmr44;

--
-- Name: ss_rna_viral_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ss_rna_viral_sequence AS
 SELECT feature.feature_id AS ss_rna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text));


ALTER TABLE so.ss_rna_viral_sequence OWNER TO kmr44;

--
-- Name: st_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.st_turn_left_handed_type_one AS
 SELECT feature.feature_id AS st_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text);


ALTER TABLE so.st_turn_left_handed_type_one OWNER TO kmr44;

--
-- Name: st_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.st_turn_left_handed_type_two AS
 SELECT feature.feature_id AS st_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text);


ALTER TABLE so.st_turn_left_handed_type_two OWNER TO kmr44;

--
-- Name: st_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.st_turn_right_handed_type_one AS
 SELECT feature.feature_id AS st_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text);


ALTER TABLE so.st_turn_right_handed_type_one OWNER TO kmr44;

--
-- Name: st_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.st_turn_right_handed_type_two AS
 SELECT feature.feature_id AS st_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text);


ALTER TABLE so.st_turn_right_handed_type_two OWNER TO kmr44;

--
-- Name: standard_draft; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.standard_draft AS
 SELECT feature.feature_id AS standard_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'standard_draft'::text);


ALTER TABLE so.standard_draft OWNER TO kmr44;

--
-- Name: start_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.start_codon AS
 SELECT feature.feature_id AS start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text));


ALTER TABLE so.start_codon OWNER TO kmr44;

--
-- Name: status; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.status AS
 SELECT feature.feature_id AS status_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'fragmentary'::text) OR ((cvterm.name)::text = 'predicted'::text) OR ((cvterm.name)::text = 'validated'::text) OR ((cvterm.name)::text = 'invalidated'::text) OR ((cvterm.name)::text = 'independently_known'::text) OR ((cvterm.name)::text = 'consensus'::text) OR ((cvterm.name)::text = 'low_complexity'::text) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text) OR ((cvterm.name)::text = 'orphan'::text) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text) OR ((cvterm.name)::text = 'supported_by_domain_match'::text) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text) OR ((cvterm.name)::text = 'experimentally_determined'::text) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text) OR ((cvterm.name)::text = 'standard_draft'::text) OR ((cvterm.name)::text = 'high_quality_draft'::text) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text) OR ((cvterm.name)::text = 'noncontiguous_finished'::text) OR ((cvterm.name)::text = 'finished_genome'::text) OR ((cvterm.name)::text = 'status'::text));


ALTER TABLE so.status OWNER TO kmr44;

--
-- Name: stem_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stem_loop AS
 SELECT feature.feature_id AS stem_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'stem_loop'::text));


ALTER TABLE so.stem_loop OWNER TO kmr44;

--
-- Name: sticky_end_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sticky_end_restriction_enzyme_cleavage_site AS
 SELECT feature.feature_id AS sticky_end_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text);


ALTER TABLE so.sticky_end_restriction_enzyme_cleavage_site OWNER TO kmr44;

--
-- Name: stop_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stop_codon AS
 SELECT feature.feature_id AS stop_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon'::text);


ALTER TABLE so.stop_codon OWNER TO kmr44;

--
-- Name: stop_codon_read_through; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stop_codon_read_through AS
 SELECT feature.feature_id AS stop_codon_read_through_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text));


ALTER TABLE so.stop_codon_read_through OWNER TO kmr44;

--
-- Name: stop_codon_redefined_as_pyrrolysine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stop_codon_redefined_as_pyrrolysine AS
 SELECT feature.feature_id AS stop_codon_redefined_as_pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text);


ALTER TABLE so.stop_codon_redefined_as_pyrrolysine OWNER TO kmr44;

--
-- Name: stop_codon_redefined_as_selenocysteine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stop_codon_redefined_as_selenocysteine AS
 SELECT feature.feature_id AS stop_codon_redefined_as_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text);


ALTER TABLE so.stop_codon_redefined_as_selenocysteine OWNER TO kmr44;

--
-- Name: stop_codon_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stop_codon_signal AS
 SELECT feature.feature_id AS stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'stop_codon_signal'::text));


ALTER TABLE so.stop_codon_signal OWNER TO kmr44;

--
-- Name: stop_gained; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stop_gained AS
 SELECT feature.feature_id AS stop_gained_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_gained'::text);


ALTER TABLE so.stop_gained OWNER TO kmr44;

--
-- Name: stop_lost; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stop_lost AS
 SELECT feature.feature_id AS stop_lost_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_lost'::text);


ALTER TABLE so.stop_lost OWNER TO kmr44;

--
-- Name: stop_retained_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.stop_retained_variant AS
 SELECT feature.feature_id AS stop_retained_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_retained_variant'::text);


ALTER TABLE so.stop_retained_variant OWNER TO kmr44;

--
-- Name: strand_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.strand_attribute AS
 SELECT feature.feature_id AS strand_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'single'::text) OR ((cvterm.name)::text = 'double'::text) OR ((cvterm.name)::text = 'strand_attribute'::text));


ALTER TABLE so.strand_attribute OWNER TO kmr44;

--
-- Name: strna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.strna AS
 SELECT feature.feature_id AS strna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA'::text);


ALTER TABLE so.strna OWNER TO kmr44;

--
-- Name: strna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.strna_encoding AS
 SELECT feature.feature_id AS strna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_encoding'::text);


ALTER TABLE so.strna_encoding OWNER TO kmr44;

--
-- Name: strna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.strna_gene AS
 SELECT feature.feature_id AS strna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_gene'::text);


ALTER TABLE so.strna_gene OWNER TO kmr44;

--
-- Name: strna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.strna_primary_transcript AS
 SELECT feature.feature_id AS strna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_primary_transcript'::text);


ALTER TABLE so.strna_primary_transcript OWNER TO kmr44;

--
-- Name: structural_alteration; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.structural_alteration AS
 SELECT feature.feature_id AS structural_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'complex_structural_alteration'::text) OR ((cvterm.name)::text = 'structural_alteration'::text));


ALTER TABLE so.structural_alteration OWNER TO kmr44;

--
-- Name: structural_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.structural_variant AS
 SELECT feature.feature_id AS structural_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'silent_mutation'::text) OR ((cvterm.name)::text = 'copy_number_change'::text) OR ((cvterm.name)::text = 'gene_variant'::text) OR ((cvterm.name)::text = 'regulatory_region_variant'::text) OR ((cvterm.name)::text = 'intergenic_variant'::text) OR ((cvterm.name)::text = 'upstream_gene_variant'::text) OR ((cvterm.name)::text = 'downstream_gene_variant'::text) OR ((cvterm.name)::text = 'gene_fusion'::text) OR ((cvterm.name)::text = 'splicing_variant'::text) OR ((cvterm.name)::text = 'transcript_variant'::text) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text) OR ((cvterm.name)::text = 'exon_loss'::text) OR ((cvterm.name)::text = 'intron_gain'::text) OR ((cvterm.name)::text = 'splice_region_variant'::text) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'nc_transcript_variant'::text) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text) OR ((cvterm.name)::text = 'UTR_variant'::text) OR ((cvterm.name)::text = 'intron_variant'::text) OR ((cvterm.name)::text = 'exon_variant'::text) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text) OR ((cvterm.name)::text = 'splice_site_variant'::text) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text) OR ((cvterm.name)::text = 'coding_sequence_variant'::text) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text) OR ((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text) OR ((cvterm.name)::text = 'inframe_variant'::text) OR ((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text) OR ((cvterm.name)::text = 'synonymous_codon'::text) OR ((cvterm.name)::text = 'terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text) OR ((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text) OR ((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text) OR ((cvterm.name)::text = 'conformational_change_variant'::text) OR ((cvterm.name)::text = 'amino_acid_deletion'::text) OR ((cvterm.name)::text = 'amino_acid_insertion'::text) OR ((cvterm.name)::text = 'amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide'::text) OR ((cvterm.name)::text = 'polypeptide_fusion'::text) OR ((cvterm.name)::text = 'polypeptide_truncation'::text) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'TF_binding_site_variant'::text) OR ((cvterm.name)::text = '5KB_upstream_variant'::text) OR ((cvterm.name)::text = '2KB_upstream_variant'::text) OR ((cvterm.name)::text = '5KB_downstream_variant'::text) OR ((cvterm.name)::text = '500B_downstream_variant'::text) OR ((cvterm.name)::text = 'structural_variant'::text));


ALTER TABLE so.structural_variant OWNER TO kmr44;

--
-- Name: sts; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sts AS
 SELECT feature.feature_id AS sts_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'STS'::text);


ALTER TABLE so.sts OWNER TO kmr44;

--
-- Name: sts_map; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sts_map AS
 SELECT feature.feature_id AS sts_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'STS_map'::text);


ALTER TABLE so.sts_map OWNER TO kmr44;

--
-- Name: substitution; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.substitution AS
 SELECT feature.feature_id AS substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text) OR ((cvterm.name)::text = 'SNV'::text) OR ((cvterm.name)::text = 'complex_substitution'::text) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text) OR ((cvterm.name)::text = 'transition'::text) OR ((cvterm.name)::text = 'transversion'::text) OR ((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text) OR ((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'substitution'::text));


ALTER TABLE so.substitution OWNER TO kmr44;

--
-- Name: sugar_edge_base_pair; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.sugar_edge_base_pair AS
 SELECT feature.feature_id AS sugar_edge_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sugar_edge_base_pair'::text);


ALTER TABLE so.sugar_edge_base_pair OWNER TO kmr44;

--
-- Name: supercontig; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.supercontig AS
 SELECT feature.feature_id AS supercontig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supercontig'::text);


ALTER TABLE so.supercontig OWNER TO kmr44;

--
-- Name: supported_by_domain_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.supported_by_domain_match AS
 SELECT feature.feature_id AS supported_by_domain_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supported_by_domain_match'::text);


ALTER TABLE so.supported_by_domain_match OWNER TO kmr44;

--
-- Name: supported_by_est_or_cdna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.supported_by_est_or_cdna AS
 SELECT feature.feature_id AS supported_by_est_or_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text);


ALTER TABLE so.supported_by_est_or_cdna OWNER TO kmr44;

--
-- Name: supported_by_sequence_similarity; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.supported_by_sequence_similarity AS
 SELECT feature.feature_id AS supported_by_sequence_similarity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'supported_by_domain_match'::text) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text));


ALTER TABLE so.supported_by_sequence_similarity OWNER TO kmr44;

--
-- Name: symbiosis_island; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.symbiosis_island AS
 SELECT feature.feature_id AS symbiosis_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'symbiosis_island'::text);


ALTER TABLE so.symbiosis_island OWNER TO kmr44;

--
-- Name: symmetric_rna_internal_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.symmetric_rna_internal_loop AS
 SELECT feature.feature_id AS symmetric_rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text);


ALTER TABLE so.symmetric_rna_internal_loop OWNER TO kmr44;

--
-- Name: synonymous_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.synonymous_codon AS
 SELECT feature.feature_id AS synonymous_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'synonymous_codon'::text);


ALTER TABLE so.synonymous_codon OWNER TO kmr44;

--
-- Name: syntenic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.syntenic AS
 SELECT feature.feature_id AS syntenic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'syntenic'::text);


ALTER TABLE so.syntenic OWNER TO kmr44;

--
-- Name: syntenic_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.syntenic_region AS
 SELECT feature.feature_id AS syntenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'syntenic_region'::text);


ALTER TABLE so.syntenic_region OWNER TO kmr44;

--
-- Name: synthetic_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.synthetic_oligo AS
 SELECT feature.feature_id AS synthetic_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text) OR ((cvterm.name)::text = 'LNA_oligo'::text) OR ((cvterm.name)::text = 'TNA_oligo'::text) OR ((cvterm.name)::text = 'GNA_oligo'::text) OR ((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text) OR ((cvterm.name)::text = 'synthetic_oligo'::text));


ALTER TABLE so.synthetic_oligo OWNER TO kmr44;

--
-- Name: synthetic_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.synthetic_sequence AS
 SELECT feature.feature_id AS synthetic_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'random_sequence'::text) OR ((cvterm.name)::text = 'designed_sequence'::text) OR ((cvterm.name)::text = 'synthetic_sequence'::text));


ALTER TABLE so.synthetic_sequence OWNER TO kmr44;

--
-- Name: t3_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.t3_rna_polymerase_promoter AS
 SELECT feature.feature_id AS t3_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text);


ALTER TABLE so.t3_rna_polymerase_promoter OWNER TO kmr44;

--
-- Name: t7_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.t7_rna_polymerase_promoter AS
 SELECT feature.feature_id AS t7_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text);


ALTER TABLE so.t7_rna_polymerase_promoter OWNER TO kmr44;

--
-- Name: t_loop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.t_loop AS
 SELECT feature.feature_id AS t_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_loop'::text);


ALTER TABLE so.t_loop OWNER TO kmr44;

--
-- Name: t_to_a_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.t_to_a_transversion AS
 SELECT feature.feature_id AS t_to_a_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_A_transversion'::text);


ALTER TABLE so.t_to_a_transversion OWNER TO kmr44;

--
-- Name: t_to_c_transition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.t_to_c_transition AS
 SELECT feature.feature_id AS t_to_c_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_C_transition'::text);


ALTER TABLE so.t_to_c_transition OWNER TO kmr44;

--
-- Name: t_to_g_transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.t_to_g_transversion AS
 SELECT feature.feature_id AS t_to_g_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_G_transversion'::text);


ALTER TABLE so.t_to_g_transversion OWNER TO kmr44;

--
-- Name: tag; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tag AS
 SELECT feature.feature_id AS tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text) OR ((cvterm.name)::text = 'EST'::text) OR ((cvterm.name)::text = 'engineered_tag'::text) OR ((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text) OR ((cvterm.name)::text = 'UST'::text) OR ((cvterm.name)::text = 'RST'::text) OR ((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text) OR ((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text) OR ((cvterm.name)::text = 'tag'::text));


ALTER TABLE so.tag OWNER TO kmr44;

--
-- Name: tandem; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tandem AS
 SELECT feature.feature_id AS tandem_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tandem'::text);


ALTER TABLE so.tandem OWNER TO kmr44;

--
-- Name: tandem_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tandem_duplication AS
 SELECT feature.feature_id AS tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text) OR ((cvterm.name)::text = 'tandem_duplication'::text));


ALTER TABLE so.tandem_duplication OWNER TO kmr44;

--
-- Name: tandem_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tandem_repeat AS
 SELECT feature.feature_id AS tandem_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'satellite_DNA'::text) OR ((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'tandem_repeat'::text));


ALTER TABLE so.tandem_repeat OWNER TO kmr44;

--
-- Name: target_site_duplication; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.target_site_duplication AS
 SELECT feature.feature_id AS target_site_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'target_site_duplication'::text);


ALTER TABLE so.target_site_duplication OWNER TO kmr44;

--
-- Name: targeting_vector; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.targeting_vector AS
 SELECT feature.feature_id AS targeting_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'targeting_vector'::text);


ALTER TABLE so.targeting_vector OWNER TO kmr44;

--
-- Name: tasirna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tasirna AS
 SELECT feature.feature_id AS tasirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tasiRNA'::text);


ALTER TABLE so.tasirna OWNER TO kmr44;

--
-- Name: tasirna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tasirna_primary_transcript AS
 SELECT feature.feature_id AS tasirna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text);


ALTER TABLE so.tasirna_primary_transcript OWNER TO kmr44;

--
-- Name: tata_box; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tata_box AS
 SELECT feature.feature_id AS tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text) OR ((cvterm.name)::text = 'TATA_box'::text));


ALTER TABLE so.tata_box OWNER TO kmr44;

--
-- Name: telomerase_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.telomerase_rna AS
 SELECT feature.feature_id AS telomerase_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomerase_RNA'::text);


ALTER TABLE so.telomerase_rna OWNER TO kmr44;

--
-- Name: telomerase_rna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.telomerase_rna_gene AS
 SELECT feature.feature_id AS telomerase_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomerase_RNA_gene'::text);


ALTER TABLE so.telomerase_rna_gene OWNER TO kmr44;

--
-- Name: telomere; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.telomere AS
 SELECT feature.feature_id AS telomere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomere'::text);


ALTER TABLE so.telomere OWNER TO kmr44;

--
-- Name: telomeric_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.telomeric_repeat AS
 SELECT feature.feature_id AS telomeric_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomeric_repeat'::text);


ALTER TABLE so.telomeric_repeat OWNER TO kmr44;

--
-- Name: template_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.template_region AS
 SELECT feature.feature_id AS template_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'template_region'::text);


ALTER TABLE so.template_region OWNER TO kmr44;

--
-- Name: terminal_codon_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.terminal_codon_variant AS
 SELECT feature.feature_id AS terminal_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'terminal_codon_variant'::text));


ALTER TABLE so.terminal_codon_variant OWNER TO kmr44;

--
-- Name: terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.terminal_inverted_repeat AS
 SELECT feature.feature_id AS terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text));


ALTER TABLE so.terminal_inverted_repeat OWNER TO kmr44;

--
-- Name: terminal_inverted_repeat_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.terminal_inverted_repeat_element AS
 SELECT feature.feature_id AS terminal_inverted_repeat_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text) OR ((cvterm.name)::text = 'polinton'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text));


ALTER TABLE so.terminal_inverted_repeat_element OWNER TO kmr44;

--
-- Name: terminator; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.terminator AS
 SELECT feature.feature_id AS terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'terminator'::text));


ALTER TABLE so.terminator OWNER TO kmr44;

--
-- Name: terminator_codon_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.terminator_codon_variant AS
 SELECT feature.feature_id AS terminator_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'terminator_codon_variant'::text));


ALTER TABLE so.terminator_codon_variant OWNER TO kmr44;

--
-- Name: terminator_of_type_2_rnapol_iii_promoter; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.terminator_of_type_2_rnapol_iii_promoter AS
 SELECT feature.feature_id AS terminator_of_type_2_rnapol_iii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text);


ALTER TABLE so.terminator_of_type_2_rnapol_iii_promoter OWNER TO kmr44;

--
-- Name: tetraloop; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tetraloop AS
 SELECT feature.feature_id AS tetraloop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tetraloop'::text);


ALTER TABLE so.tetraloop OWNER TO kmr44;

--
-- Name: tetranuc_repeat_microsat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tetranuc_repeat_microsat AS
 SELECT feature.feature_id AS tetranuc_repeat_microsat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text);


ALTER TABLE so.tetranuc_repeat_microsat OWNER TO kmr44;

--
-- Name: tf_binding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tf_binding_site AS
 SELECT feature.feature_id AS tf_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TF_binding_site'::text);


ALTER TABLE so.tf_binding_site OWNER TO kmr44;

--
-- Name: tf_binding_site_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tf_binding_site_variant AS
 SELECT feature.feature_id AS tf_binding_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TF_binding_site_variant'::text);


ALTER TABLE so.tf_binding_site_variant OWNER TO kmr44;

--
-- Name: thr_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.thr_trna_primary_transcript AS
 SELECT feature.feature_id AS thr_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text);


ALTER TABLE so.thr_trna_primary_transcript OWNER TO kmr44;

--
-- Name: three_methylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_methylcytidine AS
 SELECT feature.feature_id AS three_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methylcytidine'::text);


ALTER TABLE so.three_methylcytidine OWNER TO kmr44;

--
-- Name: three_methylpseudouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_methylpseudouridine AS
 SELECT feature.feature_id AS three_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methylpseudouridine'::text);


ALTER TABLE so.three_methylpseudouridine OWNER TO kmr44;

--
-- Name: three_methyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_methyluridine AS
 SELECT feature.feature_id AS three_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methyluridine'::text);


ALTER TABLE so.three_methyluridine OWNER TO kmr44;

--
-- Name: three_prime_cis_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_cis_splice_site AS
 SELECT feature.feature_id AS three_prime_cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text));


ALTER TABLE so.three_prime_cis_splice_site OWNER TO kmr44;

--
-- Name: three_prime_clip; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_clip AS
 SELECT feature.feature_id AS three_prime_clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_clip'::text);


ALTER TABLE so.three_prime_clip OWNER TO kmr44;

--
-- Name: three_prime_coding_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_coding_exon AS
 SELECT feature.feature_id AS three_prime_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon'::text);


ALTER TABLE so.three_prime_coding_exon OWNER TO kmr44;

--
-- Name: three_prime_coding_exon_coding_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_coding_exon_coding_region AS
 SELECT feature.feature_id AS three_prime_coding_exon_coding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text);


ALTER TABLE so.three_prime_coding_exon_coding_region OWNER TO kmr44;

--
-- Name: three_prime_coding_exon_noncoding_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_coding_exon_noncoding_region AS
 SELECT feature.feature_id AS three_prime_coding_exon_noncoding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text);


ALTER TABLE so.three_prime_coding_exon_noncoding_region OWNER TO kmr44;

--
-- Name: three_prime_d_heptamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_d_heptamer AS
 SELECT feature.feature_id AS three_prime_d_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_heptamer'::text);


ALTER TABLE so.three_prime_d_heptamer OWNER TO kmr44;

--
-- Name: three_prime_d_nonamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_d_nonamer AS
 SELECT feature.feature_id AS three_prime_d_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_nonamer'::text);


ALTER TABLE so.three_prime_d_nonamer OWNER TO kmr44;

--
-- Name: three_prime_d_recombination_signal_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_d_recombination_signal_sequence AS
 SELECT feature.feature_id AS three_prime_d_recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text);


ALTER TABLE so.three_prime_d_recombination_signal_sequence OWNER TO kmr44;

--
-- Name: three_prime_d_spacer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_d_spacer AS
 SELECT feature.feature_id AS three_prime_d_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_spacer'::text);


ALTER TABLE so.three_prime_d_spacer OWNER TO kmr44;

--
-- Name: three_prime_est; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_est AS
 SELECT feature.feature_id AS three_prime_est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_EST'::text);


ALTER TABLE so.three_prime_est OWNER TO kmr44;

--
-- Name: three_prime_five_prime_overlap; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_five_prime_overlap AS
 SELECT feature.feature_id AS three_prime_five_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text);


ALTER TABLE so.three_prime_five_prime_overlap OWNER TO kmr44;

--
-- Name: three_prime_flanking_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_flanking_region AS
 SELECT feature.feature_id AS three_prime_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_flanking_region'::text);


ALTER TABLE so.three_prime_flanking_region OWNER TO kmr44;

--
-- Name: three_prime_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_intron AS
 SELECT feature.feature_id AS three_prime_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_intron'::text);


ALTER TABLE so.three_prime_intron OWNER TO kmr44;

--
-- Name: three_prime_ltr; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_ltr AS
 SELECT feature.feature_id AS three_prime_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_LTR'::text);


ALTER TABLE so.three_prime_ltr OWNER TO kmr44;

--
-- Name: three_prime_ltr_component; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_ltr_component AS
 SELECT feature.feature_id AS three_prime_ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text));


ALTER TABLE so.three_prime_ltr_component OWNER TO kmr44;

--
-- Name: three_prime_noncoding_exon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_noncoding_exon AS
 SELECT feature.feature_id AS three_prime_noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_noncoding_exon'::text);


ALTER TABLE so.three_prime_noncoding_exon OWNER TO kmr44;

--
-- Name: three_prime_race_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_race_clone AS
 SELECT feature.feature_id AS three_prime_race_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_RACE_clone'::text);


ALTER TABLE so.three_prime_race_clone OWNER TO kmr44;

--
-- Name: three_prime_recoding_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_recoding_site AS
 SELECT feature.feature_id AS three_prime_recoding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text));


ALTER TABLE so.three_prime_recoding_site OWNER TO kmr44;

--
-- Name: three_prime_repeat_recoding_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_repeat_recoding_signal AS
 SELECT feature.feature_id AS three_prime_repeat_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text);


ALTER TABLE so.three_prime_repeat_recoding_signal OWNER TO kmr44;

--
-- Name: three_prime_restriction_enzyme_junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_restriction_enzyme_junction AS
 SELECT feature.feature_id AS three_prime_restriction_enzyme_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text);


ALTER TABLE so.three_prime_restriction_enzyme_junction OWNER TO kmr44;

--
-- Name: three_prime_rst; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_rst AS
 SELECT feature.feature_id AS three_prime_rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_RST'::text);


ALTER TABLE so.three_prime_rst OWNER TO kmr44;

--
-- Name: three_prime_stem_loop_structure; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_stem_loop_structure AS
 SELECT feature.feature_id AS three_prime_stem_loop_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text);


ALTER TABLE so.three_prime_stem_loop_structure OWNER TO kmr44;

--
-- Name: three_prime_terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_terminal_inverted_repeat AS
 SELECT feature.feature_id AS three_prime_terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text);


ALTER TABLE so.three_prime_terminal_inverted_repeat OWNER TO kmr44;

--
-- Name: three_prime_three_prime_overlap; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_three_prime_overlap AS
 SELECT feature.feature_id AS three_prime_three_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text);


ALTER TABLE so.three_prime_three_prime_overlap OWNER TO kmr44;

--
-- Name: three_prime_ust; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_ust AS
 SELECT feature.feature_id AS three_prime_ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UST'::text);


ALTER TABLE so.three_prime_ust OWNER TO kmr44;

--
-- Name: three_prime_utr; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_utr AS
 SELECT feature.feature_id AS three_prime_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UTR'::text);


ALTER TABLE so.three_prime_utr OWNER TO kmr44;

--
-- Name: three_prime_utr_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_utr_intron AS
 SELECT feature.feature_id AS three_prime_utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UTR_intron'::text);


ALTER TABLE so.three_prime_utr_intron OWNER TO kmr44;

--
-- Name: three_prime_utr_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_prime_utr_variant AS
 SELECT feature.feature_id AS three_prime_utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '3_prime_UTR_variant'::text);


ALTER TABLE so.three_prime_utr_variant OWNER TO kmr44;

--
-- Name: three_ten_helix; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_ten_helix AS
 SELECT feature.feature_id AS three_ten_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_ten_helix'::text);


ALTER TABLE so.three_ten_helix OWNER TO kmr44;

--
-- Name: three_three_amino_three_carboxypropyl_uridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_three_amino_three_carboxypropyl_uridine AS
 SELECT feature.feature_id AS three_three_amino_three_carboxypropyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text);


ALTER TABLE so.three_three_amino_three_carboxypropyl_uridine OWNER TO kmr44;

--
-- Name: three_two_prime_o_dimethyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.three_two_prime_o_dimethyluridine AS
 SELECT feature.feature_id AS three_two_prime_o_dimethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text);


ALTER TABLE so.three_two_prime_o_dimethyluridine OWNER TO kmr44;

--
-- Name: threed_polypeptide_structure_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.threed_polypeptide_structure_variant AS
 SELECT feature.feature_id AS threed_polypeptide_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'complex_3D_structural_variant'::text) OR ((cvterm.name)::text = 'conformational_change_variant'::text) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text));


ALTER TABLE so.threed_polypeptide_structure_variant OWNER TO kmr44;

--
-- Name: threonine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.threonine AS
 SELECT feature.feature_id AS threonine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonine'::text);


ALTER TABLE so.threonine OWNER TO kmr44;

--
-- Name: threonyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.threonyl_trna AS
 SELECT feature.feature_id AS threonyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonyl_tRNA'::text);


ALTER TABLE so.threonyl_trna OWNER TO kmr44;

--
-- Name: tiling_path; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tiling_path AS
 SELECT feature.feature_id AS tiling_path_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tiling_path'::text);


ALTER TABLE so.tiling_path OWNER TO kmr44;

--
-- Name: tiling_path_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tiling_path_clone AS
 SELECT feature.feature_id AS tiling_path_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tiling_path_clone'::text);


ALTER TABLE so.tiling_path_clone OWNER TO kmr44;

--
-- Name: tiling_path_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tiling_path_fragment AS
 SELECT feature.feature_id AS tiling_path_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'tiling_path_fragment'::text));


ALTER TABLE so.tiling_path_fragment OWNER TO kmr44;

--
-- Name: tmrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tmrna AS
 SELECT feature.feature_id AS tmrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA'::text);


ALTER TABLE so.tmrna OWNER TO kmr44;

--
-- Name: tmrna_acceptor_piece; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tmrna_acceptor_piece AS
 SELECT feature.feature_id AS tmrna_acceptor_piece_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text);


ALTER TABLE so.tmrna_acceptor_piece OWNER TO kmr44;

--
-- Name: tmrna_coding_piece; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tmrna_coding_piece AS
 SELECT feature.feature_id AS tmrna_coding_piece_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_coding_piece'::text);


ALTER TABLE so.tmrna_coding_piece OWNER TO kmr44;

--
-- Name: tmrna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tmrna_encoding AS
 SELECT feature.feature_id AS tmrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_encoding'::text);


ALTER TABLE so.tmrna_encoding OWNER TO kmr44;

--
-- Name: tmrna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tmrna_gene AS
 SELECT feature.feature_id AS tmrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_gene'::text);


ALTER TABLE so.tmrna_gene OWNER TO kmr44;

--
-- Name: tmrna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tmrna_primary_transcript AS
 SELECT feature.feature_id AS tmrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_primary_transcript'::text);


ALTER TABLE so.tmrna_primary_transcript OWNER TO kmr44;

--
-- Name: tmrna_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tmrna_region AS
 SELECT feature.feature_id AS tmrna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text));


ALTER TABLE so.tmrna_region OWNER TO kmr44;

--
-- Name: tna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tna AS
 SELECT feature.feature_id AS tna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TNA'::text);


ALTER TABLE so.tna OWNER TO kmr44;

--
-- Name: tna_oligo; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tna_oligo AS
 SELECT feature.feature_id AS tna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TNA_oligo'::text);


ALTER TABLE so.tna_oligo OWNER TO kmr44;

--
-- Name: topologically_defined_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.topologically_defined_region AS
 SELECT feature.feature_id AS topologically_defined_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'flanking_region'::text) OR ((cvterm.name)::text = 'repeat_component'::text) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'LTR_component'::text) OR ((cvterm.name)::text = 'repeat_fragment'::text) OR ((cvterm.name)::text = 'transposon_fragment'::text) OR ((cvterm.name)::text = 'U5_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'topologically_defined_region'::text));


ALTER TABLE so.topologically_defined_region OWNER TO kmr44;

--
-- Name: topology_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.topology_attribute AS
 SELECT feature.feature_id AS topology_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'linear'::text) OR ((cvterm.name)::text = 'circular'::text) OR ((cvterm.name)::text = 'topology_attribute'::text));


ALTER TABLE so.topology_attribute OWNER TO kmr44;

--
-- Name: trans_splice_acceptor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trans_splice_acceptor_site AS
 SELECT feature.feature_id AS trans_splice_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text));


ALTER TABLE so.trans_splice_acceptor_site OWNER TO kmr44;

--
-- Name: trans_splice_donor_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trans_splice_donor_site AS
 SELECT feature.feature_id AS trans_splice_donor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_splice_donor_site'::text);


ALTER TABLE so.trans_splice_donor_site OWNER TO kmr44;

--
-- Name: trans_splice_junction; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trans_splice_junction AS
 SELECT feature.feature_id AS trans_splice_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_splice_junction'::text);


ALTER TABLE so.trans_splice_junction OWNER TO kmr44;

--
-- Name: trans_splice_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trans_splice_site AS
 SELECT feature.feature_id AS trans_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text));


ALTER TABLE so.trans_splice_site OWNER TO kmr44;

--
-- Name: trans_spliced; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trans_spliced AS
 SELECT feature.feature_id AS trans_spliced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_spliced'::text);


ALTER TABLE so.trans_spliced OWNER TO kmr44;

--
-- Name: trans_spliced_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trans_spliced_mrna AS
 SELECT feature.feature_id AS trans_spliced_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_spliced_mRNA'::text);


ALTER TABLE so.trans_spliced_mrna OWNER TO kmr44;

--
-- Name: trans_spliced_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trans_spliced_transcript AS
 SELECT feature.feature_id AS trans_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text));


ALTER TABLE so.trans_spliced_transcript OWNER TO kmr44;

--
-- Name: transcribed_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcribed_cluster AS
 SELECT feature.feature_id AS transcribed_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'unigene_cluster'::text) OR ((cvterm.name)::text = 'transcribed_cluster'::text));


ALTER TABLE so.transcribed_cluster OWNER TO kmr44;

--
-- Name: transcribed_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcribed_fragment AS
 SELECT feature.feature_id AS transcribed_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcribed_fragment'::text);


ALTER TABLE so.transcribed_fragment OWNER TO kmr44;

--
-- Name: transcribed_spacer_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcribed_spacer_region AS
 SELECT feature.feature_id AS transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text));


ALTER TABLE so.transcribed_spacer_region OWNER TO kmr44;

--
-- Name: transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript AS
 SELECT feature.feature_id AS transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polycistronic_transcript'::text) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text) OR ((cvterm.name)::text = 'primary_transcript'::text) OR ((cvterm.name)::text = 'mature_transcript'::text) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_transcript'::text) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text) OR ((cvterm.name)::text = 'edited_transcript'::text) OR ((cvterm.name)::text = 'processed_transcript'::text) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text) OR ((cvterm.name)::text = 'capped_primary_transcript'::text) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'exemplar_mRNA'::text) OR ((cvterm.name)::text = 'capped_mRNA'::text) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'recoded_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text) OR ((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text) OR ((cvterm.name)::text = 'tRNA'::text) OR ((cvterm.name)::text = 'snRNA'::text) OR ((cvterm.name)::text = 'snoRNA'::text) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text) OR ((cvterm.name)::text = 'RNase_P_RNA'::text) OR ((cvterm.name)::text = 'telomerase_RNA'::text) OR ((cvterm.name)::text = 'vault_RNA'::text) OR ((cvterm.name)::text = 'Y_RNA'::text) OR ((cvterm.name)::text = 'rasiRNA'::text) OR ((cvterm.name)::text = 'SRP_RNA'::text) OR ((cvterm.name)::text = 'guide_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text) OR ((cvterm.name)::text = 'siRNA'::text) OR ((cvterm.name)::text = 'stRNA'::text) OR ((cvterm.name)::text = 'class_II_RNA'::text) OR ((cvterm.name)::text = 'class_I_RNA'::text) OR ((cvterm.name)::text = 'piRNA'::text) OR ((cvterm.name)::text = 'lincRNA'::text) OR ((cvterm.name)::text = 'tasiRNA'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text) OR ((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text) OR ((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text) OR ((cvterm.name)::text = 'rRNA_28S'::text) OR ((cvterm.name)::text = 'rRNA_23S'::text) OR ((cvterm.name)::text = 'rRNA_25S'::text) OR ((cvterm.name)::text = 'rRNA_21S'::text) OR ((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text) OR ((cvterm.name)::text = 'glycyl_tRNA'::text) OR ((cvterm.name)::text = 'histidyl_tRNA'::text) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text) OR ((cvterm.name)::text = 'leucyl_tRNA'::text) OR ((cvterm.name)::text = 'lysyl_tRNA'::text) OR ((cvterm.name)::text = 'methionyl_tRNA'::text) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text) OR ((cvterm.name)::text = 'prolyl_tRNA'::text) OR ((cvterm.name)::text = 'seryl_tRNA'::text) OR ((cvterm.name)::text = 'threonyl_tRNA'::text) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text) OR ((cvterm.name)::text = 'valyl_tRNA'::text) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text) OR ((cvterm.name)::text = 'arginyl_tRNA'::text) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text) OR ((cvterm.name)::text = 'U4_snRNA'::text) OR ((cvterm.name)::text = 'U4atac_snRNA'::text) OR ((cvterm.name)::text = 'U5_snRNA'::text) OR ((cvterm.name)::text = 'U6_snRNA'::text) OR ((cvterm.name)::text = 'U6atac_snRNA'::text) OR ((cvterm.name)::text = 'U11_snRNA'::text) OR ((cvterm.name)::text = 'U12_snRNA'::text) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text) OR ((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text) OR ((cvterm.name)::text = 'OxyS_RNA'::text) OR ((cvterm.name)::text = 'RprA_RNA'::text) OR ((cvterm.name)::text = 'RRE_RNA'::text) OR ((cvterm.name)::text = 'spot_42_RNA'::text) OR ((cvterm.name)::text = 'tmRNA'::text) OR ((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text) OR ((cvterm.name)::text = 'transcript'::text));


ALTER TABLE so.transcript OWNER TO kmr44;

--
-- Name: transcript_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_attribute AS
 SELECT feature.feature_id AS transcript_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'edited'::text) OR ((cvterm.name)::text = 'capped'::text) OR ((cvterm.name)::text = 'mRNA_attribute'::text) OR ((cvterm.name)::text = 'trans_spliced'::text) OR ((cvterm.name)::text = 'alternatively_spliced'::text) OR ((cvterm.name)::text = 'monocistronic'::text) OR ((cvterm.name)::text = 'polycistronic'::text) OR ((cvterm.name)::text = 'polyadenylated'::text) OR ((cvterm.name)::text = 'exemplar'::text) OR ((cvterm.name)::text = 'frameshift'::text) OR ((cvterm.name)::text = 'recoded'::text) OR ((cvterm.name)::text = 'minus_1_frameshift'::text) OR ((cvterm.name)::text = 'minus_2_frameshift'::text) OR ((cvterm.name)::text = 'plus_1_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_framshift'::text) OR ((cvterm.name)::text = 'codon_redefined'::text) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'translationally_frameshifted'::text) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'dicistronic'::text) OR ((cvterm.name)::text = 'transcript_attribute'::text));


ALTER TABLE so.transcript_attribute OWNER TO kmr44;

--
-- Name: transcript_bound_by_nucleic_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_bound_by_nucleic_acid AS
 SELECT feature.feature_id AS transcript_bound_by_nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text);


ALTER TABLE so.transcript_bound_by_nucleic_acid OWNER TO kmr44;

--
-- Name: transcript_bound_by_protein; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_bound_by_protein AS
 SELECT feature.feature_id AS transcript_bound_by_protein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_bound_by_protein'::text);


ALTER TABLE so.transcript_bound_by_protein OWNER TO kmr44;

--
-- Name: transcript_function_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_function_variant AS
 SELECT feature.feature_id AS transcript_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'level_of_transcript_variant'::text) OR ((cvterm.name)::text = 'transcript_processing_variant'::text) OR ((cvterm.name)::text = 'transcript_stability_variant'::text) OR ((cvterm.name)::text = 'transcription_variant'::text) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'editing_variant'::text) OR ((cvterm.name)::text = 'polyadenylation_variant'::text) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'transcript_function_variant'::text));


ALTER TABLE so.transcript_function_variant OWNER TO kmr44;

--
-- Name: transcript_processing_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_processing_variant AS
 SELECT feature.feature_id AS transcript_processing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'editing_variant'::text) OR ((cvterm.name)::text = 'polyadenylation_variant'::text) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'transcript_processing_variant'::text));


ALTER TABLE so.transcript_processing_variant OWNER TO kmr44;

--
-- Name: transcript_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_region AS
 SELECT feature.feature_id AS transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'exon'::text) OR ((cvterm.name)::text = 'edited_transcript_feature'::text) OR ((cvterm.name)::text = 'mature_transcript_region'::text) OR ((cvterm.name)::text = 'primary_transcript_region'::text) OR ((cvterm.name)::text = 'exon_region'::text) OR ((cvterm.name)::text = 'anchor_binding_site'::text) OR ((cvterm.name)::text = 'coding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text) OR ((cvterm.name)::text = 'interior_exon'::text) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text) OR ((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'pre_edited_region'::text) OR ((cvterm.name)::text = 'editing_block'::text) OR ((cvterm.name)::text = 'editing_domain'::text) OR ((cvterm.name)::text = 'unedited_region'::text) OR ((cvterm.name)::text = 'mRNA_region'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text) OR ((cvterm.name)::text = 'guide_RNA_region'::text) OR ((cvterm.name)::text = 'tRNA_region'::text) OR ((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text) OR ((cvterm.name)::text = 'UTR'::text) OR ((cvterm.name)::text = 'CDS'::text) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text) OR ((cvterm.name)::text = 'UTR_region'::text) OR ((cvterm.name)::text = 'CDS_region'::text) OR ((cvterm.name)::text = 'translational_frameshift'::text) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'kozak_sequence'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text) OR ((cvterm.name)::text = 'internal_UTR'::text) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text) OR ((cvterm.name)::text = 'CDS_independently_known'::text) OR ((cvterm.name)::text = 'CDS_predicted'::text) OR ((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text) OR ((cvterm.name)::text = 'Bruno_response_element'::text) OR ((cvterm.name)::text = 'iron_responsive_element'::text) OR ((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text) OR ((cvterm.name)::text = 'codon'::text) OR ((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text) OR ((cvterm.name)::text = 'stop_codon'::text) OR ((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text) OR ((cvterm.name)::text = 'stop_codon_signal'::text) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text) OR ((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text) OR ((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text) OR ((cvterm.name)::text = 'CCA_tail'::text) OR ((cvterm.name)::text = 'DHU_loop'::text) OR ((cvterm.name)::text = 'T_loop'::text) OR ((cvterm.name)::text = 'splice_site'::text) OR ((cvterm.name)::text = 'intron'::text) OR ((cvterm.name)::text = 'clip'::text) OR ((cvterm.name)::text = 'TSS'::text) OR ((cvterm.name)::text = 'transcription_end_site'::text) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text) OR ((cvterm.name)::text = 'intron_domain'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text) OR ((cvterm.name)::text = 'outron'::text) OR ((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text) OR ((cvterm.name)::text = 'cryptic_splice_site'::text) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'recursive_splice_site'::text) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text) OR ((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text) OR ((cvterm.name)::text = 'three_prime_intron'::text) OR ((cvterm.name)::text = 'twintron'::text) OR ((cvterm.name)::text = 'UTR_intron'::text) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text) OR ((cvterm.name)::text = 'spliceosomal_intron'::text) OR ((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text) OR ((cvterm.name)::text = 'group_III_intron'::text) OR ((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text) OR ((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text) OR ((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text) OR ((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text) OR ((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text) OR ((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text) OR ((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text) OR ((cvterm.name)::text = 'miRNA_loop'::text) OR ((cvterm.name)::text = 'miRNA_antiguide'::text) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'transcript_region'::text));


ALTER TABLE so.transcript_region OWNER TO kmr44;

--
-- Name: transcript_secondary_structure_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_secondary_structure_variant AS
 SELECT feature.feature_id AS transcript_secondary_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text));


ALTER TABLE so.transcript_secondary_structure_variant OWNER TO kmr44;

--
-- Name: transcript_stability_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_stability_variant AS
 SELECT feature.feature_id AS transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'decreased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'transcript_stability_variant'::text));


ALTER TABLE so.transcript_stability_variant OWNER TO kmr44;

--
-- Name: transcript_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_variant AS
 SELECT feature.feature_id AS transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'complex_change_in_transcript'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'nc_transcript_variant'::text) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text) OR ((cvterm.name)::text = 'UTR_variant'::text) OR ((cvterm.name)::text = 'intron_variant'::text) OR ((cvterm.name)::text = 'exon_variant'::text) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text) OR ((cvterm.name)::text = 'splice_site_variant'::text) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text) OR ((cvterm.name)::text = 'coding_sequence_variant'::text) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text) OR ((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text) OR ((cvterm.name)::text = 'inframe_variant'::text) OR ((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text) OR ((cvterm.name)::text = 'synonymous_codon'::text) OR ((cvterm.name)::text = 'terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text) OR ((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text) OR ((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text) OR ((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text) OR ((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text) OR ((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text) OR ((cvterm.name)::text = 'transcript_variant'::text));


ALTER TABLE so.transcript_variant OWNER TO kmr44;

--
-- Name: transcript_with_translational_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcript_with_translational_frameshift AS
 SELECT feature.feature_id AS transcript_with_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text);


ALTER TABLE so.transcript_with_translational_frameshift OWNER TO kmr44;

--
-- Name: transcription_end_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcription_end_site AS
 SELECT feature.feature_id AS transcription_end_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcription_end_site'::text);


ALTER TABLE so.transcription_end_site OWNER TO kmr44;

--
-- Name: transcription_regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcription_regulatory_region AS
 SELECT feature.feature_id AS transcription_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text) OR ((cvterm.name)::text = 'CRM'::text) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text) OR ((cvterm.name)::text = 'ISRE'::text) OR ((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text) OR ((cvterm.name)::text = 'silencer'::text) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text));


ALTER TABLE so.transcription_regulatory_region OWNER TO kmr44;

--
-- Name: transcription_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcription_variant AS
 SELECT feature.feature_id AS transcription_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'rate_of_transcription_variant'::text) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'transcription_variant'::text));


ALTER TABLE so.transcription_variant OWNER TO kmr44;

--
-- Name: transcriptional_cis_regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcriptional_cis_regulatory_region AS
 SELECT feature.feature_id AS transcriptional_cis_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text) OR ((cvterm.name)::text = 'CRM'::text) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text) OR ((cvterm.name)::text = 'ISRE'::text) OR ((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text) OR ((cvterm.name)::text = 'silencer'::text) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text));


ALTER TABLE so.transcriptional_cis_regulatory_region OWNER TO kmr44;

--
-- Name: transcriptionally_constitutive; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcriptionally_constitutive AS
 SELECT feature.feature_id AS transcriptionally_constitutive_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcriptionally_constitutive'::text);


ALTER TABLE so.transcriptionally_constitutive OWNER TO kmr44;

--
-- Name: transcriptionally_induced; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcriptionally_induced AS
 SELECT feature.feature_id AS transcriptionally_induced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text));


ALTER TABLE so.transcriptionally_induced OWNER TO kmr44;

--
-- Name: transcriptionally_regulated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcriptionally_regulated AS
 SELECT feature.feature_id AS transcriptionally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transcriptionally_constitutive'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text) OR ((cvterm.name)::text = 'autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text));


ALTER TABLE so.transcriptionally_regulated OWNER TO kmr44;

--
-- Name: transcriptionally_repressed; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transcriptionally_repressed AS
 SELECT feature.feature_id AS transcriptionally_repressed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text));


ALTER TABLE so.transcriptionally_repressed OWNER TO kmr44;

--
-- Name: transgene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transgene AS
 SELECT feature.feature_id AS transgene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'floxed_gene'::text) OR ((cvterm.name)::text = 'transgene'::text));


ALTER TABLE so.transgene OWNER TO kmr44;

--
-- Name: transgenic; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transgenic AS
 SELECT feature.feature_id AS transgenic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic'::text);


ALTER TABLE so.transgenic OWNER TO kmr44;

--
-- Name: transgenic_insertion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transgenic_insertion AS
 SELECT feature.feature_id AS transgenic_insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic_insertion'::text);


ALTER TABLE so.transgenic_insertion OWNER TO kmr44;

--
-- Name: transgenic_transposable_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transgenic_transposable_element AS
 SELECT feature.feature_id AS transgenic_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic_transposable_element'::text);


ALTER TABLE so.transgenic_transposable_element OWNER TO kmr44;

--
-- Name: transit_peptide; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transit_peptide AS
 SELECT feature.feature_id AS transit_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transit_peptide'::text);


ALTER TABLE so.transit_peptide OWNER TO kmr44;

--
-- Name: transition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transition AS
 SELECT feature.feature_id AS transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text) OR ((cvterm.name)::text = 'transition'::text));


ALTER TABLE so.transition OWNER TO kmr44;

--
-- Name: translated_nucleotide_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translated_nucleotide_match AS
 SELECT feature.feature_id AS translated_nucleotide_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translated_nucleotide_match'::text);


ALTER TABLE so.translated_nucleotide_match OWNER TO kmr44;

--
-- Name: translation_regulatory_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translation_regulatory_region AS
 SELECT feature.feature_id AS translation_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text));


ALTER TABLE so.translation_regulatory_region OWNER TO kmr44;

--
-- Name: translational_frameshift; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translational_frameshift AS
 SELECT feature.feature_id AS translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text) OR ((cvterm.name)::text = 'translational_frameshift'::text));


ALTER TABLE so.translational_frameshift OWNER TO kmr44;

--
-- Name: translational_product_function_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translational_product_function_variant AS
 SELECT feature.feature_id AS translational_product_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'translational_product_level_variant'::text) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text) OR ((cvterm.name)::text = 'increased_translational_product_level'::text) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'translational_product_function_variant'::text));


ALTER TABLE so.translational_product_function_variant OWNER TO kmr44;

--
-- Name: translational_product_level_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translational_product_level_variant AS
 SELECT feature.feature_id AS translational_product_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'decreased_translational_product_level'::text) OR ((cvterm.name)::text = 'increased_translational_product_level'::text) OR ((cvterm.name)::text = 'translational_product_level_variant'::text));


ALTER TABLE so.translational_product_level_variant OWNER TO kmr44;

--
-- Name: translational_product_structure_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translational_product_structure_variant AS
 SELECT feature.feature_id AS translational_product_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '3D_polypeptide_structure_variant'::text) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text) OR ((cvterm.name)::text = 'conformational_change_variant'::text) OR ((cvterm.name)::text = 'amino_acid_deletion'::text) OR ((cvterm.name)::text = 'amino_acid_insertion'::text) OR ((cvterm.name)::text = 'amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide'::text) OR ((cvterm.name)::text = 'polypeptide_fusion'::text) OR ((cvterm.name)::text = 'polypeptide_truncation'::text) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text));


ALTER TABLE so.translational_product_structure_variant OWNER TO kmr44;

--
-- Name: translationally_frameshifted; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translationally_frameshifted AS
 SELECT feature.feature_id AS translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'translationally_frameshifted'::text));


ALTER TABLE so.translationally_frameshifted OWNER TO kmr44;

--
-- Name: translationally_regulated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translationally_regulated AS
 SELECT feature.feature_id AS translationally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translationally_regulated'::text);


ALTER TABLE so.translationally_regulated OWNER TO kmr44;

--
-- Name: translationally_regulated_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translationally_regulated_gene AS
 SELECT feature.feature_id AS translationally_regulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translationally_regulated_gene'::text);


ALTER TABLE so.translationally_regulated_gene OWNER TO kmr44;

--
-- Name: translocation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translocation AS
 SELECT feature.feature_id AS translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation'::text);


ALTER TABLE so.translocation OWNER TO kmr44;

--
-- Name: translocation_breakpoint; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translocation_breakpoint AS
 SELECT feature.feature_id AS translocation_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation_breakpoint'::text);


ALTER TABLE so.translocation_breakpoint OWNER TO kmr44;

--
-- Name: translocation_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translocation_element AS
 SELECT feature.feature_id AS translocation_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation_element'::text);


ALTER TABLE so.translocation_element OWNER TO kmr44;

--
-- Name: translocaton_attribute; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.translocaton_attribute AS
 SELECT feature.feature_id AS translocaton_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'reciprocal'::text) OR ((cvterm.name)::text = 'insertional'::text) OR ((cvterm.name)::text = 'translocaton_attribute'::text));


ALTER TABLE so.translocaton_attribute OWNER TO kmr44;

--
-- Name: transmembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transmembrane_polypeptide_region AS
 SELECT feature.feature_id AS transmembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text);


ALTER TABLE so.transmembrane_polypeptide_region OWNER TO kmr44;

--
-- Name: transposable_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transposable_element AS
 SELECT feature.feature_id AS transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text) OR ((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text) OR ((cvterm.name)::text = 'nested_transposon'::text) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text) OR ((cvterm.name)::text = 'conjugative_transposon'::text) OR ((cvterm.name)::text = 'helitron'::text) OR ((cvterm.name)::text = 'p_element'::text) OR ((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text) OR ((cvterm.name)::text = 'polinton'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'transposable_element'::text));


ALTER TABLE so.transposable_element OWNER TO kmr44;

--
-- Name: transposable_element_flanking_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transposable_element_flanking_region AS
 SELECT feature.feature_id AS transposable_element_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposable_element_flanking_region'::text);


ALTER TABLE so.transposable_element_flanking_region OWNER TO kmr44;

--
-- Name: transposable_element_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transposable_element_gene AS
 SELECT feature.feature_id AS transposable_element_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'transposable_element_gene'::text));


ALTER TABLE so.transposable_element_gene OWNER TO kmr44;

--
-- Name: transposable_element_insertion_site; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transposable_element_insertion_site AS
 SELECT feature.feature_id AS transposable_element_insertion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposable_element_insertion_site'::text);


ALTER TABLE so.transposable_element_insertion_site OWNER TO kmr44;

--
-- Name: transposon_fragment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transposon_fragment AS
 SELECT feature.feature_id AS transposon_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposon_fragment'::text);


ALTER TABLE so.transposon_fragment OWNER TO kmr44;

--
-- Name: transversion; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.transversion AS
 SELECT feature.feature_id AS transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text) OR ((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text) OR ((cvterm.name)::text = 'T_to_A_transversion'::text) OR ((cvterm.name)::text = 'T_to_G_transversion'::text) OR ((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text) OR ((cvterm.name)::text = 'G_to_C_transversion'::text) OR ((cvterm.name)::text = 'G_to_T_transversion'::text) OR ((cvterm.name)::text = 'transversion'::text));


ALTER TABLE so.transversion OWNER TO kmr44;

--
-- Name: trinuc_repeat_microsat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trinuc_repeat_microsat AS
 SELECT feature.feature_id AS trinuc_repeat_microsat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text);


ALTER TABLE so.trinuc_repeat_microsat OWNER TO kmr44;

--
-- Name: trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trna AS
 SELECT feature.feature_id AS trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text) OR ((cvterm.name)::text = 'glycyl_tRNA'::text) OR ((cvterm.name)::text = 'histidyl_tRNA'::text) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text) OR ((cvterm.name)::text = 'leucyl_tRNA'::text) OR ((cvterm.name)::text = 'lysyl_tRNA'::text) OR ((cvterm.name)::text = 'methionyl_tRNA'::text) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text) OR ((cvterm.name)::text = 'prolyl_tRNA'::text) OR ((cvterm.name)::text = 'seryl_tRNA'::text) OR ((cvterm.name)::text = 'threonyl_tRNA'::text) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text) OR ((cvterm.name)::text = 'valyl_tRNA'::text) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text) OR ((cvterm.name)::text = 'arginyl_tRNA'::text) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text) OR ((cvterm.name)::text = 'tRNA'::text));


ALTER TABLE so.trna OWNER TO kmr44;

--
-- Name: trna_encoding; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trna_encoding AS
 SELECT feature.feature_id AS trna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_encoding'::text);


ALTER TABLE so.trna_encoding OWNER TO kmr44;

--
-- Name: trna_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trna_gene AS
 SELECT feature.feature_id AS trna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_gene'::text);


ALTER TABLE so.trna_gene OWNER TO kmr44;

--
-- Name: trna_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trna_intron AS
 SELECT feature.feature_id AS trna_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_intron'::text);


ALTER TABLE so.trna_intron OWNER TO kmr44;

--
-- Name: trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trna_primary_transcript AS
 SELECT feature.feature_id AS trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text));


ALTER TABLE so.trna_primary_transcript OWNER TO kmr44;

--
-- Name: trna_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.trna_region AS
 SELECT feature.feature_id AS trna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text) OR ((cvterm.name)::text = 'CCA_tail'::text) OR ((cvterm.name)::text = 'DHU_loop'::text) OR ((cvterm.name)::text = 'T_loop'::text) OR ((cvterm.name)::text = 'tRNA_region'::text));


ALTER TABLE so.trna_region OWNER TO kmr44;

--
-- Name: try_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.try_trna_primary_transcript AS
 SELECT feature.feature_id AS try_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text);


ALTER TABLE so.try_trna_primary_transcript OWNER TO kmr44;

--
-- Name: tryptophan; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tryptophan AS
 SELECT feature.feature_id AS tryptophan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophan'::text);


ALTER TABLE so.tryptophan OWNER TO kmr44;

--
-- Name: tryptophanyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tryptophanyl_trna AS
 SELECT feature.feature_id AS tryptophanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophanyl_tRNA'::text);


ALTER TABLE so.tryptophanyl_trna OWNER TO kmr44;

--
-- Name: tss; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tss AS
 SELECT feature.feature_id AS tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text) OR ((cvterm.name)::text = 'TSS'::text));


ALTER TABLE so.tss OWNER TO kmr44;

--
-- Name: tss_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tss_region AS
 SELECT feature.feature_id AS tss_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TSS_region'::text);


ALTER TABLE so.tss_region OWNER TO kmr44;

--
-- Name: twintron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.twintron AS
 SELECT feature.feature_id AS twintron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'twintron'::text);


ALTER TABLE so.twintron OWNER TO kmr44;

--
-- Name: two_methyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_methyladenosine AS
 SELECT feature.feature_id AS two_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methyladenosine'::text);


ALTER TABLE so.two_methyladenosine OWNER TO kmr44;

--
-- Name: two_methylthio_n6_cis_hydroxyisopentenyl_adenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_methylthio_n6_cis_hydroxyisopentenyl_adenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_cis_hydroxyisopentenyl_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text);


ALTER TABLE so.two_methylthio_n6_cis_hydroxyisopentenyl_adenosine OWNER TO kmr44;

--
-- Name: two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text);


ALTER TABLE so.two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine OWNER TO kmr44;

--
-- Name: two_methylthio_n6_isopentenyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_methylthio_n6_isopentenyladenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_isopentenyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text);


ALTER TABLE so.two_methylthio_n6_isopentenyladenosine OWNER TO kmr44;

--
-- Name: two_methylthio_n6_methyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_methylthio_n6_methyladenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text);


ALTER TABLE so.two_methylthio_n6_methyladenosine OWNER TO kmr44;

--
-- Name: two_methylthio_n6_threonyl_carbamoyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_methylthio_n6_threonyl_carbamoyladenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_threonyl_carbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text);


ALTER TABLE so.two_methylthio_n6_threonyl_carbamoyladenosine OWNER TO kmr44;

--
-- Name: two_prime_o_methyladenosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_prime_o_methyladenosine AS
 SELECT feature.feature_id AS two_prime_o_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text);


ALTER TABLE so.two_prime_o_methyladenosine OWNER TO kmr44;

--
-- Name: two_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_prime_o_methylcytidine AS
 SELECT feature.feature_id AS two_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text);


ALTER TABLE so.two_prime_o_methylcytidine OWNER TO kmr44;

--
-- Name: two_prime_o_methylguanosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_prime_o_methylguanosine AS
 SELECT feature.feature_id AS two_prime_o_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text);


ALTER TABLE so.two_prime_o_methylguanosine OWNER TO kmr44;

--
-- Name: two_prime_o_methylinosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_prime_o_methylinosine AS
 SELECT feature.feature_id AS two_prime_o_methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylinosine'::text);


ALTER TABLE so.two_prime_o_methylinosine OWNER TO kmr44;

--
-- Name: two_prime_o_methylpseudouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_prime_o_methylpseudouridine AS
 SELECT feature.feature_id AS two_prime_o_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text);


ALTER TABLE so.two_prime_o_methylpseudouridine OWNER TO kmr44;

--
-- Name: two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_prime_o_methyluridine AS
 SELECT feature.feature_id AS two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methyluridine'::text);


ALTER TABLE so.two_prime_o_methyluridine OWNER TO kmr44;

--
-- Name: two_prime_o_riboa_phosphate; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_prime_o_riboa_phosphate AS
 SELECT feature.feature_id AS two_prime_o_riboa_phosphate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text);


ALTER TABLE so.two_prime_o_riboa_phosphate OWNER TO kmr44;

--
-- Name: two_prime_o_ribosylguanosine_phosphate; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_prime_o_ribosylguanosine_phosphate AS
 SELECT feature.feature_id AS two_prime_o_ribosylguanosine_phosphate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text);


ALTER TABLE so.two_prime_o_ribosylguanosine_phosphate OWNER TO kmr44;

--
-- Name: two_thio_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_thio_two_prime_o_methyluridine AS
 SELECT feature.feature_id AS two_thio_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text);


ALTER TABLE so.two_thio_two_prime_o_methyluridine OWNER TO kmr44;

--
-- Name: two_thiocytidine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_thiocytidine AS
 SELECT feature.feature_id AS two_thiocytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thiocytidine'::text);


ALTER TABLE so.two_thiocytidine OWNER TO kmr44;

--
-- Name: two_thiouridine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.two_thiouridine AS
 SELECT feature.feature_id AS two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thiouridine'::text);


ALTER TABLE so.two_thiouridine OWNER TO kmr44;

--
-- Name: twokb_upstream_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.twokb_upstream_variant AS
 SELECT feature.feature_id AS twokb_upstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '2KB_upstream_variant'::text);


ALTER TABLE so.twokb_upstream_variant OWNER TO kmr44;

--
-- Name: tyrosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tyrosine AS
 SELECT feature.feature_id AS tyrosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosine'::text);


ALTER TABLE so.tyrosine OWNER TO kmr44;

--
-- Name: tyrosine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tyrosine_trna_primary_transcript AS
 SELECT feature.feature_id AS tyrosine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text);


ALTER TABLE so.tyrosine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: tyrosyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.tyrosyl_trna AS
 SELECT feature.feature_id AS tyrosyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosyl_tRNA'::text);


ALTER TABLE so.tyrosyl_trna OWNER TO kmr44;

--
-- Name: u11_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u11_snrna AS
 SELECT feature.feature_id AS u11_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U11_snRNA'::text);


ALTER TABLE so.u11_snrna OWNER TO kmr44;

--
-- Name: u12_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u12_intron AS
 SELECT feature.feature_id AS u12_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U12_intron'::text);


ALTER TABLE so.u12_intron OWNER TO kmr44;

--
-- Name: u12_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u12_snrna AS
 SELECT feature.feature_id AS u12_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U12_snRNA'::text);


ALTER TABLE so.u12_snrna OWNER TO kmr44;

--
-- Name: u14_snorna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u14_snorna AS
 SELECT feature.feature_id AS u14_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U14_snoRNA'::text);


ALTER TABLE so.u14_snorna OWNER TO kmr44;

--
-- Name: u14_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u14_snorna_primary_transcript AS
 SELECT feature.feature_id AS u14_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text);


ALTER TABLE so.u14_snorna_primary_transcript OWNER TO kmr44;

--
-- Name: u1_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u1_snrna AS
 SELECT feature.feature_id AS u1_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U1_snRNA'::text);


ALTER TABLE so.u1_snrna OWNER TO kmr44;

--
-- Name: u2_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u2_intron AS
 SELECT feature.feature_id AS u2_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U2_intron'::text);


ALTER TABLE so.u2_intron OWNER TO kmr44;

--
-- Name: u2_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u2_snrna AS
 SELECT feature.feature_id AS u2_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U2_snRNA'::text);


ALTER TABLE so.u2_snrna OWNER TO kmr44;

--
-- Name: u3_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u3_five_prime_ltr_region AS
 SELECT feature.feature_id AS u3_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text);


ALTER TABLE so.u3_five_prime_ltr_region OWNER TO kmr44;

--
-- Name: u3_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u3_ltr_region AS
 SELECT feature.feature_id AS u3_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text));


ALTER TABLE so.u3_ltr_region OWNER TO kmr44;

--
-- Name: u3_snorna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u3_snorna AS
 SELECT feature.feature_id AS u3_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_snoRNA'::text);


ALTER TABLE so.u3_snorna OWNER TO kmr44;

--
-- Name: u3_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u3_three_prime_ltr_region AS
 SELECT feature.feature_id AS u3_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text);


ALTER TABLE so.u3_three_prime_ltr_region OWNER TO kmr44;

--
-- Name: u4_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u4_snrna AS
 SELECT feature.feature_id AS u4_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U4_snRNA'::text);


ALTER TABLE so.u4_snrna OWNER TO kmr44;

--
-- Name: u4atac_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u4atac_snrna AS
 SELECT feature.feature_id AS u4atac_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U4atac_snRNA'::text);


ALTER TABLE so.u4atac_snrna OWNER TO kmr44;

--
-- Name: u5_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u5_five_prime_ltr_region AS
 SELECT feature.feature_id AS u5_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text);


ALTER TABLE so.u5_five_prime_ltr_region OWNER TO kmr44;

--
-- Name: u5_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u5_ltr_region AS
 SELECT feature.feature_id AS u5_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_LTR_region'::text));


ALTER TABLE so.u5_ltr_region OWNER TO kmr44;

--
-- Name: u5_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u5_snrna AS
 SELECT feature.feature_id AS u5_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_snRNA'::text);


ALTER TABLE so.u5_snrna OWNER TO kmr44;

--
-- Name: u5_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u5_three_prime_ltr_region AS
 SELECT feature.feature_id AS u5_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text);


ALTER TABLE so.u5_three_prime_ltr_region OWNER TO kmr44;

--
-- Name: u6_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u6_snrna AS
 SELECT feature.feature_id AS u6_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U6_snRNA'::text);


ALTER TABLE so.u6_snrna OWNER TO kmr44;

--
-- Name: u6atac_snrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u6atac_snrna AS
 SELECT feature.feature_id AS u6atac_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U6atac_snRNA'::text);


ALTER TABLE so.u6atac_snrna OWNER TO kmr44;

--
-- Name: u_box; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.u_box AS
 SELECT feature.feature_id AS u_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U_box'::text);


ALTER TABLE so.u_box OWNER TO kmr44;

--
-- Name: uaa_stop_codon_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uaa_stop_codon_signal AS
 SELECT feature.feature_id AS uaa_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UAA_stop_codon_signal'::text);


ALTER TABLE so.uaa_stop_codon_signal OWNER TO kmr44;

--
-- Name: uag_stop_codon_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uag_stop_codon_signal AS
 SELECT feature.feature_id AS uag_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UAG_stop_codon_signal'::text);


ALTER TABLE so.uag_stop_codon_signal OWNER TO kmr44;

--
-- Name: uga_stop_codon_signal; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uga_stop_codon_signal AS
 SELECT feature.feature_id AS uga_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UGA_stop_codon_signal'::text);


ALTER TABLE so.uga_stop_codon_signal OWNER TO kmr44;

--
-- Name: ultracontig; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ultracontig AS
 SELECT feature.feature_id AS ultracontig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ultracontig'::text);


ALTER TABLE so.ultracontig OWNER TO kmr44;

--
-- Name: uncharacterised_chromosomal_mutation; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uncharacterised_chromosomal_mutation AS
 SELECT feature.feature_id AS uncharacterised_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text));


ALTER TABLE so.uncharacterised_chromosomal_mutation OWNER TO kmr44;

--
-- Name: undermodified_hydroxywybutosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.undermodified_hydroxywybutosine AS
 SELECT feature.feature_id AS undermodified_hydroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text);


ALTER TABLE so.undermodified_hydroxywybutosine OWNER TO kmr44;

--
-- Name: unedited_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.unedited_region AS
 SELECT feature.feature_id AS unedited_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unedited_region'::text);


ALTER TABLE so.unedited_region OWNER TO kmr44;

--
-- Name: unigene_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.unigene_cluster AS
 SELECT feature.feature_id AS unigene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unigene_cluster'::text);


ALTER TABLE so.unigene_cluster OWNER TO kmr44;

--
-- Name: uninvert_insert_dup; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uninvert_insert_dup AS
 SELECT feature.feature_id AS uninvert_insert_dup_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_insertional_duplication'::text);


ALTER TABLE so.uninvert_insert_dup OWNER TO kmr44;

--
-- Name: uninvert_inter_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uninvert_inter_transposition AS
 SELECT feature.feature_id AS uninvert_inter_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text);


ALTER TABLE so.uninvert_inter_transposition OWNER TO kmr44;

--
-- Name: uninvert_intra_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uninvert_intra_transposition AS
 SELECT feature.feature_id AS uninvert_intra_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text);


ALTER TABLE so.uninvert_intra_transposition OWNER TO kmr44;

--
-- Name: unique_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.unique_variant AS
 SELECT feature.feature_id AS unique_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unique_variant'::text);


ALTER TABLE so.unique_variant OWNER TO kmr44;

--
-- Name: unitary_pseudogene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.unitary_pseudogene AS
 SELECT feature.feature_id AS unitary_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unitary_pseudogene'::text);


ALTER TABLE so.unitary_pseudogene OWNER TO kmr44;

--
-- Name: unorient_insert_dup; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.unorient_insert_dup AS
 SELECT feature.feature_id AS unorient_insert_dup_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_insertional_duplication'::text);


ALTER TABLE so.unorient_insert_dup OWNER TO kmr44;

--
-- Name: unoriented_interchromosomal_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.unoriented_interchromosomal_transposition AS
 SELECT feature.feature_id AS unoriented_interchromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text);


ALTER TABLE so.unoriented_interchromosomal_transposition OWNER TO kmr44;

--
-- Name: unoriented_intrachromosomal_transposition; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.unoriented_intrachromosomal_transposition AS
 SELECT feature.feature_id AS unoriented_intrachromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text);


ALTER TABLE so.unoriented_intrachromosomal_transposition OWNER TO kmr44;

--
-- Name: untranslated_region_polycistronic_mrna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.untranslated_region_polycistronic_mrna AS
 SELECT feature.feature_id AS untranslated_region_polycistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text);


ALTER TABLE so.untranslated_region_polycistronic_mrna OWNER TO kmr44;

--
-- Name: upd; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.upd AS
 SELECT feature.feature_id AS upd_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'maternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'UPD'::text));


ALTER TABLE so.upd OWNER TO kmr44;

--
-- Name: upstream_aug_codon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.upstream_aug_codon AS
 SELECT feature.feature_id AS upstream_aug_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'upstream_AUG_codon'::text);


ALTER TABLE so.upstream_aug_codon OWNER TO kmr44;

--
-- Name: upstream_gene_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.upstream_gene_variant AS
 SELECT feature.feature_id AS upstream_gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '5KB_upstream_variant'::text) OR ((cvterm.name)::text = '2KB_upstream_variant'::text) OR ((cvterm.name)::text = 'upstream_gene_variant'::text));


ALTER TABLE so.upstream_gene_variant OWNER TO kmr44;

--
-- Name: uridine_five_oxyacetic_acid; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uridine_five_oxyacetic_acid AS
 SELECT feature.feature_id AS uridine_five_oxyacetic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text);


ALTER TABLE so.uridine_five_oxyacetic_acid OWNER TO kmr44;

--
-- Name: uridine_five_oxyacetic_acid_methyl_ester; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.uridine_five_oxyacetic_acid_methyl_ester AS
 SELECT feature.feature_id AS uridine_five_oxyacetic_acid_methyl_ester_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text);


ALTER TABLE so.uridine_five_oxyacetic_acid_methyl_ester OWNER TO kmr44;

--
-- Name: ust; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ust AS
 SELECT feature.feature_id AS ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text) OR ((cvterm.name)::text = 'UST'::text));


ALTER TABLE so.ust OWNER TO kmr44;

--
-- Name: ust_match; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.ust_match AS
 SELECT feature.feature_id AS ust_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UST_match'::text);


ALTER TABLE so.ust_match OWNER TO kmr44;

--
-- Name: utr; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.utr AS
 SELECT feature.feature_id AS utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text) OR ((cvterm.name)::text = 'internal_UTR'::text) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text) OR ((cvterm.name)::text = 'UTR'::text));


ALTER TABLE so.utr OWNER TO kmr44;

--
-- Name: utr_intron; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.utr_intron AS
 SELECT feature.feature_id AS utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'UTR_intron'::text));


ALTER TABLE so.utr_intron OWNER TO kmr44;

--
-- Name: utr_region; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.utr_region AS
 SELECT feature.feature_id AS utr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text) OR ((cvterm.name)::text = 'Bruno_response_element'::text) OR ((cvterm.name)::text = 'iron_responsive_element'::text) OR ((cvterm.name)::text = 'UTR_region'::text));


ALTER TABLE so.utr_region OWNER TO kmr44;

--
-- Name: utr_variant; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.utr_variant AS
 SELECT feature.feature_id AS utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '5_prime_UTR_variant'::text) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text) OR ((cvterm.name)::text = 'UTR_variant'::text));


ALTER TABLE so.utr_variant OWNER TO kmr44;

--
-- Name: v_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_cluster AS
 SELECT feature.feature_id AS v_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_cluster'::text);


ALTER TABLE so.v_cluster OWNER TO kmr44;

--
-- Name: v_d_dj_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_d_dj_c_cluster AS
 SELECT feature.feature_id AS v_d_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text);


ALTER TABLE so.v_d_dj_c_cluster OWNER TO kmr44;

--
-- Name: v_d_dj_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_d_dj_cluster AS
 SELECT feature.feature_id AS v_d_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_cluster'::text);


ALTER TABLE so.v_d_dj_cluster OWNER TO kmr44;

--
-- Name: v_d_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_d_dj_j_c_cluster AS
 SELECT feature.feature_id AS v_d_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text);


ALTER TABLE so.v_d_dj_j_c_cluster OWNER TO kmr44;

--
-- Name: v_d_dj_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_d_dj_j_cluster AS
 SELECT feature.feature_id AS v_d_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text);


ALTER TABLE so.v_d_dj_j_cluster OWNER TO kmr44;

--
-- Name: v_d_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_d_j_c_cluster AS
 SELECT feature.feature_id AS v_d_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_J_C_cluster'::text);


ALTER TABLE so.v_d_j_c_cluster OWNER TO kmr44;

--
-- Name: v_d_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_d_j_cluster AS
 SELECT feature.feature_id AS v_d_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_J_cluster'::text);


ALTER TABLE so.v_d_j_cluster OWNER TO kmr44;

--
-- Name: v_dj_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_dj_c_cluster AS
 SELECT feature.feature_id AS v_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_C_cluster'::text);


ALTER TABLE so.v_dj_c_cluster OWNER TO kmr44;

--
-- Name: v_dj_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_dj_cluster AS
 SELECT feature.feature_id AS v_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_cluster'::text);


ALTER TABLE so.v_dj_cluster OWNER TO kmr44;

--
-- Name: v_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_dj_j_c_cluster AS
 SELECT feature.feature_id AS v_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text);


ALTER TABLE so.v_dj_j_c_cluster OWNER TO kmr44;

--
-- Name: v_dj_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_dj_j_cluster AS
 SELECT feature.feature_id AS v_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_J_cluster'::text);


ALTER TABLE so.v_dj_j_cluster OWNER TO kmr44;

--
-- Name: v_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_gene AS
 SELECT feature.feature_id AS v_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_gene'::text);


ALTER TABLE so.v_gene OWNER TO kmr44;

--
-- Name: v_gene_recombination_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_gene_recombination_feature AS
 SELECT feature.feature_id AS v_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_gene_recombination_feature'::text);


ALTER TABLE so.v_gene_recombination_feature OWNER TO kmr44;

--
-- Name: v_heptamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_heptamer AS
 SELECT feature.feature_id AS v_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_heptamer'::text);


ALTER TABLE so.v_heptamer OWNER TO kmr44;

--
-- Name: v_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_j_c_cluster AS
 SELECT feature.feature_id AS v_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_J_C_cluster'::text);


ALTER TABLE so.v_j_c_cluster OWNER TO kmr44;

--
-- Name: v_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_j_cluster AS
 SELECT feature.feature_id AS v_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_J_cluster'::text);


ALTER TABLE so.v_j_cluster OWNER TO kmr44;

--
-- Name: v_nonamer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_nonamer AS
 SELECT feature.feature_id AS v_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_nonamer'::text);


ALTER TABLE so.v_nonamer OWNER TO kmr44;

--
-- Name: v_spacer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_spacer AS
 SELECT feature.feature_id AS v_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_spacer'::text);


ALTER TABLE so.v_spacer OWNER TO kmr44;

--
-- Name: v_vdj_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_vdj_c_cluster AS
 SELECT feature.feature_id AS v_vdj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_C_cluster'::text);


ALTER TABLE so.v_vdj_c_cluster OWNER TO kmr44;

--
-- Name: v_vdj_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_vdj_cluster AS
 SELECT feature.feature_id AS v_vdj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_cluster'::text);


ALTER TABLE so.v_vdj_cluster OWNER TO kmr44;

--
-- Name: v_vdj_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_vdj_j_c_cluster AS
 SELECT feature.feature_id AS v_vdj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text);


ALTER TABLE so.v_vdj_j_c_cluster OWNER TO kmr44;

--
-- Name: v_vdj_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_vdj_j_cluster AS
 SELECT feature.feature_id AS v_vdj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_J_cluster'::text);


ALTER TABLE so.v_vdj_j_cluster OWNER TO kmr44;

--
-- Name: v_vj_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_vj_c_cluster AS
 SELECT feature.feature_id AS v_vj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_C_cluster'::text);


ALTER TABLE so.v_vj_c_cluster OWNER TO kmr44;

--
-- Name: v_vj_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_vj_cluster AS
 SELECT feature.feature_id AS v_vj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_cluster'::text);


ALTER TABLE so.v_vj_cluster OWNER TO kmr44;

--
-- Name: v_vj_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_vj_j_c_cluster AS
 SELECT feature.feature_id AS v_vj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text);


ALTER TABLE so.v_vj_j_c_cluster OWNER TO kmr44;

--
-- Name: v_vj_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.v_vj_j_cluster AS
 SELECT feature.feature_id AS v_vj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_J_cluster'::text);


ALTER TABLE so.v_vj_j_cluster OWNER TO kmr44;

--
-- Name: validated; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.validated AS
 SELECT feature.feature_id AS validated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'experimentally_determined'::text) OR ((cvterm.name)::text = 'validated'::text));


ALTER TABLE so.validated OWNER TO kmr44;

--
-- Name: validated_cdna_clone; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.validated_cdna_clone AS
 SELECT feature.feature_id AS validated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'validated_cDNA_clone'::text);


ALTER TABLE so.validated_cdna_clone OWNER TO kmr44;

--
-- Name: valine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.valine AS
 SELECT feature.feature_id AS valine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valine'::text);


ALTER TABLE so.valine OWNER TO kmr44;

--
-- Name: valine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.valine_trna_primary_transcript AS
 SELECT feature.feature_id AS valine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text);


ALTER TABLE so.valine_trna_primary_transcript OWNER TO kmr44;

--
-- Name: valyl_trna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.valyl_trna AS
 SELECT feature.feature_id AS valyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valyl_tRNA'::text);


ALTER TABLE so.valyl_trna OWNER TO kmr44;

--
-- Name: variant_collection; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.variant_collection AS
 SELECT feature.feature_id AS variant_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chromosome_variation'::text) OR ((cvterm.name)::text = 'allele'::text) OR ((cvterm.name)::text = 'haplotype'::text) OR ((cvterm.name)::text = 'genotype'::text) OR ((cvterm.name)::text = 'diplotype'::text) OR ((cvterm.name)::text = 'assortment_derived_variation'::text) OR ((cvterm.name)::text = 'chromosome_number_variation'::text) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text) OR ((cvterm.name)::text = 'aneuploid'::text) OR ((cvterm.name)::text = 'polyploid'::text) OR ((cvterm.name)::text = 'hyperploid'::text) OR ((cvterm.name)::text = 'hypoploid'::text) OR ((cvterm.name)::text = 'autopolyploid'::text) OR ((cvterm.name)::text = 'allopolyploid'::text) OR ((cvterm.name)::text = 'free_chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosomal_transposition'::text) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text) OR ((cvterm.name)::text = 'chromosomal_duplication'::text) OR ((cvterm.name)::text = 'compound_chromosome'::text) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'chromosomal_deletion'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'ring_chromosome'::text) OR ((cvterm.name)::text = 'chromosome_fission'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text) OR ((cvterm.name)::text = 'paracentric_inversion'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'bipartite_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_inversion'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'chromosomal_translocation'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text) OR ((cvterm.name)::text = 'deficient_translocation'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text) OR ((cvterm.name)::text = 'cyclic_translocation'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text) OR ((cvterm.name)::text = 'insertional_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'polymorphic_sequence_variant'::text) OR ((cvterm.name)::text = 'variant_collection'::text));


ALTER TABLE so.variant_collection OWNER TO kmr44;

--
-- Name: variant_frequency; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.variant_frequency AS
 SELECT feature.feature_id AS variant_frequency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'unique_variant'::text) OR ((cvterm.name)::text = 'rare_variant'::text) OR ((cvterm.name)::text = 'polymorphic_variant'::text) OR ((cvterm.name)::text = 'common_variant'::text) OR ((cvterm.name)::text = 'fixed_variant'::text) OR ((cvterm.name)::text = 'variant_frequency'::text));


ALTER TABLE so.variant_frequency OWNER TO kmr44;

--
-- Name: variant_genome; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.variant_genome AS
 SELECT feature.feature_id AS variant_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chromosomally_aberrant_genome'::text) OR ((cvterm.name)::text = 'variant_genome'::text));


ALTER TABLE so.variant_genome OWNER TO kmr44;

--
-- Name: variant_origin; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.variant_origin AS
 SELECT feature.feature_id AS variant_origin_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'maternal_variant'::text) OR ((cvterm.name)::text = 'paternal_variant'::text) OR ((cvterm.name)::text = 'somatic_variant'::text) OR ((cvterm.name)::text = 'germline_variant'::text) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text) OR ((cvterm.name)::text = 'population_specific_variant'::text) OR ((cvterm.name)::text = 'de_novo_variant'::text) OR ((cvterm.name)::text = 'variant_origin'::text));


ALTER TABLE so.variant_origin OWNER TO kmr44;

--
-- Name: variant_phenotype; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.variant_phenotype AS
 SELECT feature.feature_id AS variant_phenotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'benign_variant'::text) OR ((cvterm.name)::text = 'disease_associated_variant'::text) OR ((cvterm.name)::text = 'disease_causing_variant'::text) OR ((cvterm.name)::text = 'lethal_variant'::text) OR ((cvterm.name)::text = 'quantitative_variant'::text) OR ((cvterm.name)::text = 'variant_phenotype'::text));


ALTER TABLE so.variant_phenotype OWNER TO kmr44;

--
-- Name: variant_quality; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.variant_quality AS
 SELECT feature.feature_id AS variant_quality_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'variant_origin'::text) OR ((cvterm.name)::text = 'variant_frequency'::text) OR ((cvterm.name)::text = 'variant_phenotype'::text) OR ((cvterm.name)::text = 'maternal_variant'::text) OR ((cvterm.name)::text = 'paternal_variant'::text) OR ((cvterm.name)::text = 'somatic_variant'::text) OR ((cvterm.name)::text = 'germline_variant'::text) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text) OR ((cvterm.name)::text = 'population_specific_variant'::text) OR ((cvterm.name)::text = 'de_novo_variant'::text) OR ((cvterm.name)::text = 'unique_variant'::text) OR ((cvterm.name)::text = 'rare_variant'::text) OR ((cvterm.name)::text = 'polymorphic_variant'::text) OR ((cvterm.name)::text = 'common_variant'::text) OR ((cvterm.name)::text = 'fixed_variant'::text) OR ((cvterm.name)::text = 'benign_variant'::text) OR ((cvterm.name)::text = 'disease_associated_variant'::text) OR ((cvterm.name)::text = 'disease_causing_variant'::text) OR ((cvterm.name)::text = 'lethal_variant'::text) OR ((cvterm.name)::text = 'quantitative_variant'::text) OR ((cvterm.name)::text = 'variant_quality'::text));


ALTER TABLE so.variant_quality OWNER TO kmr44;

--
-- Name: vault_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vault_rna AS
 SELECT feature.feature_id AS vault_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'vault_RNA'::text);


ALTER TABLE so.vault_rna OWNER TO kmr44;

--
-- Name: vd_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vd_gene AS
 SELECT feature.feature_id AS vd_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VD_gene'::text);


ALTER TABLE so.vd_gene OWNER TO kmr44;

--
-- Name: vdj_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vdj_c_cluster AS
 SELECT feature.feature_id AS vdj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_C_cluster'::text);


ALTER TABLE so.vdj_c_cluster OWNER TO kmr44;

--
-- Name: vdj_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vdj_gene AS
 SELECT feature.feature_id AS vdj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_gene'::text);


ALTER TABLE so.vdj_gene OWNER TO kmr44;

--
-- Name: vdj_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vdj_j_c_cluster AS
 SELECT feature.feature_id AS vdj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_J_C_cluster'::text);


ALTER TABLE so.vdj_j_c_cluster OWNER TO kmr44;

--
-- Name: vdj_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vdj_j_cluster AS
 SELECT feature.feature_id AS vdj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_J_cluster'::text);


ALTER TABLE so.vdj_j_cluster OWNER TO kmr44;

--
-- Name: vector_replicon; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vector_replicon AS
 SELECT feature.feature_id AS vector_replicon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'YAC'::text) OR ((cvterm.name)::text = 'BAC'::text) OR ((cvterm.name)::text = 'PAC'::text) OR ((cvterm.name)::text = 'cosmid'::text) OR ((cvterm.name)::text = 'phagemid'::text) OR ((cvterm.name)::text = 'fosmid'::text) OR ((cvterm.name)::text = 'lambda_vector'::text) OR ((cvterm.name)::text = 'plasmid_vector'::text) OR ((cvterm.name)::text = 'targeting_vector'::text) OR ((cvterm.name)::text = 'vector_replicon'::text));


ALTER TABLE so.vector_replicon OWNER TO kmr44;

--
-- Name: vertebrate_ig_t_cell_receptor_rearranged_gene_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vertebrate_ig_t_cell_receptor_rearranged_gene_cluster AS
 SELECT feature.feature_id AS vertebrate_ig_t_cell_receptor_rearranged_gene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text));


ALTER TABLE so.vertebrate_ig_t_cell_receptor_rearranged_gene_cluster OWNER TO kmr44;

--
-- Name: vertebrate_immune_system_gene_recombination_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vertebrate_immune_system_gene_recombination_feature AS
 SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text) OR ((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'VJ_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VJ_J_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_D_J_cluster'::text) OR ((cvterm.name)::text = 'DJ_C_cluster'::text) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text));


ALTER TABLE so.vertebrate_immune_system_gene_recombination_feature OWNER TO kmr44;

--
-- Name: vertebrate_immune_system_gene_recombination_signal_feature; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vertebrate_immune_system_gene_recombination_signal_feature AS
 SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_signal_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'J_heptamer'::text) OR ((cvterm.name)::text = 'V_heptamer'::text) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'J_nonamer'::text) OR ((cvterm.name)::text = 'V_nonamer'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text));


ALTER TABLE so.vertebrate_immune_system_gene_recombination_signal_feature OWNER TO kmr44;

--
-- Name: vertebrate_immune_system_gene_recombination_spacer; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vertebrate_immune_system_gene_recombination_spacer AS
 SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text) OR ((cvterm.name)::text = 'J_spacer'::text) OR ((cvterm.name)::text = 'V_spacer'::text) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text));


ALTER TABLE so.vertebrate_immune_system_gene_recombination_spacer OWNER TO kmr44;

--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_gene_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vertebrate_immunoglobulin_t_cell_receptor_gene_cluster AS
 SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_gene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text) OR ((cvterm.name)::text = 'J_cluster'::text) OR ((cvterm.name)::text = 'V_cluster'::text) OR ((cvterm.name)::text = 'V_J_cluster'::text) OR ((cvterm.name)::text = 'V_J_C_cluster'::text) OR ((cvterm.name)::text = 'C_cluster'::text) OR ((cvterm.name)::text = 'D_cluster'::text) OR ((cvterm.name)::text = 'D_J_cluster'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text));


ALTER TABLE so.vertebrate_immunoglobulin_t_cell_receptor_gene_cluster OWNER TO kmr44;

--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment AS
 SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text) OR ((cvterm.name)::text = 'VDJ_gene'::text) OR ((cvterm.name)::text = 'VJ_gene'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text));


ALTER TABLE so.vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment OWNER TO kmr44;

--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_segment; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vertebrate_immunoglobulin_t_cell_receptor_segment AS
 SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text) OR ((cvterm.name)::text = 'J_gene'::text) OR ((cvterm.name)::text = 'C_gene'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text));


ALTER TABLE so.vertebrate_immunoglobulin_t_cell_receptor_segment OWNER TO kmr44;

--
-- Name: viral_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.viral_sequence AS
 SELECT feature.feature_id AS viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'viral_sequence'::text));


ALTER TABLE so.viral_sequence OWNER TO kmr44;

--
-- Name: virtual_sequence; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.virtual_sequence AS
 SELECT feature.feature_id AS virtual_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'virtual_sequence'::text);


ALTER TABLE so.virtual_sequence OWNER TO kmr44;

--
-- Name: vj_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vj_c_cluster AS
 SELECT feature.feature_id AS vj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_C_cluster'::text);


ALTER TABLE so.vj_c_cluster OWNER TO kmr44;

--
-- Name: vj_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vj_gene AS
 SELECT feature.feature_id AS vj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_gene'::text);


ALTER TABLE so.vj_gene OWNER TO kmr44;

--
-- Name: vj_j_c_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vj_j_c_cluster AS
 SELECT feature.feature_id AS vj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_J_C_cluster'::text);


ALTER TABLE so.vj_j_c_cluster OWNER TO kmr44;

--
-- Name: vj_j_cluster; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.vj_j_cluster AS
 SELECT feature.feature_id AS vj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_J_cluster'::text);


ALTER TABLE so.vj_j_cluster OWNER TO kmr44;

--
-- Name: wc_base_pair; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.wc_base_pair AS
 SELECT feature.feature_id AS wc_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'WC_base_pair'::text);


ALTER TABLE so.wc_base_pair OWNER TO kmr44;

--
-- Name: whole_genome_sequence_status; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.whole_genome_sequence_status AS
 SELECT feature.feature_id AS whole_genome_sequence_status_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'standard_draft'::text) OR ((cvterm.name)::text = 'high_quality_draft'::text) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text) OR ((cvterm.name)::text = 'noncontiguous_finished'::text) OR ((cvterm.name)::text = 'finished_genome'::text) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text));


ALTER TABLE so.whole_genome_sequence_status OWNER TO kmr44;

--
-- Name: wild_type; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.wild_type AS
 SELECT feature.feature_id AS wild_type_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wild_type'::text);


ALTER TABLE so.wild_type OWNER TO kmr44;

--
-- Name: wild_type_rescue_gene; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.wild_type_rescue_gene AS
 SELECT feature.feature_id AS wild_type_rescue_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wild_type_rescue_gene'::text);


ALTER TABLE so.wild_type_rescue_gene OWNER TO kmr44;

--
-- Name: wobble_base_pair; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.wobble_base_pair AS
 SELECT feature.feature_id AS wobble_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wobble_base_pair'::text);


ALTER TABLE so.wobble_base_pair OWNER TO kmr44;

--
-- Name: wybutosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.wybutosine AS
 SELECT feature.feature_id AS wybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wybutosine'::text);


ALTER TABLE so.wybutosine OWNER TO kmr44;

--
-- Name: wyosine; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.wyosine AS
 SELECT feature.feature_id AS wyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wyosine'::text);


ALTER TABLE so.wyosine OWNER TO kmr44;

--
-- Name: x_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.x_element AS
 SELECT feature.feature_id AS x_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'X_element'::text);


ALTER TABLE so.x_element OWNER TO kmr44;

--
-- Name: x_element_combinatorial_repeat; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.x_element_combinatorial_repeat AS
 SELECT feature.feature_id AS x_element_combinatorial_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text);


ALTER TABLE so.x_element_combinatorial_repeat OWNER TO kmr44;

--
-- Name: y_prime_element; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.y_prime_element AS
 SELECT feature.feature_id AS y_prime_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Y_prime_element'::text);


ALTER TABLE so.y_prime_element OWNER TO kmr44;

--
-- Name: y_rna; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.y_rna AS
 SELECT feature.feature_id AS y_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Y_RNA'::text);


ALTER TABLE so.y_rna OWNER TO kmr44;

--
-- Name: yac; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.yac AS
 SELECT feature.feature_id AS yac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'YAC'::text);


ALTER TABLE so.yac OWNER TO kmr44;

--
-- Name: yac_end; Type: VIEW; Schema: so; Owner: kmr44
--

CREATE VIEW so.yac_end AS
 SELECT feature.feature_id AS yac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (public.feature
     JOIN public.cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'YAC_end'::text);


ALTER TABLE so.yac_end OWNER TO kmr44;

--
-- Name: featuregroup featuregroup_id; Type: DEFAULT; Schema: frange; Owner: kmr44
--

ALTER TABLE ONLY frange.featuregroup ALTER COLUMN featuregroup_id SET DEFAULT nextval('frange.featuregroup_featuregroup_id_seq'::regclass);


--
-- Name: acquisition acquisition_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition ALTER COLUMN acquisition_id SET DEFAULT nextval('public.acquisition_acquisition_id_seq'::regclass);


--
-- Name: acquisition_relationship acquisition_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition_relationship ALTER COLUMN acquisition_relationship_id SET DEFAULT nextval('public.acquisition_relationship_acquisition_relationship_id_seq'::regclass);


--
-- Name: acquisitionprop acquisitionprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisitionprop ALTER COLUMN acquisitionprop_id SET DEFAULT nextval('public.acquisitionprop_acquisitionprop_id_seq'::regclass);


--
-- Name: analysis analysis_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysis ALTER COLUMN analysis_id SET DEFAULT nextval('public.analysis_analysis_id_seq'::regclass);


--
-- Name: analysisfeature analysisfeature_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeature ALTER COLUMN analysisfeature_id SET DEFAULT nextval('public.analysisfeature_analysisfeature_id_seq'::regclass);


--
-- Name: analysisfeatureprop analysisfeatureprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeatureprop ALTER COLUMN analysisfeatureprop_id SET DEFAULT nextval('public.analysisfeatureprop_analysisfeatureprop_id_seq'::regclass);


--
-- Name: analysisprop analysisprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisprop ALTER COLUMN analysisprop_id SET DEFAULT nextval('public.analysisprop_analysisprop_id_seq'::regclass);


--
-- Name: arraydesign arraydesign_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesign ALTER COLUMN arraydesign_id SET DEFAULT nextval('public.arraydesign_arraydesign_id_seq'::regclass);


--
-- Name: arraydesignprop arraydesignprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesignprop ALTER COLUMN arraydesignprop_id SET DEFAULT nextval('public.arraydesignprop_arraydesignprop_id_seq'::regclass);


--
-- Name: assay assay_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay ALTER COLUMN assay_id SET DEFAULT nextval('public.assay_assay_id_seq'::regclass);


--
-- Name: assay_biomaterial assay_biomaterial_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_biomaterial ALTER COLUMN assay_biomaterial_id SET DEFAULT nextval('public.assay_biomaterial_assay_biomaterial_id_seq'::regclass);


--
-- Name: assay_project assay_project_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_project ALTER COLUMN assay_project_id SET DEFAULT nextval('public.assay_project_assay_project_id_seq'::regclass);


--
-- Name: assayprop assayprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assayprop ALTER COLUMN assayprop_id SET DEFAULT nextval('public.assayprop_assayprop_id_seq'::regclass);


--
-- Name: biomaterial biomaterial_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial ALTER COLUMN biomaterial_id SET DEFAULT nextval('public.biomaterial_biomaterial_id_seq'::regclass);


--
-- Name: biomaterial_dbxref biomaterial_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_dbxref ALTER COLUMN biomaterial_dbxref_id SET DEFAULT nextval('public.biomaterial_dbxref_biomaterial_dbxref_id_seq'::regclass);


--
-- Name: biomaterial_relationship biomaterial_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_relationship ALTER COLUMN biomaterial_relationship_id SET DEFAULT nextval('public.biomaterial_relationship_biomaterial_relationship_id_seq'::regclass);


--
-- Name: biomaterial_treatment biomaterial_treatment_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_treatment ALTER COLUMN biomaterial_treatment_id SET DEFAULT nextval('public.biomaterial_treatment_biomaterial_treatment_id_seq'::regclass);


--
-- Name: biomaterialprop biomaterialprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterialprop ALTER COLUMN biomaterialprop_id SET DEFAULT nextval('public.biomaterialprop_biomaterialprop_id_seq'::regclass);


--
-- Name: cell_line cell_line_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line ALTER COLUMN cell_line_id SET DEFAULT nextval('public.cell_line_cell_line_id_seq'::regclass);


--
-- Name: cell_line_cvterm cell_line_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvterm ALTER COLUMN cell_line_cvterm_id SET DEFAULT nextval('public.cell_line_cvterm_cell_line_cvterm_id_seq'::regclass);


--
-- Name: cell_line_cvtermprop cell_line_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvtermprop ALTER COLUMN cell_line_cvtermprop_id SET DEFAULT nextval('public.cell_line_cvtermprop_cell_line_cvtermprop_id_seq'::regclass);


--
-- Name: cell_line_dbxref cell_line_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_dbxref ALTER COLUMN cell_line_dbxref_id SET DEFAULT nextval('public.cell_line_dbxref_cell_line_dbxref_id_seq'::regclass);


--
-- Name: cell_line_feature cell_line_feature_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_feature ALTER COLUMN cell_line_feature_id SET DEFAULT nextval('public.cell_line_feature_cell_line_feature_id_seq'::regclass);


--
-- Name: cell_line_library cell_line_library_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_library ALTER COLUMN cell_line_library_id SET DEFAULT nextval('public.cell_line_library_cell_line_library_id_seq'::regclass);


--
-- Name: cell_line_pub cell_line_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_pub ALTER COLUMN cell_line_pub_id SET DEFAULT nextval('public.cell_line_pub_cell_line_pub_id_seq'::regclass);


--
-- Name: cell_line_relationship cell_line_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_relationship ALTER COLUMN cell_line_relationship_id SET DEFAULT nextval('public.cell_line_relationship_cell_line_relationship_id_seq'::regclass);


--
-- Name: cell_line_synonym cell_line_synonym_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_synonym ALTER COLUMN cell_line_synonym_id SET DEFAULT nextval('public.cell_line_synonym_cell_line_synonym_id_seq'::regclass);


--
-- Name: cell_lineprop cell_lineprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop ALTER COLUMN cell_lineprop_id SET DEFAULT nextval('public.cell_lineprop_cell_lineprop_id_seq'::regclass);


--
-- Name: cell_lineprop_pub cell_lineprop_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop_pub ALTER COLUMN cell_lineprop_pub_id SET DEFAULT nextval('public.cell_lineprop_pub_cell_lineprop_pub_id_seq'::regclass);


--
-- Name: chadoprop chadoprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.chadoprop ALTER COLUMN chadoprop_id SET DEFAULT nextval('public.chadoprop_chadoprop_id_seq'::regclass);


--
-- Name: channel channel_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.channel ALTER COLUMN channel_id SET DEFAULT nextval('public.channel_channel_id_seq'::regclass);


--
-- Name: contact contact_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact ALTER COLUMN contact_id SET DEFAULT nextval('public.contact_contact_id_seq'::regclass);


--
-- Name: contact_relationship contact_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact_relationship ALTER COLUMN contact_relationship_id SET DEFAULT nextval('public.contact_relationship_contact_relationship_id_seq'::regclass);


--
-- Name: control control_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.control ALTER COLUMN control_id SET DEFAULT nextval('public.control_control_id_seq'::regclass);


--
-- Name: cv cv_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cv ALTER COLUMN cv_id SET DEFAULT nextval('public.cv_cv_id_seq'::regclass);


--
-- Name: cvprop cvprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvprop ALTER COLUMN cvprop_id SET DEFAULT nextval('public.cvprop_cvprop_id_seq'::regclass);


--
-- Name: cvterm cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm ALTER COLUMN cvterm_id SET DEFAULT nextval('public.cvterm_cvterm_id_seq'::regclass);


--
-- Name: cvterm_dbxref cvterm_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_dbxref ALTER COLUMN cvterm_dbxref_id SET DEFAULT nextval('public.cvterm_dbxref_cvterm_dbxref_id_seq'::regclass);


--
-- Name: cvterm_relationship cvterm_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_relationship ALTER COLUMN cvterm_relationship_id SET DEFAULT nextval('public.cvterm_relationship_cvterm_relationship_id_seq'::regclass);


--
-- Name: cvtermpath cvtermpath_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermpath ALTER COLUMN cvtermpath_id SET DEFAULT nextval('public.cvtermpath_cvtermpath_id_seq'::regclass);


--
-- Name: cvtermprop cvtermprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermprop ALTER COLUMN cvtermprop_id SET DEFAULT nextval('public.cvtermprop_cvtermprop_id_seq'::regclass);


--
-- Name: cvtermsynonym cvtermsynonym_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermsynonym ALTER COLUMN cvtermsynonym_id SET DEFAULT nextval('public.cvtermsynonym_cvtermsynonym_id_seq'::regclass);


--
-- Name: db db_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.db ALTER COLUMN db_id SET DEFAULT nextval('public.db_db_id_seq'::regclass);


--
-- Name: dbxref dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxref ALTER COLUMN dbxref_id SET DEFAULT nextval('public.dbxref_dbxref_id_seq'::regclass);


--
-- Name: dbxrefprop dbxrefprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxrefprop ALTER COLUMN dbxrefprop_id SET DEFAULT nextval('public.dbxrefprop_dbxrefprop_id_seq'::regclass);


--
-- Name: eimage eimage_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.eimage ALTER COLUMN eimage_id SET DEFAULT nextval('public.eimage_eimage_id_seq'::regclass);


--
-- Name: element element_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element ALTER COLUMN element_id SET DEFAULT nextval('public.element_element_id_seq'::regclass);


--
-- Name: element_relationship element_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element_relationship ALTER COLUMN element_relationship_id SET DEFAULT nextval('public.element_relationship_element_relationship_id_seq'::regclass);


--
-- Name: elementresult elementresult_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult ALTER COLUMN elementresult_id SET DEFAULT nextval('public.elementresult_elementresult_id_seq'::regclass);


--
-- Name: elementresult_relationship elementresult_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult_relationship ALTER COLUMN elementresult_relationship_id SET DEFAULT nextval('public.elementresult_relationship_elementresult_relationship_id_seq'::regclass);


--
-- Name: environment environment_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.environment ALTER COLUMN environment_id SET DEFAULT nextval('public.environment_environment_id_seq'::regclass);


--
-- Name: environment_cvterm environment_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.environment_cvterm ALTER COLUMN environment_cvterm_id SET DEFAULT nextval('public.environment_cvterm_environment_cvterm_id_seq'::regclass);


--
-- Name: expression expression_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression ALTER COLUMN expression_id SET DEFAULT nextval('public.expression_expression_id_seq'::regclass);


--
-- Name: expression_cvterm expression_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvterm ALTER COLUMN expression_cvterm_id SET DEFAULT nextval('public.expression_cvterm_expression_cvterm_id_seq'::regclass);


--
-- Name: expression_cvtermprop expression_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvtermprop ALTER COLUMN expression_cvtermprop_id SET DEFAULT nextval('public.expression_cvtermprop_expression_cvtermprop_id_seq'::regclass);


--
-- Name: expression_image expression_image_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_image ALTER COLUMN expression_image_id SET DEFAULT nextval('public.expression_image_expression_image_id_seq'::regclass);


--
-- Name: expression_pub expression_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_pub ALTER COLUMN expression_pub_id SET DEFAULT nextval('public.expression_pub_expression_pub_id_seq'::regclass);


--
-- Name: expressionprop expressionprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expressionprop ALTER COLUMN expressionprop_id SET DEFAULT nextval('public.expressionprop_expressionprop_id_seq'::regclass);


--
-- Name: feature feature_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature ALTER COLUMN feature_id SET DEFAULT nextval('public.feature_feature_id_seq'::regclass);


--
-- Name: feature_cvterm feature_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm ALTER COLUMN feature_cvterm_id SET DEFAULT nextval('public.feature_cvterm_feature_cvterm_id_seq'::regclass);


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_dbxref ALTER COLUMN feature_cvterm_dbxref_id SET DEFAULT nextval('public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq'::regclass);


--
-- Name: feature_cvterm_pub feature_cvterm_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_pub ALTER COLUMN feature_cvterm_pub_id SET DEFAULT nextval('public.feature_cvterm_pub_feature_cvterm_pub_id_seq'::regclass);


--
-- Name: feature_cvtermprop feature_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvtermprop ALTER COLUMN feature_cvtermprop_id SET DEFAULT nextval('public.feature_cvtermprop_feature_cvtermprop_id_seq'::regclass);


--
-- Name: feature_dbxref feature_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_dbxref ALTER COLUMN feature_dbxref_id SET DEFAULT nextval('public.feature_dbxref_feature_dbxref_id_seq'::regclass);


--
-- Name: feature_expression feature_expression_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expression ALTER COLUMN feature_expression_id SET DEFAULT nextval('public.feature_expression_feature_expression_id_seq'::regclass);


--
-- Name: feature_expressionprop feature_expressionprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expressionprop ALTER COLUMN feature_expressionprop_id SET DEFAULT nextval('public.feature_expressionprop_feature_expressionprop_id_seq'::regclass);


--
-- Name: feature_genotype feature_genotype_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_genotype ALTER COLUMN feature_genotype_id SET DEFAULT nextval('public.feature_genotype_feature_genotype_id_seq'::regclass);


--
-- Name: feature_phenotype feature_phenotype_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_phenotype ALTER COLUMN feature_phenotype_id SET DEFAULT nextval('public.feature_phenotype_feature_phenotype_id_seq'::regclass);


--
-- Name: feature_pub feature_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pub ALTER COLUMN feature_pub_id SET DEFAULT nextval('public.feature_pub_feature_pub_id_seq'::regclass);


--
-- Name: feature_pubprop feature_pubprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pubprop ALTER COLUMN feature_pubprop_id SET DEFAULT nextval('public.feature_pubprop_feature_pubprop_id_seq'::regclass);


--
-- Name: feature_relationship feature_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship ALTER COLUMN feature_relationship_id SET DEFAULT nextval('public.feature_relationship_feature_relationship_id_seq'::regclass);


--
-- Name: feature_relationship_pub feature_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship_pub ALTER COLUMN feature_relationship_pub_id SET DEFAULT nextval('public.feature_relationship_pub_feature_relationship_pub_id_seq'::regclass);


--
-- Name: feature_relationshipprop feature_relationshipprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop ALTER COLUMN feature_relationshipprop_id SET DEFAULT nextval('public.feature_relationshipprop_feature_relationshipprop_id_seq'::regclass);


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop_pub ALTER COLUMN feature_relationshipprop_pub_id SET DEFAULT nextval('public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq'::regclass);


--
-- Name: feature_synonym feature_synonym_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_synonym ALTER COLUMN feature_synonym_id SET DEFAULT nextval('public.feature_synonym_feature_synonym_id_seq'::regclass);


--
-- Name: featureloc featureloc_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc ALTER COLUMN featureloc_id SET DEFAULT nextval('public.featureloc_featureloc_id_seq'::regclass);


--
-- Name: featureloc_pub featureloc_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc_pub ALTER COLUMN featureloc_pub_id SET DEFAULT nextval('public.featureloc_pub_featureloc_pub_id_seq'::regclass);


--
-- Name: featuremap featuremap_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featuremap ALTER COLUMN featuremap_id SET DEFAULT nextval('public.featuremap_featuremap_id_seq'::regclass);


--
-- Name: featuremap_pub featuremap_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featuremap_pub ALTER COLUMN featuremap_pub_id SET DEFAULT nextval('public.featuremap_pub_featuremap_pub_id_seq'::regclass);


--
-- Name: featurepos featurepos_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurepos ALTER COLUMN featurepos_id SET DEFAULT nextval('public.featurepos_featurepos_id_seq'::regclass);


--
-- Name: featurepos featuremap_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurepos ALTER COLUMN featuremap_id SET DEFAULT nextval('public.featurepos_featuremap_id_seq'::regclass);


--
-- Name: featureprop featureprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop ALTER COLUMN featureprop_id SET DEFAULT nextval('public.featureprop_featureprop_id_seq'::regclass);


--
-- Name: featureprop_pub featureprop_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop_pub ALTER COLUMN featureprop_pub_id SET DEFAULT nextval('public.featureprop_pub_featureprop_pub_id_seq'::regclass);


--
-- Name: featurerange featurerange_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurerange ALTER COLUMN featurerange_id SET DEFAULT nextval('public.featurerange_featurerange_id_seq'::regclass);


--
-- Name: genotype genotype_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotype ALTER COLUMN genotype_id SET DEFAULT nextval('public.genotype_genotype_id_seq'::regclass);


--
-- Name: genotypeprop genotypeprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotypeprop ALTER COLUMN genotypeprop_id SET DEFAULT nextval('public.genotypeprop_genotypeprop_id_seq'::regclass);


--
-- Name: library library_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library ALTER COLUMN library_id SET DEFAULT nextval('public.library_library_id_seq'::regclass);


--
-- Name: library_cvterm library_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_cvterm ALTER COLUMN library_cvterm_id SET DEFAULT nextval('public.library_cvterm_library_cvterm_id_seq'::regclass);


--
-- Name: library_dbxref library_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_dbxref ALTER COLUMN library_dbxref_id SET DEFAULT nextval('public.library_dbxref_library_dbxref_id_seq'::regclass);


--
-- Name: library_feature library_feature_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_feature ALTER COLUMN library_feature_id SET DEFAULT nextval('public.library_feature_library_feature_id_seq'::regclass);


--
-- Name: library_pub library_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_pub ALTER COLUMN library_pub_id SET DEFAULT nextval('public.library_pub_library_pub_id_seq'::regclass);


--
-- Name: library_synonym library_synonym_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_synonym ALTER COLUMN library_synonym_id SET DEFAULT nextval('public.library_synonym_library_synonym_id_seq'::regclass);


--
-- Name: libraryprop libraryprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop ALTER COLUMN libraryprop_id SET DEFAULT nextval('public.libraryprop_libraryprop_id_seq'::regclass);


--
-- Name: libraryprop_pub libraryprop_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop_pub ALTER COLUMN libraryprop_pub_id SET DEFAULT nextval('public.libraryprop_pub_libraryprop_pub_id_seq'::regclass);


--
-- Name: magedocumentation magedocumentation_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.magedocumentation ALTER COLUMN magedocumentation_id SET DEFAULT nextval('public.magedocumentation_magedocumentation_id_seq'::regclass);


--
-- Name: mageml mageml_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.mageml ALTER COLUMN mageml_id SET DEFAULT nextval('public.mageml_mageml_id_seq'::regclass);


--
-- Name: materialized_view materialized_view_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.materialized_view ALTER COLUMN materialized_view_id SET DEFAULT nextval('public.materialized_view_materialized_view_id_seq'::regclass);


--
-- Name: nd_experiment nd_experiment_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment ALTER COLUMN nd_experiment_id SET DEFAULT nextval('public.nd_experiment_nd_experiment_id_seq'::regclass);


--
-- Name: nd_experiment_contact nd_experiment_contact_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_contact ALTER COLUMN nd_experiment_contact_id SET DEFAULT nextval('public.nd_experiment_contact_nd_experiment_contact_id_seq'::regclass);


--
-- Name: nd_experiment_dbxref nd_experiment_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_dbxref ALTER COLUMN nd_experiment_dbxref_id SET DEFAULT nextval('public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq'::regclass);


--
-- Name: nd_experiment_genotype nd_experiment_genotype_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_genotype ALTER COLUMN nd_experiment_genotype_id SET DEFAULT nextval('public.nd_experiment_genotype_nd_experiment_genotype_id_seq'::regclass);


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_phenotype ALTER COLUMN nd_experiment_phenotype_id SET DEFAULT nextval('public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq'::regclass);


--
-- Name: nd_experiment_project nd_experiment_project_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_project ALTER COLUMN nd_experiment_project_id SET DEFAULT nextval('public.nd_experiment_project_nd_experiment_project_id_seq'::regclass);


--
-- Name: nd_experiment_protocol nd_experiment_protocol_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_protocol ALTER COLUMN nd_experiment_protocol_id SET DEFAULT nextval('public.nd_experiment_protocol_nd_experiment_protocol_id_seq'::regclass);


--
-- Name: nd_experiment_pub nd_experiment_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_pub ALTER COLUMN nd_experiment_pub_id SET DEFAULT nextval('public.nd_experiment_pub_nd_experiment_pub_id_seq'::regclass);


--
-- Name: nd_experiment_stock nd_experiment_stock_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock ALTER COLUMN nd_experiment_stock_id SET DEFAULT nextval('public.nd_experiment_stock_nd_experiment_stock_id_seq'::regclass);


--
-- Name: nd_experiment_stock_dbxref nd_experiment_stock_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock_dbxref ALTER COLUMN nd_experiment_stock_dbxref_id SET DEFAULT nextval('public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq'::regclass);


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stockprop ALTER COLUMN nd_experiment_stockprop_id SET DEFAULT nextval('public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq'::regclass);


--
-- Name: nd_experimentprop nd_experimentprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experimentprop ALTER COLUMN nd_experimentprop_id SET DEFAULT nextval('public.nd_experimentprop_nd_experimentprop_id_seq'::regclass);


--
-- Name: nd_geolocation nd_geolocation_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_geolocation ALTER COLUMN nd_geolocation_id SET DEFAULT nextval('public.nd_geolocation_nd_geolocation_id_seq'::regclass);


--
-- Name: nd_geolocationprop nd_geolocationprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_geolocationprop ALTER COLUMN nd_geolocationprop_id SET DEFAULT nextval('public.nd_geolocationprop_nd_geolocationprop_id_seq'::regclass);


--
-- Name: nd_protocol nd_protocol_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol ALTER COLUMN nd_protocol_id SET DEFAULT nextval('public.nd_protocol_nd_protocol_id_seq'::regclass);


--
-- Name: nd_protocol_reagent nd_protocol_reagent_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol_reagent ALTER COLUMN nd_protocol_reagent_id SET DEFAULT nextval('public.nd_protocol_reagent_nd_protocol_reagent_id_seq'::regclass);


--
-- Name: nd_protocolprop nd_protocolprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocolprop ALTER COLUMN nd_protocolprop_id SET DEFAULT nextval('public.nd_protocolprop_nd_protocolprop_id_seq'::regclass);


--
-- Name: nd_reagent nd_reagent_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagent ALTER COLUMN nd_reagent_id SET DEFAULT nextval('public.nd_reagent_nd_reagent_id_seq'::regclass);


--
-- Name: nd_reagent_relationship nd_reagent_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagent_relationship ALTER COLUMN nd_reagent_relationship_id SET DEFAULT nextval('public.nd_reagent_relationship_nd_reagent_relationship_id_seq'::regclass);


--
-- Name: nd_reagentprop nd_reagentprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagentprop ALTER COLUMN nd_reagentprop_id SET DEFAULT nextval('public.nd_reagentprop_nd_reagentprop_id_seq'::regclass);


--
-- Name: organism organism_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organism ALTER COLUMN organism_id SET DEFAULT nextval('public.organism_organism_id_seq'::regclass);


--
-- Name: organism_dbxref organism_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organism_dbxref ALTER COLUMN organism_dbxref_id SET DEFAULT nextval('public.organism_dbxref_organism_dbxref_id_seq'::regclass);


--
-- Name: organismprop organismprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organismprop ALTER COLUMN organismprop_id SET DEFAULT nextval('public.organismprop_organismprop_id_seq'::regclass);


--
-- Name: phendesc phendesc_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phendesc ALTER COLUMN phendesc_id SET DEFAULT nextval('public.phendesc_phendesc_id_seq'::regclass);


--
-- Name: phenotype phenotype_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype ALTER COLUMN phenotype_id SET DEFAULT nextval('public.phenotype_phenotype_id_seq'::regclass);


--
-- Name: phenotype_comparison phenotype_comparison_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison ALTER COLUMN phenotype_comparison_id SET DEFAULT nextval('public.phenotype_comparison_phenotype_comparison_id_seq'::regclass);


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm ALTER COLUMN phenotype_comparison_cvterm_id SET DEFAULT nextval('public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq'::regclass);


--
-- Name: phenotype_cvterm phenotype_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_cvterm ALTER COLUMN phenotype_cvterm_id SET DEFAULT nextval('public.phenotype_cvterm_phenotype_cvterm_id_seq'::regclass);


--
-- Name: phenstatement phenstatement_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenstatement ALTER COLUMN phenstatement_id SET DEFAULT nextval('public.phenstatement_phenstatement_id_seq'::regclass);


--
-- Name: phylonode phylonode_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode ALTER COLUMN phylonode_id SET DEFAULT nextval('public.phylonode_phylonode_id_seq'::regclass);


--
-- Name: phylonode_dbxref phylonode_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_dbxref ALTER COLUMN phylonode_dbxref_id SET DEFAULT nextval('public.phylonode_dbxref_phylonode_dbxref_id_seq'::regclass);


--
-- Name: phylonode_organism phylonode_organism_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_organism ALTER COLUMN phylonode_organism_id SET DEFAULT nextval('public.phylonode_organism_phylonode_organism_id_seq'::regclass);


--
-- Name: phylonode_pub phylonode_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_pub ALTER COLUMN phylonode_pub_id SET DEFAULT nextval('public.phylonode_pub_phylonode_pub_id_seq'::regclass);


--
-- Name: phylonode_relationship phylonode_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_relationship ALTER COLUMN phylonode_relationship_id SET DEFAULT nextval('public.phylonode_relationship_phylonode_relationship_id_seq'::regclass);


--
-- Name: phylonodeprop phylonodeprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonodeprop ALTER COLUMN phylonodeprop_id SET DEFAULT nextval('public.phylonodeprop_phylonodeprop_id_seq'::regclass);


--
-- Name: phylotree phylotree_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree ALTER COLUMN phylotree_id SET DEFAULT nextval('public.phylotree_phylotree_id_seq'::regclass);


--
-- Name: phylotree_pub phylotree_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree_pub ALTER COLUMN phylotree_pub_id SET DEFAULT nextval('public.phylotree_pub_phylotree_pub_id_seq'::regclass);


--
-- Name: project project_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project ALTER COLUMN project_id SET DEFAULT nextval('public.project_project_id_seq'::regclass);


--
-- Name: project_contact project_contact_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_contact ALTER COLUMN project_contact_id SET DEFAULT nextval('public.project_contact_project_contact_id_seq'::regclass);


--
-- Name: project_pub project_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_pub ALTER COLUMN project_pub_id SET DEFAULT nextval('public.project_pub_project_pub_id_seq'::regclass);


--
-- Name: project_relationship project_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_relationship ALTER COLUMN project_relationship_id SET DEFAULT nextval('public.project_relationship_project_relationship_id_seq'::regclass);


--
-- Name: projectprop projectprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.projectprop ALTER COLUMN projectprop_id SET DEFAULT nextval('public.projectprop_projectprop_id_seq'::regclass);


--
-- Name: protocol protocol_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocol ALTER COLUMN protocol_id SET DEFAULT nextval('public.protocol_protocol_id_seq'::regclass);


--
-- Name: protocolparam protocolparam_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocolparam ALTER COLUMN protocolparam_id SET DEFAULT nextval('public.protocolparam_protocolparam_id_seq'::regclass);


--
-- Name: pub pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub ALTER COLUMN pub_id SET DEFAULT nextval('public.pub_pub_id_seq'::regclass);


--
-- Name: pub_dbxref pub_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_dbxref ALTER COLUMN pub_dbxref_id SET DEFAULT nextval('public.pub_dbxref_pub_dbxref_id_seq'::regclass);


--
-- Name: pub_relationship pub_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_relationship ALTER COLUMN pub_relationship_id SET DEFAULT nextval('public.pub_relationship_pub_relationship_id_seq'::regclass);


--
-- Name: pubauthor pubauthor_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubauthor ALTER COLUMN pubauthor_id SET DEFAULT nextval('public.pubauthor_pubauthor_id_seq'::regclass);


--
-- Name: pubprop pubprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubprop ALTER COLUMN pubprop_id SET DEFAULT nextval('public.pubprop_pubprop_id_seq'::regclass);


--
-- Name: quantification quantification_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification ALTER COLUMN quantification_id SET DEFAULT nextval('public.quantification_quantification_id_seq'::regclass);


--
-- Name: quantification_relationship quantification_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification_relationship ALTER COLUMN quantification_relationship_id SET DEFAULT nextval('public.quantification_relationship_quantification_relationship_id_seq'::regclass);


--
-- Name: quantificationprop quantificationprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantificationprop ALTER COLUMN quantificationprop_id SET DEFAULT nextval('public.quantificationprop_quantificationprop_id_seq'::regclass);


--
-- Name: stock stock_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock ALTER COLUMN stock_id SET DEFAULT nextval('public.stock_stock_id_seq'::regclass);


--
-- Name: stock_cvterm stock_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvterm ALTER COLUMN stock_cvterm_id SET DEFAULT nextval('public.stock_cvterm_stock_cvterm_id_seq'::regclass);


--
-- Name: stock_cvtermprop stock_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvtermprop ALTER COLUMN stock_cvtermprop_id SET DEFAULT nextval('public.stock_cvtermprop_stock_cvtermprop_id_seq'::regclass);


--
-- Name: stock_dbxref stock_dbxref_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxref ALTER COLUMN stock_dbxref_id SET DEFAULT nextval('public.stock_dbxref_stock_dbxref_id_seq'::regclass);


--
-- Name: stock_dbxrefprop stock_dbxrefprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxrefprop ALTER COLUMN stock_dbxrefprop_id SET DEFAULT nextval('public.stock_dbxrefprop_stock_dbxrefprop_id_seq'::regclass);


--
-- Name: stock_genotype stock_genotype_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_genotype ALTER COLUMN stock_genotype_id SET DEFAULT nextval('public.stock_genotype_stock_genotype_id_seq'::regclass);


--
-- Name: stock_pub stock_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_pub ALTER COLUMN stock_pub_id SET DEFAULT nextval('public.stock_pub_stock_pub_id_seq'::regclass);


--
-- Name: stock_relationship stock_relationship_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship ALTER COLUMN stock_relationship_id SET DEFAULT nextval('public.stock_relationship_stock_relationship_id_seq'::regclass);


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_cvterm ALTER COLUMN stock_relationship_cvterm_id SET DEFAULT nextval('public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq'::regclass);


--
-- Name: stock_relationship_pub stock_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_pub ALTER COLUMN stock_relationship_pub_id SET DEFAULT nextval('public.stock_relationship_pub_stock_relationship_pub_id_seq'::regclass);


--
-- Name: stockcollection stockcollection_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection ALTER COLUMN stockcollection_id SET DEFAULT nextval('public.stockcollection_stockcollection_id_seq'::regclass);


--
-- Name: stockcollection_stock stockcollection_stock_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection_stock ALTER COLUMN stockcollection_stock_id SET DEFAULT nextval('public.stockcollection_stock_stockcollection_stock_id_seq'::regclass);


--
-- Name: stockcollectionprop stockcollectionprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollectionprop ALTER COLUMN stockcollectionprop_id SET DEFAULT nextval('public.stockcollectionprop_stockcollectionprop_id_seq'::regclass);


--
-- Name: stockprop stockprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop ALTER COLUMN stockprop_id SET DEFAULT nextval('public.stockprop_stockprop_id_seq'::regclass);


--
-- Name: stockprop_pub stockprop_pub_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop_pub ALTER COLUMN stockprop_pub_id SET DEFAULT nextval('public.stockprop_pub_stockprop_pub_id_seq'::regclass);


--
-- Name: study study_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study ALTER COLUMN study_id SET DEFAULT nextval('public.study_study_id_seq'::regclass);


--
-- Name: study_assay study_assay_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study_assay ALTER COLUMN study_assay_id SET DEFAULT nextval('public.study_assay_study_assay_id_seq'::regclass);


--
-- Name: studydesign studydesign_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studydesign ALTER COLUMN studydesign_id SET DEFAULT nextval('public.studydesign_studydesign_id_seq'::regclass);


--
-- Name: studydesignprop studydesignprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studydesignprop ALTER COLUMN studydesignprop_id SET DEFAULT nextval('public.studydesignprop_studydesignprop_id_seq'::regclass);


--
-- Name: studyfactor studyfactor_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyfactor ALTER COLUMN studyfactor_id SET DEFAULT nextval('public.studyfactor_studyfactor_id_seq'::regclass);


--
-- Name: studyfactorvalue studyfactorvalue_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyfactorvalue ALTER COLUMN studyfactorvalue_id SET DEFAULT nextval('public.studyfactorvalue_studyfactorvalue_id_seq'::regclass);


--
-- Name: studyprop studyprop_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop ALTER COLUMN studyprop_id SET DEFAULT nextval('public.studyprop_studyprop_id_seq'::regclass);


--
-- Name: studyprop_feature studyprop_feature_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop_feature ALTER COLUMN studyprop_feature_id SET DEFAULT nextval('public.studyprop_feature_studyprop_feature_id_seq'::regclass);


--
-- Name: synonym synonym_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.synonym ALTER COLUMN synonym_id SET DEFAULT nextval('public.synonym_synonym_id_seq'::regclass);


--
-- Name: tableinfo tableinfo_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.tableinfo ALTER COLUMN tableinfo_id SET DEFAULT nextval('public.tableinfo_tableinfo_id_seq'::regclass);


--
-- Name: treatment treatment_id; Type: DEFAULT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.treatment ALTER COLUMN treatment_id SET DEFAULT nextval('public.treatment_treatment_id_seq'::regclass);


--
-- Name: sequence_cv_lookup_table sequence_cv_lookup_table_id; Type: DEFAULT; Schema: so; Owner: kmr44
--

ALTER TABLE ONLY so.sequence_cv_lookup_table ALTER COLUMN sequence_cv_lookup_table_id SET DEFAULT nextval('so.sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq'::regclass);


--
-- Data for Name: featuregroup; Type: TABLE DATA; Schema: frange; Owner: kmr44
--

COPY frange.featuregroup (featuregroup_id, subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root) FROM stdin;
\.


--
-- Data for Name: gencode; Type: TABLE DATA; Schema: genetic_code; Owner: kmr44
--

COPY genetic_code.gencode (gencode_id, organismstr) FROM stdin;
\.


--
-- Data for Name: gencode_codon_aa; Type: TABLE DATA; Schema: genetic_code; Owner: kmr44
--

COPY genetic_code.gencode_codon_aa (gencode_id, codon, aa) FROM stdin;
\.


--
-- Data for Name: gencode_startcodon; Type: TABLE DATA; Schema: genetic_code; Owner: kmr44
--

COPY genetic_code.gencode_startcodon (gencode_id, codon) FROM stdin;
\.


--
-- Data for Name: acquisition; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.acquisition (acquisition_id, assay_id, protocol_id, channel_id, acquisitiondate, name, uri) FROM stdin;
\.


--
-- Data for Name: acquisition_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.acquisition_relationship (acquisition_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Data for Name: acquisitionprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.acquisitionprop (acquisitionprop_id, acquisition_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: analysis; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.analysis (analysis_id, name, description, program, programversion, algorithm, sourcename, sourceversion, sourceuri, timeexecuted) FROM stdin;
\.


--
-- Data for Name: analysisfeature; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.analysisfeature (analysisfeature_id, feature_id, analysis_id, rawscore, normscore, significance, identity) FROM stdin;
\.


--
-- Data for Name: analysisfeatureprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.analysisfeatureprop (analysisfeatureprop_id, analysisfeature_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: analysisprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.analysisprop (analysisprop_id, analysis_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: arraydesign; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.arraydesign (arraydesign_id, manufacturer_id, platformtype_id, substratetype_id, protocol_id, dbxref_id, name, version, description, array_dimensions, element_dimensions, num_of_elements, num_array_columns, num_array_rows, num_grid_columns, num_grid_rows, num_sub_columns, num_sub_rows) FROM stdin;
\.


--
-- Data for Name: arraydesignprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.arraydesignprop (arraydesignprop_id, arraydesign_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: assay; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.assay (assay_id, arraydesign_id, protocol_id, assaydate, arrayidentifier, arraybatchidentifier, operator_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Data for Name: assay_biomaterial; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.assay_biomaterial (assay_biomaterial_id, assay_id, biomaterial_id, channel_id, rank) FROM stdin;
\.


--
-- Data for Name: assay_project; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.assay_project (assay_project_id, assay_id, project_id) FROM stdin;
\.


--
-- Data for Name: assayprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.assayprop (assayprop_id, assay_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: biomaterial; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.biomaterial (biomaterial_id, taxon_id, biosourceprovider_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Data for Name: biomaterial_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.biomaterial_dbxref (biomaterial_dbxref_id, biomaterial_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: biomaterial_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.biomaterial_relationship (biomaterial_relationship_id, subject_id, type_id, object_id) FROM stdin;
\.


--
-- Data for Name: biomaterial_treatment; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.biomaterial_treatment (biomaterial_treatment_id, biomaterial_id, treatment_id, unittype_id, value, rank) FROM stdin;
\.


--
-- Data for Name: biomaterialprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.biomaterialprop (biomaterialprop_id, biomaterial_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: cell_line; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line (cell_line_id, name, uniquename, organism_id, timeaccessioned, timelastmodified) FROM stdin;
\.


--
-- Data for Name: cell_line_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line_cvterm (cell_line_cvterm_id, cell_line_id, cvterm_id, pub_id, rank) FROM stdin;
\.


--
-- Data for Name: cell_line_cvtermprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line_cvtermprop (cell_line_cvtermprop_id, cell_line_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: cell_line_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line_dbxref (cell_line_dbxref_id, cell_line_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Data for Name: cell_line_feature; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line_feature (cell_line_feature_id, cell_line_id, feature_id, pub_id) FROM stdin;
\.


--
-- Data for Name: cell_line_library; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line_library (cell_line_library_id, cell_line_id, library_id, pub_id) FROM stdin;
\.


--
-- Data for Name: cell_line_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line_pub (cell_line_pub_id, cell_line_id, pub_id) FROM stdin;
\.


--
-- Data for Name: cell_line_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line_relationship (cell_line_relationship_id, subject_id, object_id, type_id) FROM stdin;
\.


--
-- Data for Name: cell_line_synonym; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_line_synonym (cell_line_synonym_id, cell_line_id, synonym_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Data for Name: cell_lineprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_lineprop (cell_lineprop_id, cell_line_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: cell_lineprop_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cell_lineprop_pub (cell_lineprop_pub_id, cell_lineprop_id, pub_id) FROM stdin;
\.


--
-- Data for Name: chadoprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.chadoprop (chadoprop_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: channel; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.channel (channel_id, name, definition) FROM stdin;
\.


--
-- Data for Name: contact; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.contact (contact_id, type_id, name, description) FROM stdin;
1	\N	Affymetrix	\N
2	\N	null	null
\.


--
-- Data for Name: contact_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.contact_relationship (contact_relationship_id, type_id, subject_id, object_id) FROM stdin;
\.


--
-- Data for Name: control; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.control (control_id, type_id, assay_id, tableinfo_id, row_id, name, value, rank) FROM stdin;
\.


--
-- Data for Name: cv; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cv (cv_id, name, definition) FROM stdin;
1	null	\N
5	autocreated	Terms that are automatically inserted by loading software
6	chado_properties	Terms that are used in the chadoprop table to describe the state of the database
7	synonym_type	\N
8	organism property types	\N
10	cv_property_type	\N
11	cvterm_property_type	\N
\.


--
-- Data for Name: cvprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cvprop (cvprop_id, cv_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cvterm (cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype) FROM stdin;
1	1	null	\N	1	0	0
2	1	computer file	\N	2	0	0
29	6	version	Chado schema version	29	0	0
31	7	exact	\N	31	0	0
32	7	narrow	\N	32	0	0
33	7	misnomer	\N	33	0	0
34	7	name	\N	34	0	0
35	7	interim	\N	35	0	0
36	7	systematic	\N	36	0	0
37	7	feature	\N	37	0	0
38	7	description	\N	38	0	0
39	7	alternate	\N	39	0	0
40	7	broad	\N	40	0	0
41	7	label	\N	41	0	0
42	7	related	\N	42	0	0
43	7	reserved_name	\N	43	0	0
44	7	obsolete_name	\N	44	0	0
46	8	taxon_id	\N	46	0	0
45	5	is_a	\N	45	0	1
48	10	cv_version	\N	47	0	0
49	11	replaced_by	\N	48	0	0
50	11	consider	\N	49	0	0
51	11	pombase_gene_id	\N	50	0	0
\.


--
-- Data for Name: cvterm_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cvterm_dbxref (cvterm_dbxref_id, cvterm_id, dbxref_id, is_for_definition) FROM stdin;
\.


--
-- Data for Name: cvterm_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cvterm_relationship (cvterm_relationship_id, type_id, subject_id, object_id) FROM stdin;
\.


--
-- Data for Name: cvtermpath; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cvtermpath (cvtermpath_id, type_id, subject_id, object_id, cv_id, pathdistance) FROM stdin;
\.


--
-- Data for Name: cvtermprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cvtermprop (cvtermprop_id, cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: cvtermsynonym; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.cvtermsynonym (cvtermsynonym_id, cvterm_id, synonym, type_id) FROM stdin;
\.


--
-- Data for Name: db; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.db (db_id, name, description, urlprefix, url) FROM stdin;
1	null	a fake database for local items	\N	\N
3	internal	\N	\N	\N
\.


--
-- Data for Name: dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.dbxref (dbxref_id, db_id, accession, version, description) FROM stdin;
1	1	local:null		\N
2	1	local:computer file		\N
29	1	chado_properties:version		\N
31	3	exact		\N
32	3	narrow		\N
33	3	misnomer		\N
34	3	name		\N
35	3	interim		\N
36	3	systematic		\N
37	3	feature		\N
38	3	description		\N
39	3	alternate		\N
40	3	broad		\N
41	3	label		\N
42	3	related		\N
43	3	reserved_name		\N
44	3	obsolete_name		\N
45	3	is_a		\N
46	1	NCBI Taxonomy id		\N
47	3	cv_version		\N
48	3	replaced_by		\N
49	3	consider		\N
50	3	pombase_gene_id		\N
\.


--
-- Data for Name: dbxrefprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.dbxrefprop (dbxrefprop_id, dbxref_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: eimage; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.eimage (eimage_id, eimage_data, eimage_type, image_uri) FROM stdin;
\.


--
-- Data for Name: element; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.element (element_id, feature_id, arraydesign_id, type_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: element_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.element_relationship (element_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Data for Name: elementresult; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.elementresult (elementresult_id, element_id, quantification_id, signal) FROM stdin;
\.


--
-- Data for Name: elementresult_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.elementresult_relationship (elementresult_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Data for Name: environment; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.environment (environment_id, uniquename, description) FROM stdin;
\.


--
-- Data for Name: environment_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.environment_cvterm (environment_cvterm_id, environment_id, cvterm_id) FROM stdin;
\.


--
-- Data for Name: expression; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.expression (expression_id, uniquename, md5checksum, description) FROM stdin;
\.


--
-- Data for Name: expression_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.expression_cvterm (expression_cvterm_id, expression_id, cvterm_id, rank, cvterm_type_id) FROM stdin;
\.


--
-- Data for Name: expression_cvtermprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.expression_cvtermprop (expression_cvtermprop_id, expression_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: expression_image; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.expression_image (expression_image_id, expression_id, eimage_id) FROM stdin;
\.


--
-- Data for Name: expression_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.expression_pub (expression_pub_id, expression_id, pub_id) FROM stdin;
\.


--
-- Data for Name: expressionprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.expressionprop (expressionprop_id, expression_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature (feature_id, dbxref_id, organism_id, name, uniquename, residues, seqlen, md5checksum, type_id, is_analysis, is_obsolete, timeaccessioned, timelastmodified) FROM stdin;
\.


--
-- Data for Name: feature_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_cvterm (feature_cvterm_id, feature_id, cvterm_id, pub_id, is_not, rank) FROM stdin;
\.


--
-- Data for Name: feature_cvterm_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_cvterm_dbxref (feature_cvterm_dbxref_id, feature_cvterm_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: feature_cvterm_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_cvterm_pub (feature_cvterm_pub_id, feature_cvterm_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_cvtermprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_cvtermprop (feature_cvtermprop_id, feature_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_dbxref (feature_dbxref_id, feature_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Data for Name: feature_expression; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_expression (feature_expression_id, expression_id, feature_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_expressionprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_expressionprop (feature_expressionprop_id, feature_expression_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature_genotype; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_genotype (feature_genotype_id, feature_id, genotype_id, chromosome_id, rank, cgroup, cvterm_id) FROM stdin;
\.


--
-- Data for Name: feature_phenotype; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_phenotype (feature_phenotype_id, feature_id, phenotype_id) FROM stdin;
\.


--
-- Data for Name: feature_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_pub (feature_pub_id, feature_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_pubprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_pubprop (feature_pubprop_id, feature_pub_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_relationship (feature_relationship_id, subject_id, object_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature_relationship_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_relationship_pub (feature_relationship_pub_id, feature_relationship_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_relationshipprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_relationshipprop (feature_relationshipprop_id, feature_relationship_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature_relationshipprop_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_relationshipprop_pub (feature_relationshipprop_pub_id, feature_relationshipprop_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_synonym; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.feature_synonym (feature_synonym_id, synonym_id, feature_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Data for Name: featureloc; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.featureloc (featureloc_id, feature_id, srcfeature_id, fmin, is_fmin_partial, fmax, is_fmax_partial, strand, phase, residue_info, locgroup, rank) FROM stdin;
\.


--
-- Data for Name: featureloc_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.featureloc_pub (featureloc_pub_id, featureloc_id, pub_id) FROM stdin;
\.


--
-- Data for Name: featuremap; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.featuremap (featuremap_id, name, description, unittype_id) FROM stdin;
\.


--
-- Data for Name: featuremap_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.featuremap_pub (featuremap_pub_id, featuremap_id, pub_id) FROM stdin;
\.


--
-- Data for Name: featurepos; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.featurepos (featurepos_id, featuremap_id, feature_id, map_feature_id, mappos) FROM stdin;
\.


--
-- Data for Name: featureprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.featureprop (featureprop_id, feature_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: featureprop_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.featureprop_pub (featureprop_pub_id, featureprop_id, pub_id) FROM stdin;
\.


--
-- Data for Name: featurerange; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.featurerange (featurerange_id, featuremap_id, feature_id, leftstartf_id, leftendf_id, rightstartf_id, rightendf_id, rangestr) FROM stdin;
\.


--
-- Data for Name: genotype; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.genotype (genotype_id, name, uniquename, description, type_id) FROM stdin;
\.


--
-- Data for Name: genotypeprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.genotypeprop (genotypeprop_id, genotype_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: library; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.library (library_id, organism_id, name, uniquename, type_id, is_obsolete, timeaccessioned, timelastmodified) FROM stdin;
\.


--
-- Data for Name: library_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.library_cvterm (library_cvterm_id, library_id, cvterm_id, pub_id) FROM stdin;
\.


--
-- Data for Name: library_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.library_dbxref (library_dbxref_id, library_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Data for Name: library_feature; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.library_feature (library_feature_id, library_id, feature_id) FROM stdin;
\.


--
-- Data for Name: library_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.library_pub (library_pub_id, library_id, pub_id) FROM stdin;
\.


--
-- Data for Name: library_synonym; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.library_synonym (library_synonym_id, synonym_id, library_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Data for Name: libraryprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.libraryprop (libraryprop_id, library_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: libraryprop_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.libraryprop_pub (libraryprop_pub_id, libraryprop_id, pub_id) FROM stdin;
\.


--
-- Data for Name: magedocumentation; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.magedocumentation (magedocumentation_id, mageml_id, tableinfo_id, row_id, mageidentifier) FROM stdin;
\.


--
-- Data for Name: mageml; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.mageml (mageml_id, mage_package, mage_ml) FROM stdin;
\.


--
-- Data for Name: materialized_view; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.materialized_view (materialized_view_id, last_update, refresh_time, name, mv_schema, mv_table, mv_specs, indexed, query, special_index) FROM stdin;
\.


--
-- Data for Name: nd_experiment; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment (nd_experiment_id, nd_geolocation_id, type_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_contact; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_contact (nd_experiment_contact_id, nd_experiment_id, contact_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_dbxref (nd_experiment_dbxref_id, nd_experiment_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_genotype; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_genotype (nd_experiment_genotype_id, nd_experiment_id, genotype_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_phenotype; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_phenotype (nd_experiment_phenotype_id, nd_experiment_id, phenotype_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_project; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_project (nd_experiment_project_id, project_id, nd_experiment_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_protocol; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_protocol (nd_experiment_protocol_id, nd_experiment_id, nd_protocol_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_pub (nd_experiment_pub_id, nd_experiment_id, pub_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_stock; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_stock (nd_experiment_stock_id, nd_experiment_id, stock_id, type_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_stock_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_stock_dbxref (nd_experiment_stock_dbxref_id, nd_experiment_stock_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_stockprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experiment_stockprop (nd_experiment_stockprop_id, nd_experiment_stock_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: nd_experimentprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_experimentprop (nd_experimentprop_id, nd_experiment_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: nd_geolocation; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_geolocation (nd_geolocation_id, description, latitude, longitude, geodetic_datum, altitude) FROM stdin;
\.


--
-- Data for Name: nd_geolocationprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_geolocationprop (nd_geolocationprop_id, nd_geolocation_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: nd_protocol; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_protocol (nd_protocol_id, name, type_id) FROM stdin;
\.


--
-- Data for Name: nd_protocol_reagent; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_protocol_reagent (nd_protocol_reagent_id, nd_protocol_id, reagent_id, type_id) FROM stdin;
\.


--
-- Data for Name: nd_protocolprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_protocolprop (nd_protocolprop_id, nd_protocol_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: nd_reagent; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_reagent (nd_reagent_id, name, type_id, feature_id) FROM stdin;
\.


--
-- Data for Name: nd_reagent_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_reagent_relationship (nd_reagent_relationship_id, subject_reagent_id, object_reagent_id, type_id) FROM stdin;
\.


--
-- Data for Name: nd_reagentprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.nd_reagentprop (nd_reagentprop_id, nd_reagent_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: organism; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.organism (organism_id, abbreviation, genus, species, common_name, comment) FROM stdin;
\.


--
-- Data for Name: organism_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.organism_dbxref (organism_dbxref_id, organism_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: organismprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.organismprop (organismprop_id, organism_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: phendesc; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phendesc (phendesc_id, genotype_id, environment_id, description, type_id, pub_id) FROM stdin;
\.


--
-- Data for Name: phenotype; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phenotype (phenotype_id, uniquename, name, observable_id, attr_id, value, cvalue_id, assay_id) FROM stdin;
\.


--
-- Data for Name: phenotype_comparison; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phenotype_comparison (phenotype_comparison_id, genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, phenotype2_id, pub_id, organism_id) FROM stdin;
\.


--
-- Data for Name: phenotype_comparison_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phenotype_comparison_cvterm (phenotype_comparison_cvterm_id, phenotype_comparison_id, cvterm_id, pub_id, rank) FROM stdin;
\.


--
-- Data for Name: phenotype_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phenotype_cvterm (phenotype_cvterm_id, phenotype_id, cvterm_id, rank) FROM stdin;
\.


--
-- Data for Name: phenstatement; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phenstatement (phenstatement_id, genotype_id, environment_id, phenotype_id, type_id, pub_id) FROM stdin;
\.


--
-- Data for Name: phylonode; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phylonode (phylonode_id, phylotree_id, parent_phylonode_id, left_idx, right_idx, type_id, feature_id, label, distance) FROM stdin;
\.


--
-- Data for Name: phylonode_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phylonode_dbxref (phylonode_dbxref_id, phylonode_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: phylonode_organism; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phylonode_organism (phylonode_organism_id, phylonode_id, organism_id) FROM stdin;
\.


--
-- Data for Name: phylonode_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phylonode_pub (phylonode_pub_id, phylonode_id, pub_id) FROM stdin;
\.


--
-- Data for Name: phylonode_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phylonode_relationship (phylonode_relationship_id, subject_id, object_id, type_id, rank, phylotree_id) FROM stdin;
\.


--
-- Data for Name: phylonodeprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phylonodeprop (phylonodeprop_id, phylonode_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: phylotree; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phylotree (phylotree_id, dbxref_id, name, type_id, analysis_id, comment) FROM stdin;
\.


--
-- Data for Name: phylotree_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.phylotree_pub (phylotree_pub_id, phylotree_id, pub_id) FROM stdin;
\.


--
-- Data for Name: project; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.project (project_id, name, description) FROM stdin;
\.


--
-- Data for Name: project_contact; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.project_contact (project_contact_id, project_id, contact_id) FROM stdin;
\.


--
-- Data for Name: project_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.project_pub (project_pub_id, project_id, pub_id) FROM stdin;
\.


--
-- Data for Name: project_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.project_relationship (project_relationship_id, subject_project_id, object_project_id, type_id) FROM stdin;
\.


--
-- Data for Name: projectprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.projectprop (projectprop_id, project_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: protocol; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.protocol (protocol_id, type_id, pub_id, dbxref_id, name, uri, protocoldescription, hardwaredescription, softwaredescription) FROM stdin;
\.


--
-- Data for Name: protocolparam; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.protocolparam (protocolparam_id, protocol_id, name, datatype_id, unittype_id, value, rank) FROM stdin;
\.


--
-- Data for Name: pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.pub (pub_id, title, volumetitle, volume, series_name, issue, pyear, pages, miniref, uniquename, type_id, is_obsolete, publisher, pubplace) FROM stdin;
1	\N	\N	\N	\N	\N	\N	\N	null	null	1	f	\N	\N
\.


--
-- Data for Name: pub_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.pub_dbxref (pub_dbxref_id, pub_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Data for Name: pub_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.pub_relationship (pub_relationship_id, subject_id, object_id, type_id) FROM stdin;
\.


--
-- Data for Name: pubauthor; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.pubauthor (pubauthor_id, pub_id, rank, editor, surname, givennames, suffix) FROM stdin;
\.


--
-- Data for Name: pubprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.pubprop (pubprop_id, pub_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: quantification; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.quantification (quantification_id, acquisition_id, operator_id, protocol_id, analysis_id, quantificationdate, name, uri) FROM stdin;
\.


--
-- Data for Name: quantification_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.quantification_relationship (quantification_relationship_id, subject_id, type_id, object_id) FROM stdin;
\.


--
-- Data for Name: quantificationprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.quantificationprop (quantificationprop_id, quantification_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stock; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock (stock_id, dbxref_id, organism_id, name, uniquename, description, type_id, is_obsolete) FROM stdin;
\.


--
-- Data for Name: stock_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_cvterm (stock_cvterm_id, stock_id, cvterm_id, pub_id, is_not, rank) FROM stdin;
\.


--
-- Data for Name: stock_cvtermprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_cvtermprop (stock_cvtermprop_id, stock_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stock_dbxref; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_dbxref (stock_dbxref_id, stock_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Data for Name: stock_dbxrefprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_dbxrefprop (stock_dbxrefprop_id, stock_dbxref_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stock_genotype; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_genotype (stock_genotype_id, stock_id, genotype_id) FROM stdin;
\.


--
-- Data for Name: stock_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_pub (stock_pub_id, stock_id, pub_id) FROM stdin;
\.


--
-- Data for Name: stock_relationship; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_relationship (stock_relationship_id, subject_id, object_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stock_relationship_cvterm; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_relationship_cvterm (stock_relationship_cvterm_id, stock_relationship_id, cvterm_id, pub_id) FROM stdin;
\.


--
-- Data for Name: stock_relationship_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stock_relationship_pub (stock_relationship_pub_id, stock_relationship_id, pub_id) FROM stdin;
\.


--
-- Data for Name: stockcollection; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stockcollection (stockcollection_id, type_id, contact_id, name, uniquename) FROM stdin;
\.


--
-- Data for Name: stockcollection_stock; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stockcollection_stock (stockcollection_stock_id, stockcollection_id, stock_id) FROM stdin;
\.


--
-- Data for Name: stockcollectionprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stockcollectionprop (stockcollectionprop_id, stockcollection_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stockprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stockprop (stockprop_id, stock_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stockprop_pub; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.stockprop_pub (stockprop_pub_id, stockprop_id, pub_id) FROM stdin;
\.


--
-- Data for Name: study; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.study (study_id, contact_id, pub_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Data for Name: study_assay; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.study_assay (study_assay_id, study_id, assay_id) FROM stdin;
\.


--
-- Data for Name: studydesign; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.studydesign (studydesign_id, study_id, description) FROM stdin;
\.


--
-- Data for Name: studydesignprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.studydesignprop (studydesignprop_id, studydesign_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: studyfactor; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.studyfactor (studyfactor_id, studydesign_id, type_id, name, description) FROM stdin;
\.


--
-- Data for Name: studyfactorvalue; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.studyfactorvalue (studyfactorvalue_id, studyfactor_id, assay_id, factorvalue, name, rank) FROM stdin;
\.


--
-- Data for Name: studyprop; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.studyprop (studyprop_id, study_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: studyprop_feature; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.studyprop_feature (studyprop_feature_id, studyprop_id, feature_id, type_id) FROM stdin;
\.


--
-- Data for Name: synonym; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.synonym (synonym_id, name, type_id, synonym_sgml) FROM stdin;
\.


--
-- Data for Name: tableinfo; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.tableinfo (tableinfo_id, name, primary_key_column, is_view, view_on_table_id, superclass_table_id, is_updateable, modification_date) FROM stdin;
\.


--
-- Data for Name: treatment; Type: TABLE DATA; Schema: public; Owner: kmr44
--

COPY public.treatment (treatment_id, rank, biomaterial_id, type_id, protocol_id, name) FROM stdin;
\.


--
-- Data for Name: sequence_cv_lookup_table; Type: TABLE DATA; Schema: so; Owner: kmr44
--

COPY so.sequence_cv_lookup_table (sequence_cv_lookup_table_id, original_cvterm_name, relation_name) FROM stdin;
1	transcription_variant	transcription_variant
2	helitron	helitron
3	cleaved_initiator_methionine	cleaved_initiator_methionine
4	epoxyqueuosine	epoxyqueuosine
5	u4atac_snrna	u4atac_snrna
6	kinetoplast	kinetoplast
7	elongated_out_of_frame_polypeptide_n_terminal	elongated_out_of_frame_polypeptide_n_terminal
8	shadow_enhancer	shadow_enhancer
9	engineered	engineered
10	rna_polymerase_ii_tata_box	rna_polymerase_ii_tata_box
11	seven_aminomethyl_seven_deazaguanosine	seven_aminomethyl_seven_deazaguanosine
12	sequence_motif	sequence_motif
13	low_complexity	low_complexity
14	est_match	est_match
15	v_nonamer	v_nonamer
16	d_dj_j_c_cluster	d_dj_j_c_cluster
17	rrna_21s	rrna_21s
18	bound_by_factor	bound_by_factor
19	five_carboxymethyluridine	five_carboxymethyluridine
20	dinucleotide_repeat_microsatellite_feature	dinucleotide_repeat_microsatellite_feature
21	two_methylthio_n6_methyladenosine	two_methylthio_n6_methyladenosine
22	trans_spliced_mrna	trans_spliced_mrna
23	g_to_c_transversion	g_to_c_transversion
24	heptamer_of_recombination_feature_of_vertebrate_immune_system_gene	heptamer_of_recombination_feature_of_vertebrate_im_sys_gene
25	genotype	so_genotype
26	cloned_region	cloned_region
27	tmrna_coding_piece	tmrna_coding_piece
28	rna_6s	rna_6s
29	x_element	x_element
30	minicircle	minicircle
31	grna_encoding	grna_encoding
32	endonuclease_spliced_intron	endonuclease_spliced_intron
33	insertional_duplication	insertional_duplication
34	databank_entry	databank_entry
35	glycine	glycine
36	variant_phenotype	variant_phenotype
37	v_cluster	v_cluster
38	sl12_acceptor_site	sl12_acceptor_site
39	polypeptide_nickel_ion_contact_site	polypeptide_nickel_ion_contact_site
40	circular_single_stranded_rna_chromosome	circular_single_stranded_rna_chromosome
41	wc_base_pair	wc_base_pair
42	pcr_product	pcr_product
43	3_prime_utr_variant	three_prime_utr_variant
44	three_three_amino_three_carboxypropyl_uridine	three_three_amino_three_carboxypropyl_uridine
45	site_specific_recombination_target_region	site_specific_recombination_target_region
46	gene_with_polycistronic_transcript	gene_with_polycistronic_transcript
47	rescue	rescue
48	nuclease_hypersensitive_site	nuclease_hypersensitive_site
49	upstream_gene_variant	upstream_gene_variant
50	mirna_loop	mirna_loop
51	double_stranded_cdna	double_stranded_cdna
52	polypeptide_post_translational_processing_variant	polypeptide_post_translational_processing_variant
53	2kb_upstream_variant	twokb_upstream_variant
54	supported_by_domain_match	supported_by_domain_match
55	one_methylpseudouridine	one_methylpseudouridine
56	n_terminal_region	n_terminal_region
57	blunt_end_restriction_enzyme_cleavage_site	blunt_end_restriction_enzyme_cleavage_site
58	experimental_result_region	experimental_result_region
59	methionine_trna_primary_transcript	methionine_trna_primary_transcript
60	utr	utr
61	non_terminal_residue	non_terminal_residue
62	member_of_regulon	member_of_regulon
63	threonine_trna_primary_transcript	thr_trna_primary_transcript
64	cds_supported_by_sequence_similarity_data	cds_supported_by_sequence_similarity_data
65	polypeptide_structural_region	polypeptide_structural_region
66	trna_gene	trna_gene
67	polypeptide_tungsten_ion_contact_site	polypeptide_tungsten_ion_contact_site
68	beta_bulge_loop_six	beta_bulge_loop_six
69	d_dj_c_cluster	d_dj_c_cluster
70	sequence_location	sequence_location
71	polypeptide_nest_right_left_motif	polypeptide_nest_right_left_motif
72	encodes_overlapping_polypeptides_different_start_and_stop	encodes_overlapping_polypeptides_different_start_and_stop
73	leucoplast_gene	leucoplast_gene
74	y_rna	y_rna
75	trans_spliced_transcript	trans_spliced_transcript
76	inverted	inverted
77	splicing_regulatory_region	splicing_regulatory_region
78	branch_site	branch_site
79	beta_bulge_loop_five	beta_bulge_loop_five
80	chromosome_breakpoint	chromosome_breakpoint
81	sequence_uncertainty	sequence_uncertainty
82	n6_methyl_n6_threonylcarbamoyladenosine	n6_methyl_n6_threonylcarbamoyladenosine
83	gene_with_mrna_with_frameshift	gene_with_mrna_with_frameshift
84	compositionally_biased_region_of_peptide	compositionally_biased_region_of_peptide
85	vj_j_c_cluster	vj_j_c_cluster
86	pirna	pirna
87	reverse_hoogsteen_base_pair	reverse_hoogsteen_base_pair
88	tryptophanyl_trna	tryptophanyl_trna
89	polya_primed_cdna_clone	polya_primed_cdna_clone
90	leucoplast_chromosome	leucoplast_chromosome
91	status	status
92	ltr_retrotransposon	ltr_retrotransposon
93	rnase_p_rna	rnase_p_rna
94	conjugative_transposon	conjugative_transposon
95	improved_high_quality_draft	improved_high_quality_draft
96	copy_number_gain	copy_number_gain
97	linkage_group	linkage_group
98	gene_with_trans_spliced_transcript	gene_with_trans_spliced_transcript
99	sl8_acceptor_site	sl8_acceptor_site
100	peptide_coil	peptide_coil
101	pyrrolysine_trna_primary_transcript	pyrrolysine_trna_primary_transcript
102	v_vj_c_cluster	v_vj_c_cluster
103	phage_sequence	phage_sequence
104	h3k79_methylation_site	h3k79_methylation_site
105	recoded	recoded
106	transposon_fragment	transposon_fragment
107	vj_c_cluster	vj_c_cluster
108	editing_domain	editing_domain
109	five_methylaminomethyluridine	five_methylaminomethyluridine
110	centromere_dna_element_ii	centromere_dna_element_ii
111	alteration_attribute	alteration_attribute
112	non_ltr_retrotransposon_polymeric_tract	non_ltr_retrotransposon_polymeric_tract
113	transversion	transversion
114	tryptophan	tryptophan
115	recursive_splice_site	recursive_splice_site
116	polypeptide_fusion	polypeptide_fusion
117	insulator_binding_site	insulator_binding_site
118	increased_polyadenylation_variant	increased_polyadenylation_variant
119	proline_trna_primary_transcript	proline_trna_primary_transcript
120	repeat_fragment	repeat_fragment
121	blocked_reading_frame	blocked_reading_frame
122	rrna_cleavage_snorna_primary_transcript	rrna_cleavage_snorna_primary_transcript
123	n6_isopentenyladenosine	n6_isopentenyladenosine
124	modified_l_arginine	modified_l_arginine
125	polypeptide_conserved_motif	polypeptide_conserved_motif
126	paracentric	paracentric
127	t3_rna_polymerase_promoter	t3_rna_polymerase_promoter
128	inversion_derived_bipartite_duplication	inversion_derived_bipartite_duplication
129	trans_splice_acceptor_site	trans_splice_acceptor_site
130	a_box_type_2	a_box_type_2
131	rre_rna	rre_rna
132	two_prime_o_ribosyladenosine_phosphate	two_prime_o_riboA_phosphate
133	pac_end	pac_end
134	extramembrane_polypeptide_region	extramembrane_polypeptide_region
135	copy_number_change	copy_number_change
136	intein	intein
137	endosomal_localization_signal	endosomal_localization_signal
138	twintron	twintron
139	scrna_primary_transcript	scrna_primary_transcript
140	five_carboxymethylaminomethyl_two_prime_o_methyluridine	five_carboxymethylaminomethyl_two_prime_o_methyluridine
141	somatic_variant	somatic_variant
142	duplication	duplication
143	tmrna_encoding	tmrna_encoding
144	polypeptide_cobalt_ion_contact_site	polypeptide_cobalt_ion_contact_site
145	flanked	flanked
146	inversion	inversion
147	ctg_start_codon	ctg_start_codon
148	tyrosine_trna_primary_transcript	tyrosine_trna_primary_transcript
149	eukaryotic_terminator	eukaryotic_terminator
150	frt_flanked	frt_flanked
151	spliceosomal_intron_region	spliceosomal_intron_region
152	coding_region_of_exon	coding_region_of_exon
153	cloned_cdna_insert	cloned_cdna_insert
154	decreased_transcription_rate_variant	decreased_transcription_rate_variant
155	v_vdj_c_cluster	v_vdj_c_cluster
156	rnase_p_rna_gene	rnase_p_rna_gene
157	translationally_regulated	translationally_regulated
158	histidyl_trna	histidyl_trna
159	sonicate_fragment	sonicate_fragment
160	gene_with_recoded_mrna	gene_with_recoded_mrna
161	two_prime_o_methyluridine	two_prime_o_methyluridine
162	cosmid	cosmid
163	silenced_by_rna_interference	silenced_by_rna_interference
164	non_conservative_missense_codon	non_conservative_missense_codon
165	snorna	snorna
166	mature_transcript	mature_transcript
167	pseudouridylation_guide_snorna	pseudouridylation_guide_snorna
168	c_gene	c_gene
169	processed_transcript	processed_transcript
170	floxed_gene	floxed_gene
171	spot_42_rna	spot_42_rna
172	cdna_clone	cdna_clone
173	cryptic_splice_site	cryptic_splice_site
174	pseudogenic_gene_segment	pseudogenic_gene_segment
175	three_prime_ltr	three_prime_ltr
176	group_ii_intron	group_ii_intron
177	rnase_mrp_rna_gene	rnase_mrp_rna_gene
178	structural_alteration	structural_alteration
179	pna_oligo	pna_oligo
180	insertion_sequence	insertion_sequence
181	junction	junction
182	paralogous	paralogous
183	tna	tna
184	five_isopentenylaminomethyl_two_thiouridine	five_isopentenylaminomethyl_two_thiouridine
185	nested_tandem_repeat	nested_tandem_repeat
186	minus_1_frameshift	minus_1_frameshift
187	non_canonical_three_prime_splice_site	non_canonical_three_prime_splice_site
188	gene_with_non_canonical_start_codon	gene_with_non_canonical_start_codon
189	pseudogenic_rrna	pseudogenic_rrna
190	serine_threonine_turn	serine_threonine_turn
191	j_gene	j_gene
192	h3k27_trimethylation_site	h3k27_trimethylation_site
193	strna_primary_transcript	strna_primary_transcript
194	internal_eliminated_sequence	internal_eliminated_sequence
195	allelically_excluded_gene	allelically_excluded_gene
196	qtl	qtl
197	three_prime_est	three_prime_est
198	bred_motif	bred_motif
199	reverse	reverse
200	mirna_encoding	mirna_encoding
201	n2_n2_2_prime_o_trimethylguanosine	n2_n2_2_prime_o_trimethylguanosine
202	translational_product_function_variant	translational_product_function_variant
203	encodes_alternate_transcription_start_sites	encodes_alternate_transcription_start_sites
204	gene_array	gene_array
205	tetranucleotide_repeat_microsatellite_feature	tetranuc_repeat_microsat
206	five_aminomethyl_two_thiouridine	five_aminomethyl_two_thiouridine
524	point_mutation	point_mutation
207	monocistronic_primary_transcript	monocistronic_primary_transcript
208	snv	snv
209	direct	direct
210	mobile_genetic_element	mobile_genetic_element
211	polypeptide_ligand_contact	polypeptide_ligand_contact
212	biomaterial_region	biomaterial_region
213	transposable_element_flanking_region	transposable_element_flanking_region
214	symmetric_rna_internal_loop	symmetric_rna_internal_loop
215	mrna_with_plus_1_frameshift	mrna_with_plus_1_frameshift
216	transcriptionally_regulated	transcriptionally_regulated
217	five_prime_intron	five_prime_intron
218	vertebrate_immune_system_gene_recombination_feature	vertebrate_immune_system_gene_recombination_feature
219	five_carboxyhydroxymethyl_uridine_methyl_ester	five_carboxyhydroxymethyl_uridine_methyl_ester
220	chromosomal_transposition	chromosomal_transposition
221	proplastid_gene	proplastid_gene
222	serine_trna_primary_transcript	serine_trna_primary_transcript
223	attp_site	attp_site
224	antisense	antisense
225	terminal_inverted_repeat_element	terminal_inverted_repeat_element
226	coiled_coil	coiled_coil
227	v_vdj_cluster	v_vdj_cluster
228	edited_transcript_by_a_to_i_substitution	edited_transcript_by_a_to_i_substitution
229	protein_coding_primary_transcript	protein_coding_primary_transcript
230	mite	mite
231	cryptic_splice_site_variant	cryptic_splice_site_variant
232	insertion	insertion
233	secis_element	secis_element
234	maxicircle	maxicircle
235	tss	tss
236	pedigree_specific_variant	pedigree_specific_variant
237	cysteine	cysteine
238	ribothymidine	ribothymidine
239	non_adjacent_residues	non_adjacent_residues
240	histone_modification	histone_modification
241	internal_ribosome_entry_site	internal_ribosome_entry_site
242	outron	outron
243	polypeptide_repeat	polypeptide_repeat
244	clone_insert_start	clone_insert_start
245	attr_site	attr_site
246	dmv3_motif	dmv3_motif
247	capped_mrna	capped_mrna
248	sequence_rearrangement_feature	sequence_rearrangement_feature
249	apicoplast_chromosome	apicoplast_chromosome
250	beta_turn_type_six_a_two	beta_turn_type_six_a_two
251	invalidated	invalidated
252	valine	valine
253	translationally_regulated_gene	translationally_regulated_gene
254	amino_acid_insertion	amino_acid_insertion
255	promoter_targeting_sequence	promoter_targeting_sequence
256	polinton	polinton
257	engineered_tag	engineered_tag
258	non_coding_exon_variant	non_coding_exon_variant
259	five_methylcytidine	five_methylcytidine
260	sl5_acceptor_site	sl5_acceptor_site
261	positively_autoregulated	positively_autoregulated
262	pseudouridine	pseudouridine
263	amplification_origin	amplification_origin
264	unoriented_insertional_duplication	unorient_insert_dup
265	transcriptionally_constitutive	transcriptionally_constitutive
266	extrachromosomal_mobile_genetic_element	extrachromosomal_mobile_genetic_element
267	variant_origin	variant_origin
268	utr_region	utr_region
269	mirna	mirna
270	tyrosine	tyrosine
271	inr1_motif	inr1_motif
272	h2b_ubiquitination_site	h2b_ubiquitination_site
273	n6_acetyladenosine	n6_acetyladenosine
274	cis_splice_site	cis_splice_site
275	floxed	floxed
276	beta_turn_right_handed_type_two	beta_turn_right_handed_type_two
277	utr_variant	utr_variant
278	c_terminal_region	c_terminal_region
279	transcription_regulatory_region	transcription_regulatory_region
280	modified_l_leucine	modified_l_leucine
281	five_prime_ltr_component	five_prime_ltr_component
282	histone_acylation_region	histone_acylation_region
283	vdj_c_cluster	vdj_c_cluster
284	chromosome_part	chromosome_part
285	transcriptional_cis_regulatory_region	transcriptional_cis_regulatory_region
286	phenylalanyl_trna	phenylalanyl_trna
287	insertion_site	insertion_site
288	gc_rich_promoter_region	gc_rich_promoter_region
289	overlapping_est_set	overlapping_est_set
290	asx_turn_right_handed_type_two	asx_turn_right_handed_type_two
291	anticodon_loop	anticodon_loop
292	dmv5_motif	dmv5_motif
293	sl1_acceptor_site	sl1_acceptor_site
294	cds_region	cds_region
295	regulatory_region_variant	regulatory_region_variant
296	h3k9_dimethylation_site	h3k9_dimethylation_site
297	stop_gained	stop_gained
298	telomerase_rna_gene	telomerase_rna_gene
299	v_dj_j_c_cluster	v_dj_j_c_cluster
300	engineered_insert	engineered_insert
301	recombinationally_inverted_gene	recombinationally_inverted_gene
302	microarray_oligo	microarray_oligo
303	cassette_array_member	cassette_array_member
304	plus_1_frameshift_variant	plus_1_frameshift_variant
305	u12_snrna	u12_snrna
306	supported_by_est_or_cdna	supported_by_est_or_cdna
307	minus_10_signal	minus_10_signal
308	clone_insert_end	clone_insert_end
309	inr_motif	inr_motif
310	three_prime_stem_loop_structure	three_prime_stem_loop_structure
311	rflp_fragment	rflp_fragment
312	phage_rna_polymerase_promoter	phage_rna_polymerase_promoter
313	pyrimidine_transition	pyrimidine_transition
525	pseudoknot	pseudoknot
314	intrinsically_unstructured_polypeptide_region	intrinsically_unstructured_polypeptide_region
315	n2_2_prime_o_dimethylguanosine	n2_2_prime_o_dimethylguanosine
316	exon_loss	exon_loss
317	archaeal_intron	archaeal_intron
318	lna	lna
319	exon_junction	exon_junction
320	t7_rna_polymerase_promoter	t7_rna_polymerase_promoter
321	inverted_interchromosomal_transposition	invert_inter_transposition
322	episome	episome
323	uninverted_insertional_duplication	uninvert_insert_dup
324	free	free
325	sequence_difference	sequence_difference
326	h4k5_acylation_site	h4k5_acylation_site
327	v_d_dj_c_cluster	v_d_dj_c_cluster
328	sequence_conflict	sequence_conflict
329	nmd_transcript_variant	nmd_transcript_variant
330	tiling_path_clone	tiling_path_clone
331	group_iii_intron	group_iii_intron
332	modified_glycine	modified_glycine
333	sequence_alteration	sequence_alteration
334	polyploid	polyploid
335	mathematically_defined_repeat	mathematically_defined_repeat
336	gene_silenced_by_dna_modification	gene_silenced_by_dna_modification
337	v_vj_j_cluster	v_vj_j_cluster
338	isoleucine_trna_primary_transcript	isoleucine_trna_primary_transcript
339	rrna_small_subunit_primary_transcript	rrna_small_subunit_primary_transcript
340	ltr_component	ltr_component
341	plus_2_framshift	plus_2_framshift
342	translational_product_structure_variant	translational_product_structure_variant
343	glutamic_acid_trna_primary_transcript	glutamic_acid_trna_primary_transcript
344	gene_rearranged_at_dna_level	gene_rearranged_at_dna_level
345	edited_transcript	edited_transcript
346	invalidated_by_partial_processing	invalidated_by_partial_processing
347	increased_transcript_stability_variant	increased_transcript_stability_variant
348	sequencing_primer	sequencing_primer
349	cleaved_for_gpi_anchor_region	cleaved_for_gpi_anchor_region
350	modified_l_cysteine	modified_l_cysteine
351	five_prime_utr	five_prime_utr
352	restriction_enzyme_recognition_site	restriction_enzyme_recognition_site
353	frt_site	frt_site
354	terminal_inverted_repeat	terminal_inverted_repeat
355	centromere_dna_element_i	centromere_dna_element_i
356	transition	transition
357	deletion_junction	deletion_junction
358	beta_turn_right_handed_type_one	beta_turn_right_handed_type_one
359	two_prime_o_ribosylguanosine_phosphate	two_prime_o_ribosylguanosine_phosphate
360	five_carbamoylmethyl_two_prime_o_methyluridine	five_cm_2_prime_o_methU
361	internal_transcribed_spacer_region	internal_transcribed_spacer_region
362	dicistronic	dicistronic
363	supported_by_sequence_similarity	supported_by_sequence_similarity
364	reverse_primer	reverse_primer
365	u3_three_prime_ltr_region	u3_three_prime_ltr_region
366	glutamine_trna_primary_transcript	glutamine_trna_primary_transcript
367	rnapol_ii_promoter	rnapol_ii_promoter
368	overlapping	overlapping
369	alpha_beta_motif	alpha_beta_motif
370	engineered_transposable_element	engineered_transposable_element
371	forward_primer	forward_primer
372	attctn_site	attctn_site
373	five_prime_d_recombination_signal_sequence	five_prime_d_recombination_signal_sequence
374	u6_snrna	u6_snrna
375	recombinationally_rearranged_gene	recombinationally_rearranged_gene
376	n6_threonylcarbamoyladenosine	n6_threonylcarbamoyladenosine
377	five_carbamoylmethyluridine	five_carbamoylmethyluridine
378	cds_fragment	cds_fragment
379	genome	genome
380	increased_translational_product_level	increased_translational_product_level
381	translational_product_level_variant	translational_product_level_variant
382	promoter	promoter
383	protein_coding_gene	protein_coding_gene
384	u5_snrna	u5_snrna
385	wybutosine	wybutosine
386	methylwyosine	methylwyosine
387	large_subunit_rrna	large_subunit_rrna
388	chromosomally_aberrant_genome	chromosomally_aberrant_genome
389	n4_2_prime_o_dimethylcytidine	n4_2_prime_o_dimethylcytidine
390	c_to_t_transition	c_to_t_transition
391	bidirectional_promoter	bidirectional_promoter
392	validated_cdna_clone	validated_cdna_clone
393	k_turn_rna_motif	k_turn_rna_motif
394	transcribed_fragment	transcribed_fragment
395	five_prime_ust	five_prime_ust
396	three_prime_utr_intron	three_prime_utr_intron
397	retrogene	retrogene
398	pyrimidine_to_purine_transversion	pyrimidine_to_purine_transversion
399	sine_element	sine_element
400	five_prime_rst	five_prime_rst
401	utr_intron	utr_intron
402	interchromosomal_transposition	interchromosomal_transposition
403	rna_sequence_secondary_structure	rna_sequence_secondary_structure
404	complex_change_in_transcript	complex_change_in_transcript
405	engineered_foreign_transposable_element	engineered_foreign_transposable_element
406	ds_rna_viral_sequence	ds_rna_viral_sequence
407	fosmid	fosmid
408	complex_substitution	complex_substitution
409	validated	validated
410	u2_snrna	u2_snrna
411	duplication_attribute	duplication_attribute
412	caat_signal	caat_signal
413	c_cluster	c_cluster
414	consensus_region	consensus_region
415	vertebrate_immune_system_gene_recombination_spacer	vertebrate_immune_system_gene_recombination_spacer
526	g_quartet	g_quartet
416	three_prime_restriction_enzyme_junction	three_prime_restriction_enzyme_junction
417	gene_trap_construct	gene_trap_construct
418	rna_aptamer	rna_aptamer
419	transcriptionally_induced	transcriptionally_induced
420	intrachromosomal	intrachromosomal
421	nuclear_localization_signal	nuclear_localization_signal
422	rescue_region	rescue_region
423	inversion_site_part	inversion_site_part
424	plus_2_frameshift variant	plus_2_frameshift_variant
425	origin_of_replication	origin_of_replication
426	standard_draft	standard_draft
427	h3k79_dimethylation_site	h3k79_dimethylation_site
428	rna_internal_loop	rna_internal_loop
429	ultracontig	ultracontig
430	peptidyl	peptidyl
431	polypeptide_region	polypeptide_region
432	epigenetically_modified_region	epigenetically_modified_region
433	transgenic_insertion	transgenic_insertion
434	mirna_antiguide	mirna_antiguide
435	rearranged_at_dna_level	rearranged_at_dna_level
436	intergenic_variant	intergenic_variant
437	v_spacer	v_spacer
438	strand_attribute	strand_attribute
439	stop_lost	stop_lost
440	alternatively_spliced	alternatively_spliced
441	five_formyl_two_prime_o_methylcytidine	five_formyl_two_prime_o_methylcytidine
442	plasmid_location	plasmid_location
443	four_bp_start_codon	four_bp_start_codon
444	increased_transcription_rate_variant	increased_transcription_rate_variant
445	recombinationally_rearranged	recombinationally_rearranged
446	complex_3d_structural_variant	complex_3d_structural_variant
447	chimeric_cdna_clone	chimeric_cdna_clone
448	tasirna_primary_transcript	tasirna_primary_transcript
449	gene_with_dicistronic_transcript	gene_with_dicistronic_transcript
450	three_prime_ltr_component	three_prime_ltr_component
451	retron	retron
452	autopolyploid	autopolyploid
453	phenylalanine	phenylalanine
454	translation_regulatory_region	translation_regulatory_region
455	transit_peptide	transit_peptide
456	amino_acid_deletion	amino_acid_deletion
457	rrna_28s	rrna_28s
458	one_two_prime_o_dimethylinosine	one_two_prime_o_dimethylinosine
459	threonine	threonine
460	a_minor_rna_motif	a_minor_rna_motif
461	j_cluster	j_cluster
462	dce	dce
463	quantitative_variant	quantitative_variant
464	lysosomal_localization_signal	lysosomal_localization_signal
465	d_dj_cluster	d_dj_cluster
466	chromosome_arm	chromosome_arm
467	kinetoplast_gene	kinetoplast_gene
468	line_element	line_element
469	solo_ltr	solo_ltr
470	external_transcribed_spacer_region	external_transcribed_spacer_region
471	non_transcribed_region	non_transcribed_region
472	mirna_stem	mirna_stem
473	dj_j_c_cluster	dj_j_c_cluster
474	hyperploid	hyperploid
475	cryptic	cryptic
476	h3k9_acetylation_site	h3k9_acetylation_site
477	alpha_helix	alpha_helix
478	fusion	fusion
479	vdj_j_cluster	vdj_j_cluster
480	isowyosine	isowyosine
481	paracentric_inversion	paracentric_inversion
482	homing_endonuclease_binding_site	homing_endonuclease_binding_site
483	tna_oligo	tna_oligo
484	mini_gene	mini_gene
485	restriction_fragment	restriction_fragment
486	base_pair	base_pair
487	inside_intron_antiparallel	inside_intron_antiparallel
488	dna_binding_site	dna_binding_site
489	modified_cytidine	modified_cytidine
490	hydrophobic_region_of_peptide	hydrophobic_region_of_peptide
491	polycistronic_primary_transcript	polycistronic_primary_transcript
492	modified_l_proline	modified_l_proline
493	overlapping_feature_set	overlapping_feature_set
494	asx_turn_left_handed_type_two	asx_turn_left_handed_type_two
495	interchromosomal_duplication	interchromosomal_duplication
496	inframe_codon_loss	inframe_codon_loss
497	substitution	substitution
498	isoleucine	isoleucine
499	functional_variant	functional_variant
500	three_prime_recoding_site	three_prime_recoding_site
501	transcript_stability_variant	transcript_stability_variant
502	5kb_upstream_variant	fivekb_upstream_variant
503	terminator_of_type_2_rnapol_iii_promoter	terminator_of_type_2_rnapol_iii_promoter
504	glycine_trna_primary_transcript	glycine_trna_primary_transcript
505	intron_variant	intron_variant
506	regional_centromere_outer_repeat_region	regional_centromere_outer_repeat_region
507	replication_regulatory_region	replication_regulatory_region
508	mating_type_region	mating_type_region
509	v_heptamer	v_heptamer
510	dispersed_repeat	dispersed_repeat
511	primer	primer
512	polypeptide_domain	polypeptide_domain
513	wild_type	wild_type
514	fusion_gene	fusion_gene
515	transcript_function_variant	transcript_function_variant
516	gene_member_region	gene_member_region
517	arginyl_trna	arginyl_trna
518	compensatory_transcript_secondary_structure_variant	compensatory_transcript_secondary_structure_variant
519	methylated_base_feature	methylated_base_feature
520	uninverted_intrachromosomal_transposition	uninvert_intra_transposition
521	scrna_gene	scrna_gene
522	rrna_18s	rrna_18s
523	rnapol_iii_promoter_type_1	rnapol_iii_promoter_type_1
527	schellmann_loop	schellmann_loop
528	modified_l_selenocysteine	modified_l_selenocysteine
529	pna	pna
530	three_prime_coding_exon	three_prime_coding_exon
531	endogenous_retroviral_gene	endogenous_retroviral_gene
532	vertebrate_immunoglobulin_t_cell_receptor_segment	vertebrate_immunoglobulin_t_cell_receptor_segment
533	mrna_recoded_by_translational_bypass	mrna_recoded_by_translational_bypass
534	engineered_foreign_region	engineered_foreign_region
535	snorna_encoding	snorna_encoding
536	five_prime_est	five_prime_est
537	foldback_element	foldback_element
538	srp_rna_encoding	srp_rna_encoding
539	d_j_c_cluster	d_j_c_cluster
540	dj_c_cluster	dj_c_cluster
541	histone_ubiqitination_site	histone_ubiqitination_site
542	complex_structural_alteration	complex_structural_alteration
543	rrna_encoding	rrna_encoding
544	mrna_recoded_by_codon_redefinition	mrna_recoded_by_codon_redefinition
545	five_methyluridine	five_methyluridine
546	polya_sequence	polya_sequence
547	metabolic_island	metabolic_island
548	homologous	homologous
549	immature_peptide_region	immature_peptide_region
550	h2bk5_monomethylation_site	h2bk5_monomethylation_site
551	sequence_attribute	sequence_attribute
552	sirna	sirna
553	dart_marker	dart_marker
554	nucleotide_motif	nucleotide_motif
555	plus_1_translationally_frameshifted	plus_1_translationally_frameshifted
556	trna_intron	trna_intron
557	five_prime_noncoding_exon	five_prime_noncoding_exon
558	dna_motif	dna_motif
559	beta_strand	beta_strand
560	ds_oligo	ds_oligo
561	one_methyladenosine	one_methyladenosine
562	oxys_rna	oxys_rna
563	asx_motif	asx_motif
564	five_hydroxyuridine	five_hydroxyuridine
565	coding_exon	coding_exon
566	plus_1_translational_frameshift	plus_1_translational_frameshift
567	five_formylcytidine	five_formylcytidine
568	h3k27_dimethylation_site	h3k27_dimethylation_site
569	spliced_leader_rna	spliced_leader_rna
570	mitochondrial_chromosome	mitochondrial_chromosome
571	gene_fragment	gene_fragment
572	n2_7_2prirme_o_trimethylguanosine	n2_7_2prirme_o_trimethylguanosine
573	frameshift	frameshift
574	propeptide_cleavage_site	propeptide_cleavage_site
575	five_methyldihydrouridine	five_methyldihydrouridine
576	amino_acid	amino_acid
577	translocation_breakpoint	translocation_breakpoint
578	rrna_5_8s	rrna_5_8s
579	helix_turn_helix	helix_turn_helix
580	simple_sequence_length_variation	simple_sequence_length_variation
581	methionine	methionine
582	polypeptide_loss_of_function_variant	polypeptide_loss_of_function_variant
583	transposable_element_gene	transposable_element_gene
584	whole_genome_sequence_status	whole_genome_sequence_status
585	genomic_island	genomic_island
586	gene_segment	gene_segment
587	snrna_gene	snrna_gene
588	engineered_region	engineered_region
589	common_variant	common_variant
590	cryptogene	cryptogene
591	three_prime_coding_exon_noncoding_region	three_prime_coding_exon_noncoding_region
592	gene_silenced_by_rna_interference	gene_silenced_by_rna_interference
593	deficient_interchromosomal_transposition	d_interchr_transposition
594	natural_variant_site	natural_variant_site
595	assembly	assembly
596	major_tss	major_tss
597	trna	trna
598	encodes_overlapping_peptides	encodes_overlapping_peptides
599	nc_conserved_region	nc_conserved_region
600	locus_control_region	locus_control_region
601	s_gna_oligo	s_gna_oligo
602	dna_chromosome	dna_chromosome
603	beta_turn_type_six_b	beta_turn_type_six_b
604	loss_of_heterozygosity	loss_of_heterozygosity
605	engineered_gene	engineered_gene
606	wobble_base_pair	wobble_base_pair
607	modified_amino_acid_feature	modified_amino_acid_feature
608	t_to_c_transition	t_to_c_transition
609	translocaton_attribute	translocaton_attribute
610	apicoplast_sequence	apicoplast_sequence
611	terminal_codon_variant	terminal_codon_variant
612	irlinv_site	irlinv_site
613	synthetic_sequence	synthetic_sequence
614	encodes_1_polypeptide	encodes_1_polypeptide
615	group_iia_intron	group_iia_intron
616	telomere	telomere
617	interior_intron	interior_intron
618	edited_mrna	edited_mrna
619	catmat_right_handed_three	catmat_right_handed_three
620	tandem_duplication	tandem_duplication
621	tmrna_gene	tmrna_gene
622	pre_edited_region	pre_edited_region
623	n6_hydroxynorvalylcarbamoyladenosine	n6_hydroxynorvalylcarbamoyladenosine
624	nucleomorphic_chromosome	nucleomorphic_chromosome
625	fragmentary	fragmentary
626	single	single
627	binding_site	binding_site
628	seven_methylguanine	seven_methylguanine
629	target_site_duplication	target_site_duplication
630	vdj_gene	vdj_gene
631	bound_by_nucleic_acid	bound_by_nucleic_acid
632	peptide_localization_signal	peptide_localization_signal
633	catmat_right_handed_four	catmat_right_handed_four
634	h3k27_acylation_site	h3k27_acylation_site
635	compound_chromosome	compound_chromosome
636	coding_end	coding_end
637	gap	gap
638	ligand_binding_site	ligand_binding_site
639	upstream_aug_codon	upstream_aug_codon
640	pseudogenic_transcript	pseudogenic_transcript
641	satellite_dna	satellite_dna
642	assortment_derived_deficiency_plus_duplication	assortment_derived_deficiency_plus_duplication
643	transposable_element	transposable_element
644	endogenous_retroviral_sequence	endogenous_retroviral_sequence
645	microsatellite	microsatellite
646	encodes_different_polypeptides_different_stop	encodes_different_polypeptides_different_stop
647	primary_transcript	primary_transcript
648	consensus_mrna	consensus_mrna
649	membrane_peptide_loop	membrane_peptide_loop
650	foreign	so_foreign
651	rho_independent_bacterial_terminator	rho_independent_bacterial_terminator
652	u_box	u_box
653	gene_silenced_by_histone_deacetylation	gene_silenced_by_histone_deacetylation
654	vdj_j_c_cluster	vdj_j_c_cluster
655	cpg_island	cpg_island
656	haplotype	haplotype
657	two_prime_o_methylinosine	two_prime_o_methylinosine
658	dna	dna
659	circular_double_stranded_rna_chromosome	circular_double_stranded_rna_chromosome
660	mature_protein_region	mature_protein_region
661	b_box	b_box
662	polypeptide_zinc_ion_contact_site	polypeptide_zinc_ion_contact_site
663	gene_subarray_member	gene_subarray_member
664	gene_cassette	gene_cassette
665	oric	oric
666	deletion_breakpoint	deletion_breakpoint
667	insertion_attribute	insertion_attribute
668	mrna_with_plus_2_frameshift	mrna_with_plus_2_frameshift
669	chip_seq_region	chip_seq_region
670	asx_turn_right_handed_type_one	asx_turn_right_handed_type_one
671	transcribed_cluster	transcribed_cluster
672	tyrosyl_trna	tyrosyl_trna
673	orthologous	orthologous
674	s_gna	s_gna
675	canonical_three_prime_splice_site	canonical_three_prime_splice_site
676	noncoding_exon	noncoding_exon
677	lethal_variant	lethal_variant
678	minor_tss	minor_tss
679	five_two_prime_o_dimethylcytidine	five_two_prime_o_dimethylcytidine
680	h3k36_trimethylation_site	h3k36_trimethylation_site
681	macronuclear_chromosome	macronuclear_chromosome
682	deficient_translocation	deficient_translocation
683	read_pair	read_pair
684	transcript_with_translational_frameshift	transcript_with_translational_frameshift
685	finished_genome	finished_genome
686	rnapol_iii_promoter_type_3	rnapol_iii_promoter_type_3
687	dna_transposon	dna_transposon
688	orf	orf
689	right_handed_peptide_helix	right_handed_peptide_helix
690	polypeptide_nest_left_right_motif	polypeptide_nest_left_right_motif
691	topology_attribute	topology_attribute
692	mirtron	mirtron
693	polypeptide_motif	polypeptide_motif
694	sl9_acceptor_site	sl9_acceptor_site
695	proplastid_sequence	proplastid_sequence
696	negatively_autoregulated_gene	negatively_autoregulated_gene
697	retinoic_acid_responsive_element	retinoic_acid_responsive_element
698	c_d_box_snorna_encoding	c_d_box_snorna_encoding
699	sequence_assembly	sequence_assembly
700	chromoplast_gene	chromoplast_gene
701	dcaps_primer	dcaps_primer
702	five_prime_clip	five_prime_clip
703	golden_path	golden_path
704	splice_acceptor_variant	splice_acceptor_variant
705	alanine	alanine
706	cleaved_peptide_region	cleaved_peptide_region
707	v_dj_j_cluster	v_dj_j_cluster
708	pseudogenic_region	pseudogenic_region
709	terminator_codon_variant	terminator_codon_variant
710	methylation_guide_snorna	methylation_guide_snorna
711	v_vj_j_c_cluster	v_vj_j_c_cluster
712	non_canonical_start_codon	non_canonical_start_codon
713	gene_with_mrna_recoded_by_translational_bypass	gene_with_mrna_recoded_by_translational_bypass
714	polypeptide_turn_motif	polypeptide_turn_motif
715	autocatalytically_spliced_intron	autocatalytically_spliced_intron
716	mobile	mobile
717	tandem	tandem
718	intron	intron
719	clip	clip
720	dye_terminator_read	dye_terminator_read
721	dmv4_motif	dmv4_motif
722	au_rich_element	au_rich_element
723	inversion_breakpoint	inversion_breakpoint
724	dce_siii	dce_siii
725	five_prime_recoding_site	five_prime_recoding_site
726	non_protein_coding	non_protein_coding
727	mobile_intron	mobile_intron
728	vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment	vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment
729	st_turn_right_handed_type_one	st_turn_right_handed_type_one
730	rrna	rrna
731	inside_intron_parallel	inside_intron_parallel
732	spliceosomal_intron	spliceosomal_intron
733	phagemid	phagemid
734	editing_block	editing_block
735	fragment_assembly	fragment_assembly
736	tmrna_acceptor_piece	tmrna_acceptor_piece
737	beta_turn_type_six	beta_turn_type_six
738	three_prime_rst	three_prime_rst
739	cysteine_trna_primary_transcript	cysteine_trna_primary_transcript
740	post_translationally_regulated_gene	post_translationally_regulated_gene
741	transcriptionally_repressed	transcriptionally_repressed
742	crm	crm
743	cointegrated_plasmid	cointegrated_plasmid
1060	v_j_cluster	v_j_cluster
744	polypeptide_sequencing_information	polypeptide_sequencing_information
745	three_prime_d_spacer	three_prime_d_spacer
746	tiling_path_fragment	tiling_path_fragment
747	natural	so_natural
748	pi_helix	pi_helix
749	possible_base_call_error	possible_base_call_error
750	polypeptide_truncation	polypeptide_truncation
751	h3k14_acetylation_site	h3k14_acetylation_site
752	adaptive_island	adaptive_island
753	uridine_five_oxyacetic_acid	uridine_five_oxyacetic_acid
754	sl7_acceptor_site	sl7_acceptor_site
755	plus_2_translational_frameshift	plus_2_translational_frameshift
756	stop_retained_variant	stop_retained_variant
757	homologous_region	homologous_region
758	500b_downstream_variant	fivehundred_b_downstream_variant
759	internal_utr	internal_utr
760	non_cytoplasmic_polypeptide_region	non_cytoplasmic_polypeptide_region
761	experimental_feature	experimental_feature
762	nuclear_chromosome	nuclear_chromosome
763	exemplar	exemplar
764	rnapol_ii_core_promoter	rnapol_ii_core_promoter
765	h3k9_methylation_site	h3k9_methylation_site
766	alanine_trna_primary_transcript	alanine_trna_primary_transcript
767	assortment_derived_variation	assortment_derived_variation
768	n2_n2_dimethylguanosine	n2_n2_dimethylguanosine
769	rna_hook_turn	rna_hook_turn
770	transcribed_spacer_region	transcribed_spacer_region
771	plasmid_gene	plasmid_gene
772	u14_snorna	u14_snorna
773	galactosyl_queuosine	galactosyl_queuosine
774	cyanelle_gene	cyanelle_gene
775	wild_type_rescue_gene	wild_type_rescue_gene
776	u12_intron	u12_intron
777	aptamer	aptamer
778	recoded_mrna	recoded_mrna
779	nested_transposon	nested_transposon
780	tf_binding_site_variant	tf_binding_site_variant
781	macronuclear_sequence	macronuclear_sequence
782	ust	ust
783	selenocysteine	selenocysteine
784	elongated_out_of_frame_polypeptide_c_terminal	elongated_out_of_frame_polypeptide_c_terminal
785	gene_with_dicistronic_mrna	gene_with_dicistronic_mrna
786	match_part	match_part
787	nucleomorphic_sequence	nucleomorphic_sequence
788	apicoplast_gene	apicoplast_gene
789	regulon	regulon
790	plasmid_vector	plasmid_vector
791	modified_l_tryptophan	modified_l_tryptophan
792	free_chromosome_arm	free_chromosome_arm
793	srp_rna_primary_transcript	srp_rna_primary_transcript
794	asx_turn	asx_turn
795	anchor_binding_site	anchor_binding_site
796	rrna_primary_transcript	rrna_primary_transcript
797	reading_frame	reading_frame
798	h3k23_acylation site	h3k23_acylation_site
799	maternal_variant	maternal_variant
800	dhu_loop	dhu_loop
801	n4_acetylcytidine	n4_acetylcytidine
802	experimental_feature_attribute	experimental_feature_attribute
803	silenced_gene	silenced_gene
804	cloned_genomic_insert	cloned_genomic_insert
805	intron_gain	intron_gain
806	dna_sequence_secondary_structure	dna_sequence_secondary_structure
807	cdna_match	cdna_match
808	five_prime_flanking_region	five_prime_flanking_region
809	pyrrolysyl_trna	pyrrolysyl_trna
810	two_methylthio_n6_cis_hydroxyisopentenyl_adenosine	two_methylthio_n6_cis_hydroxyisopentenyl_adenosine
811	repeat_component	repeat_component
812	one_methyl_three_three_amino_three_carboxypropyl_pseudouridine	one_methyl_3_3_amino_three_carboxypropyl_pseudouridine
813	rpra_rna	rpra_rna
814	nuclease_sensitive_site	nuclease_sensitive_site
815	conservative_amino_acid_substitution	conservative_amino_acid_substitution
816	five_prime_coding_exon_noncoding_region	five_prime_coding_exon_noncoding_region
817	rnapol_iii_promoter	rnapol_iii_promoter
818	tryptophan_trna_primary_transcript	try_trna_primary_transcript
819	noncontiguous_finished	noncontiguous_finished
820	region	region
821	tf_binding_site	tf_binding_site
822	attl_site	attl_site
823	natural_plasmid	natural_plasmid
824	upd	upd
825	conservative_missense_codon	conservative_missense_codon
826	n6_n6_dimethyladenosine	n6_n6_dimethyladenosine
827	laevosynaptic_chromosome	laevosynaptic_chromosome
828	chromosomal_structural_element	chromosomal_structural_element
829	gene_cassette_array	gene_cassette_array
830	vertebrate_immunoglobulin_t_cell_receptor_gene_cluster	vertebrate_immunoglobulin_t_cell_receptor_gene_cluster
831	canonical_five_prime_splice_site	canonical_five_prime_splice_site
832	bound_by_protein	bound_by_protein
833	sts_map	sts_map
834	dnazyme	dnazyme
835	silent_mutation	silent_mutation
836	v_d_j_cluster	v_d_j_cluster
837	distal_promoter_element	distal_promoter_element
838	bipartite_duplication	bipartite_duplication
839	hydroxywybutosine	hydroxywybutosine
840	dihydrouridine	dihydrouridine
841	five_prime_coding_exon_coding_region	five_prime_coding_exon_coding_region
842	beta_turn_left_handed_type_one	beta_turn_left_handed_type_one
843	h3k4_trimethylation	h3k4_trimethylation
844	recoded_codon	recoded_codon
845	predicted	predicted
846	resolution_site	resolution_site
847	seven_cyano_seven_deazaguanosine	seven_cyano_seven_deazaguanosine
848	disease_associated_variant	disease_associated_variant
849	conformational_switch	conformational_switch
850	regulated	regulated
851	inverted_repeat	inverted_repeat
852	t_to_a_transversion	t_to_a_transversion
853	attc_site	attc_site
854	two_methyladenosine	two_methyladenosine
855	cross_genome_match	cross_genome_match
856	tandem_repeat	tandem_repeat
857	copy_number_loss	copy_number_loss
858	antisense_primary_transcript	antisense_primary_transcript
859	sequence_collection	sequence_collection
860	gene_with_polyadenylated_mrna	gene_with_polyadenylated_mrna
861	rnapol_i_promoter	rnapol_i_promoter
862	three_methyluridine	three_methyluridine
863	start_codon	start_codon
864	retrotransposon	retrotransposon
865	elongated_in_frame_polypeptide_c_terminal	elongated_in_frame_polypeptide_c_terminal
866	v_gene	v_gene
867	chloroplast_dna	chloroplast_dna
868	negative_sense_ssrna_viral_sequence	negative_sense_ssrna_viral_sequence
869	primer_binding_site	primer_binding_site
870	c_box	c_box
871	plasmid	plasmid
872	biological_region	biological_region
873	g_to_a_transition	g_to_a_transition
874	non_canonical_five_prime_splice_site	non_canonical_five_prime_splice_site
875	c_d_box_snorna_primary_transcript	c_d_box_snorna_primary_transcript
876	trna_region	trna_region
877	n6_cis_hydroxyisopentenyl_adenosine	n6_cis_hydroxyisopentenyl_adenosine
878	chloroplast_sequence	chloroplast_sequence
879	variant_frequency	variant_frequency
880	exon_region	exon_region
881	r_five_prime_ltr_region	r_five_prime_ltr_region
882	v_j_c_cluster	v_j_c_cluster
883	r_three_prime_ltr_region	r_three_prime_ltr_region
884	snrna	snrna
885	one_methylinosine	one_methylinosine
886	inframe_codon_gain	inframe_codon_gain
887	j_gene_recombination_feature	j_gene_recombination_feature
888	polypeptide_structural_motif	polypeptide_structural_motif
889	conserved_region	conserved_region
890	sl3_acceptor_site	sl3_acceptor_site
891	remark	remark
892	fixed_variant	fixed_variant
893	polypeptide_dna_contact	polypeptide_dna_contact
894	codon	codon
895	rrna_23s	rrna_23s
896	polypeptide_gain_of_function_variant	polypeptide_gain_of_function_variant
897	mrna	mrna
898	glycyl_trna	glycyl_trna
899	cyanelle_sequence	cyanelle_sequence
900	cds_independently_known	cds_independently_known
901	insulator	insulator
902	positive_sense_ssrna_viral_sequence	positive_sense_ssrna_viral_sequence
903	sticky_end_restriction_enzyme_cleavage_site	sticky_end_restriction_enzyme_cleavage_site
904	expressed_sequence_match	expressed_sequence_match
905	possible_assembly_error	possible_assembly_error
906	u3_snorna	u3_snorna
907	polypeptide_manganese_ion_contact_site	polypeptide_manganese_ion_contact_site
908	h4k16_acylation_site	h4k16_acylation_site
909	g_to_t_transversion	g_to_t_transversion
910	recombination_feature_of_rearranged_gene	recombination_feature_of_rearranged_gene
911	three_prime_coding_exon_coding_region	three_prime_coding_exon_coding_region
912	tmrna_primary_transcript	tmrna_primary_transcript
913	single_stranded_cdna	single_stranded_cdna
914	experimentally_determined	experimentally_determined
915	pseudogenic_exon	pseudogenic_exon
916	u2_intron	u2_intron
917	chromosome	chromosome
918	encodes_alternately_spliced_transcripts	encodes_alternately_spliced_transcripts
919	aberrant_processed_transcript	aberrant_processed_transcript
920	complex_change_of_translational_product_variant	complex_change_of_translational_product_variant
921	gna	gna
922	dsra_rna	dsra_rna
923	intron_domain	intron_domain
924	cds_predicted	cds_predicted
925	modified_l_asparagine	modified_l_asparagine
926	inframe_variant	inframe_variant
927	five_prime_d_nonamer	five_prime_d_nonamer
928	sl2_acceptor_site	sl2_acceptor_site
929	polypeptide_localization_variant	polypeptide_localization_variant
930	dce_si	dce_si
931	snrna_primary_transcript	snrna_primary_transcript
932	translocation	translocation
933	h3k27_methylation_site	h3k27_methylation_site
934	modified_l_phenylalanine	modified_l_phenylalanine
935	lincrna	lincrna
936	modified_l_valine	modified_l_valine
937	yac	yac
938	signal_peptide	signal_peptide
939	r_ltr_region	r_ltr_region
940	srp_rna_gene	srp_rna_gene
941	elongated_polypeptide_n_terminal	elongated_polypeptide_n_terminal
942	recombination_hotspot	recombination_hotspot
943	v_dj_c_cluster	v_dj_c_cluster
944	viral_sequence	viral_sequence
945	five_prime_terminal_inverted_repeat	five_prime_terminal_inverted_repeat
946	five_methoxycarbonylmethyl_two_thiouridine	five_mcm_2_thiouridine
947	edited	edited
948	breu_motif	breu_motif
949	coding_start	coding_start
950	h3k9_monomethylation_site	h3k9_monomethylation_site
951	three_prime_utr	three_prime_utr
952	dpe1_motif	dpe1_motif
953	modified_l_tyrosine	modified_l_tyrosine
954	v_d_j_c_cluster	v_d_j_c_cluster
955	silenced_by_histone_methylation	silenced_by_histone_methylation
956	deficient_inversion	deficient_inversion
1061	three_prime_five_prime_overlap	three_prime_five_prime_overlap
957	decreased_transcript_level_variant	decreased_transcript_level_variant
958	two_thiouridine	two_thiouridine
959	polyadenylation_variant	polyadenylation_variant
960	rna_polymerase_iii_tata_box	rna_polymerase_iii_tata_box
961	two_thio_two_prime_o_methyluridine	two_thio_two_prime_o_methyluridine
962	h3k18_acetylation_site	h3k18_acetylation_site
963	leucoplast_sequence	leucoplast_sequence
964	cds	cds
965	polya_signal_sequence	polya_signal_sequence
966	micronuclear_sequence	micronuclear_sequence
967	glutamyl_trna	glutamyl_trna
968	h3k27_monomethylation_site	h3k27_monomethylation_site
969	minus_2_frameshift_variant	minus_2_frameshift_variant
970	strna_gene	strna_gene
971	paternally_imprinted_gene	paternally_imprinted_gene
972	rna_chromosome	rna_chromosome
973	ndm3_motif	ndm3_motif
974	u1_snrna	u1_snrna
975	five_hydroxymethylcytidine	five_hydroxymethylcytidine
976	recombination_feature	recombination_feature
977	encodes_disjoint_polypeptides	encodes_disjoint_polypeptides
978	post_translationally_regulated	post_translationally_regulated
979	engineered_fusion_gene	engineered_fusion_gene
980	three_prime_d_recombination_signal_sequence	three_prime_d_recombination_signal_sequence
981	intermediate	intermediate
982	polypeptide_calcium_ion_contact_site	polypeptide_calcium_ion_contact_site
983	syntenic_region	syntenic_region
984	variant_collection	variant_collection
985	cryptic_splice_donor	cryptic_splice_donor
986	assembly_error_correction	assembly_error_correction
987	sugar_edge_base_pair	sugar_edge_base_pair
988	engineered_foreign_gene	engineered_foreign_gene
989	h3k4_monomethylation_site	h3k4_monomethylation_site
990	n4_acetyl_2_prime_o_methylcytidine	n4_acetyl_2_prime_o_methylcytidine
991	predicted_by_ab_initio_computation	predicted_by_ab_initio_computation
992	polypeptide_secondary_structure	polypeptide_secondary_structure
993	ncrna_gene	ncrna_gene
994	rna_junction_loop	rna_junction_loop
995	haplotype_block	haplotype_block
996	oriv	oriv
997	peptide_collection	peptide_collection
998	ambisense_ssrna_viral_sequence	ambisense_ssrna_viral_sequence
999	morpholino_oligo	morpholino_oligo
1000	centromere	centromere
1001	epigenetically_modified_gene	epigenetically_modified_gene
1002	chromosomal_inversion	chromosomal_inversion
1003	minus_35_signal	minus_35_signal
1004	three_two_prime_o_dimethyluridine	three_two_prime_o_dimethyluridine
1005	four_thiouridine	four_thiouridine
1006	transcription_end_site	transcription_end_site
1007	pirna_gene	pirna_gene
1008	pre_mirna	pre_mirna
1009	cysteinyl_trna	cysteinyl_trna
1010	catmat_left_handed_three	catmat_left_handed_three
1011	cryptic_splice_acceptor	cryptic_splice_acceptor
1012	schellmann_loop_seven	schellmann_loop_seven
1013	v_vdj_j_c_cluster	v_vdj_j_c_cluster
1014	transposable_element_insertion_site	transposable_element_insertion_site
1015	translocation_element	translocation_element
1016	mirna_primary_transcript_region	mirna_primary_transcript_region
1017	orphan_cds	orphan_cds
1018	monocistronic_mrna	monocistronic_mrna
1019	natural_transposable_element	natural_transposable_element
1020	golden_path_fragment	golden_path_fragment
1021	lipoprotein_signal_peptide	lipoprotein_signal_peptide
1022	arginine	arginine
1023	linear_double_stranded_rna_chromosome	linear_double_stranded_rna_chromosome
1024	h4k8_acylation site	h4k8_acylation_site
1025	rrna_large_subunit_primary_transcript	rrna_large_subunit_primary_transcript
1026	irrinv_site	irrinv_site
1027	plastid_sequence	plastid_sequence
1028	base_call_error_correction	base_call_error_correction
1029	integrated_plasmid	integrated_plasmid
1030	modified_l_methionine	modified_l_methionine
1031	linear_single_stranded_rna_chromosome	linear_single_stranded_rna_chromosome
1032	chromoplast_sequence	chromoplast_sequence
1033	proximal_promoter_element	proximal_promoter_element
1034	contig_read	contig_read
1035	promoter_trap_construct	promoter_trap_construct
1036	stop_codon_redefined_as_selenocysteine	stop_codon_redefined_as_selenocysteine
1037	seven_methylguanosine	seven_methylguanosine
1038	gamma_turn	gamma_turn
1039	tmrna	tmrna
1040	methionyl_trna	methionyl_trna
1041	synonymous_codon	synonymous_codon
1042	cdna	cdna
1043	sl4_acceptor_site	sl4_acceptor_site
1044	nuclease_binding_site	nuclease_binding_site
1045	uridine_five_oxyacetic_acid_methyl_ester	uridine_five_oxyacetic_acid_methyl_ester
1046	three_prime_race_clone	three_prime_race_clone
1047	circular_double_stranded_dna_chromosome	circular_double_stranded_dna_chromosome
1048	consensus	consensus
1049	positively_autoregulated_gene	positively_autoregulated_gene
1050	tss_region	tss_region
1051	modified_l_histidine	modified_l_histidine
1052	unitary_pseudogene	unitary_pseudogene
1053	polypeptide_metal_contact	polypeptide_metal_contact
1054	integron	integron
1055	d_loop	d_loop
1056	decayed_exon	decayed_exon
1057	recombination_signal_sequence	recombination_signal_sequence
1058	modified_inosine	modified_inosine
1059	three_prime_three_prime_overlap	three_prime_three_prime_overlap
1062	recombination_regulatory_region	recombination_regulatory_region
1063	beta_bulge_loop	beta_bulge_loop
1064	restriction_enzyme_cleavage_junction	restriction_enzyme_cleavage_junction
1065	blunt_end_restriction_enzyme_cleavage_junction	blunt_end_restriction_enzyme_cleavage_junction
1066	intergenic_region	intergenic_region
1067	dmv2_motif	dmv2_motif
1068	intrachromosomal_mutation	intrachromosomal_mutation
1069	antisense_rna	antisense_rna
1070	sequence_feature	sequence_feature
1071	n6_glycinylcarbamoyladenosine	n6_glycinylcarbamoyladenosine
1072	gamma_turn_classic	gamma_turn_classic
1073	three_prime_cis_splice_site	three_prime_cis_splice_site
1074	rapd	rapd
1075	inverted_ring_chromosome	inverted_ring_chromosome
1076	cca_tail	cca_tail
1077	linear_double_stranded_dna_chromosome	linear_double_stranded_dna_chromosome
1078	u5_five_prime_ltr_region	u5_five_prime_ltr_region
1079	bruno_response_element	bruno_response_element
1080	t_to_g_transversion	t_to_g_transversion
1081	c_to_a_transversion	c_to_a_transversion
1082	macronucleus_destined_segment	macronucleus_destined_segment
1083	distant_three_prime_recoding_signal	distant_three_prime_recoding_signal
1084	pre_edited_mrna	pre_edited_mrna
1085	p_element	p_element
1086	pac	pac
1087	gene_fusion	gene_fusion
1088	base	base
1089	codon_redefined	codon_redefined
1090	polycistronic_mrna	polycistronic_mrna
1091	codon_variant	codon_variant
1092	five_methoxycarbonylmethyl_two_prime_o_methyluridine	five_methoxycarbonylmethyl_two_prime_o_methyluridine
1093	match	match
1094	gene_with_stop_codon_read_through	gene_with_stop_codon_read_through
1095	asparaginyl_trna	asparaginyl_trna
1096	threonyl_trna	threonyl_trna
1097	u3_five_prime_ltr_region	u3_five_prime_ltr_region
1098	five_prime_ltr	five_prime_ltr
1099	vj_gene	vj_gene
1100	rho_dependent_bacterial_terminator	rho_dependent_bacterial_terminator
1101	n2_methylguanosine	n2_methylguanosine
1102	three_prime_flanking_region	three_prime_flanking_region
1103	genomically_contaminated_cdna_clone	genomically_contaminated_cdna_clone
1104	internal_guide_sequence	internal_guide_sequence
1105	mirna_target_site	mirna_target_site
1106	u5_three_prime_ltr_region	u5_three_prime_ltr_region
1107	undermodified_hydroxywybutosine	undermodified_hydroxywybutosine
1108	introgressed_chromosome_region	introgressed_chromosome_region
1109	translationally_frameshifted	translationally_frameshifted
1110	trans_spliced	trans_spliced
1111	methylation_guide_snorna_primary_transcript	methylation_guide_snorna_primary_transcript
1112	leucine	leucine
1113	chromosomal_deletion	chromosomal_deletion
1114	five_isopentenylaminomethyl_uridine	five_isopentenylaminomethyl_uridine
1115	stop_codon	stop_codon
1116	two_methylthio_n6_threonyl_carbamoyladenosine	two_methylthio_n6_threonyl_carbamoyladenosine
1117	decreased_polyadenylation_variant	decreased_polyadenylation_variant
1118	biochemical_region_of_peptide	biochemical_region_of_peptide
1119	interband	interband
1120	dna_constraint_sequence	dna_constraint_sequence
1121	clone_insert	clone_insert
1122	snp	snp
1123	chromoplast_chromosome	chromoplast_chromosome
1124	rrna_25s	rrna_25s
1125	tata_box	tata_box
1126	plastid_gene	plastid_gene
1127	asx_turn_left_handed_type_one	asx_turn_left_handed_type_one
1128	modified_uridine	modified_uridine
1129	dce_sii	dce_sii
1130	intramembrane_polypeptide_region	intramembrane_polypeptide_region
1131	lysyl_trna	lysyl_trna
1132	rr_tract	rr_tract
1133	rrna_primary_transcript_region	rrna_primary_transcript_region
1134	h4k20_monomethylation_site	h4k20_monomethylation_site
1135	ds_dna_viral_sequence	ds_dna_viral_sequence
1136	alternatively_spliced_transcript	alternatively_spliced_transcript
1137	polypeptide_copper_ion_contact_site	polypeptide_copper_ion_contact_site
1138	scrna_encoding	scrna_encoding
1139	chromosomal_duplication	chromosomal_duplication
1140	clone	clone
1141	modified_l_isoleucine	modified_l_isoleucine
1142	gene_subarray	gene_subarray
1143	hetero_compound_chromosome	hetero_compound_chromosome
1144	dicistronic_transcript	dicistronic_transcript
1145	inactive_ligand_binding_site	inactive_ligand_binding_site
1146	silenced_by_dna_methylation	silenced_by_dna_methylation
1147	sl6_acceptor_site	sl6_acceptor_site
1148	t_loop	t_loop
1149	targeting_vector	targeting_vector
1150	two_thiocytidine	two_thiocytidine
1151	modified_l_serine	modified_l_serine
1152	srp_rna	srp_rna
1153	three_prime_repeat_recoding_signal	three_prime_repeat_recoding_signal
1154	rate_of_transcription_variant	rate_of_transcription_variant
1155	two_prime_o_methylguanosine	two_prime_o_methylguanosine
1156	polypeptide_binding_motif	polypeptide_binding_motif
1157	recombinationally_rearranged_vertebrate_immune_system_gene	recombinationally_rearranged_vertebrate_immune_system_gene
1158	a_box	a_box
1159	splicing_variant	splicing_variant
1160	one_methylguanosine	one_methylguanosine
1161	modified_l_glutamine	modified_l_glutamine
1162	sequence_variant	sequence_variant
1163	sequence_length_variation	sequence_length_variation
1164	strna_encoding	strna_encoding
1165	plus_1_frameshift	plus_1_frameshift
1166	topologically_defined_region	topologically_defined_region
1167	edited_cds	edited_cds
1168	gene_silenced_by_histone_modification	gene_silenced_by_histone_modification
1169	e_box_motif	e_box_motif
1170	paternal_uniparental_disomy	paternal_uniparental_disomy
1171	small_subunit_rrna	small_subunit_rrna
1172	dnasei_hypersensitive_site	dnasei_hypersensitive_site
1173	v_d_dj_j_c_cluster	v_d_dj_j_c_cluster
1174	compound_chromosome_arm	compound_chromosome_arm
1175	score	score
1176	feature_attribute	feature_attribute
1177	protein_match	protein_match
1178	downstream_gene_variant	downstream_gene_variant
1179	sl10_accceptor_site	sl10_accceptor_site
1180	chromosome_variation	chromosome_variation
1181	serine_threonine_motif	serine_threonine_motif
1182	a_box_type_1	a_box_type_1
1183	allelically_excluded	allelically_excluded
1184	assortment_derived_aneuploid	assortment_derived_aneuploid
1185	rare_variant	rare_variant
1186	five_isopentenylaminomethyl_two_prime_o_methyluridine	five_isopentenylaminomethyl_two_prime_o_methyluridine
1187	regional_centromere_central_core	regional_centromere_central_core
1188	gna_oligo	gna_oligo
1189	nc_transcript_variant	nc_transcript_variant
1190	copy_number_variation	copy_number_variation
1191	silenced	silenced
1192	three_methylcytidine	three_methylcytidine
1193	dexstrosynaptic_chromosome	dexstrosynaptic_chromosome
1194	inverted_insertional_duplication	inverted_insertional_duplication
1195	rescue_mini_gene	rescue_mini_gene
1196	catmat_left_handed_four	catmat_left_handed_four
1197	alternate_sequence_site	alternate_sequence_site
1198	polypeptide_iron_ion_contact_site	polypeptide_iron_ion_contact_site
1199	c_to_t_transition_at_pcpg_site	c_to_t_transition_at_pcpg_site
1200	polypeptide_molybdenum_ion_contact_site	polypeptide_molybdenum_ion_contact_site
1201	phenylalanine_trna_primary_transcript	phe_trna_primary_transcript
1202	decreased_translational_product_level	decreased_translational_product_level
1203	h_aca_box_snorna_primary_transcript	h_aca_box_snorna_primary_transcript
1204	r_gna	r_gna
1205	coding_sequence_variant	coding_sequence_variant
1206	polypeptide_partial_loss_of_function	polypeptide_partial_loss_of_function
1207	five_prime_restriction_enzyme_junction	five_prime_restriction_enzyme_junction
1208	intrachromosomal_transposition	intrachromosomal_transposition
1209	methylated_a	methylated_a
1210	rrna_16s	rrna_16s
1211	disease_causing_variant	disease_causing_variant
1212	n4_methylcytidine	n4_methylcytidine
1213	riboswitch	riboswitch
1214	duplicated_pseudogene	duplicated_pseudogene
1215	assortment_derived_duplication	assortment_derived_duplication
1216	chromosomal_regulatory_element	chromosomal_regulatory_element
1217	five_prime_five_prime_overlap	five_prime_five_prime_overlap
1218	polypeptide_function_variant	polypeptide_function_variant
1219	ribozymic	ribozymic
1220	inversion_derived_bipartite_deficiency	inversion_derived_bipartite_deficiency
1221	invalidated_by_genomic_contamination	invalidated_by_genomic_contamination
1222	variant_genome	variant_genome
1223	vj_j_cluster	vj_j_cluster
1224	chromosome_number_variation	chromosome_number_variation
1225	gene_attribute	gene_attribute
1226	uag_stop_codon_signal	uag_stop_codon_signal
1227	nucleotide_match	nucleotide_match
1228	mature_mirna_variant	mature_mirna_variant
1229	st_turn_left_handed_type_two	st_turn_left_handed_type_two
1230	epigenetically_modified	epigenetically_modified
1231	inversion_derived_deficiency_plus_duplication	inversion_derived_deficiency_plus_duplication
1232	five_methylaminomethyl_two_selenouridine	five_methylaminomethyl_two_selenouridine
1233	aspartic_acid_trna_primary_transcript	aspartic_acid_trna_primary_transcript
1234	nuclear_mt_pseudogene	nuclear_mt_pseudogene
1235	exonic_splice_enhancer	exonic_splice_enhancer
1236	u4_snrna	u4_snrna
1237	csrb_rsmb_rna	csrb_rsmb_rna
1238	group_1_intron_homing_endonuclease_target_region	group_1_intron_homing_endonuclease_target_region
1239	crispr	crispr
1240	snorna_gene	snorna_gene
1241	trans_splice_junction	trans_splice_junction
1242	flanking_three_prime_quadruplet_recoding_signal	flanking_three_prime_quadruplet_recoding_signal
1243	v_vdj_j_cluster	v_vdj_j_cluster
1244	cassette_pseudogene	cassette_pseudogene
1245	incomplete_terminal_codon_variant	incomplete_terminal_codon_variant
1246	silenced_by_histone_modification	silenced_by_histone_modification
1247	proviral_gene	proviral_gene
1248	five_carboxyhydroxymethyl_uridine	five_carboxyhydroxymethyl_uridine
1249	mt_gene	mt_gene
1250	single_stranded_rna_chromosome	single_stranded_rna_chromosome
1251	recoding_stimulatory_region	recoding_stimulatory_region
1252	five_taurinomethyluridine	five_taurinomethyluridine
1253	modified_l_threonine	modified_l_threonine
1254	v_d_dj_cluster	v_d_dj_cluster
1255	synthetic_oligo	synthetic_oligo
1256	purine_to_pyrimidine_transversion	purine_to_pyrimidine_transversion
1257	editing_variant	editing_variant
1258	antiparallel_beta_strand	antiparallel_beta_strand
1259	central_hydrophobic_region_of_signal_peptide	central_hydrophobic_region_of_signal_peptide
1260	integrated_mobile_genetic_element	integrated_mobile_genetic_element
1261	parallel_beta_strand	parallel_beta_strand
1262	v_dj_cluster	v_dj_cluster
1263	dre_motif	dre_motif
1264	non_ltr_retrotransposon	non_ltr_retrotransposon
1265	r_gna_oligo	r_gna_oligo
1266	autoregulated	autoregulated
1267	modified_l_lysine	modified_l_lysine
1268	bac_end	bac_end
1269	pyrrolysine	pyrrolysine
1270	high_quality_draft	high_quality_draft
1271	lysine	lysine
1272	elongated_polypeptide	elongated_polypeptide
1273	unique_variant	unique_variant
1274	protein_protein_contact	protein_protein_contact
1275	inversion_attribute	inversion_attribute
1276	nucleotide_binding_site	nucleotide_binding_site
1277	splice_site	splice_site
1278	non_synonymous_codon	non_synonymous_codon
1279	5kb_downstream_variant	fivekb_downstream_variant
1280	chromosomal_translocation	chromosomal_translocation
1281	epitope	epitope
1282	allele	allele
1283	n4_n4_2_prime_o_trimethylcytidine	n4_n4_2_prime_o_trimethylcytidine
1284	u5_ltr_region	u5_ltr_region
1285	paired_end_fragment	paired_end_fragment
1286	rescue_gene	rescue_gene
1287	transgenic_transposable_element	transgenic_transposable_element
1288	polypeptide_conserved_region	polypeptide_conserved_region
1289	sts	sts
1290	a_to_c_transversion	a_to_c_transversion
1291	class_ii_rna	class_ii_rna
1292	nonamer_of_recombination_feature_of_vertebrate_immune_system_gene	nonamer_of_recombination_feature_of_vertebrate_im_sys_gene
1293	unedited_region	unedited_region
1294	lambda_vector	lambda_vector
1295	gene	gene
1296	alanyl_trna	alanyl_trna
1297	amino_acid_substitution	amino_acid_substitution
1298	virtual_sequence	virtual_sequence
1299	group_iib_intron	group_iib_intron
1300	retrotransposed	retrotransposed
1301	mrna_with_minus_2_frameshift	mrna_with_minus_2_frameshift
1302	polymer_attribute	polymer_attribute
1303	autosynaptic_chromosome	autosynaptic_chromosome
1304	peptide_helix	peptide_helix
1305	partially_processed_cdna_clone	partially_processed_cdna_clone
1306	rst_match	rst_match
1307	paternally_imprinted	paternally_imprinted
1308	predicted_gene	predicted_gene
1309	x_element_combinatorial_repeat	x_element_combinatorial_repeat
1310	robertsonian_fusion	robertsonian_fusion
1311	two_prime_o_methylpseudouridine	two_prime_o_methylpseudouridine
1312	pericentric_inversion	pericentric_inversion
1313	aspartyl_trna	aspartyl_trna
1314	strna	strna
1315	three_prime_intron	three_prime_intron
1316	linear	linear
1317	j_nonamer	j_nonamer
1318	a_to_t_transversion	a_to_t_transversion
1319	idna	idna
1320	n2_n2_7_trimethylguanosine	n2_n2_7_trimethylguanosine
1321	complex_chromosomal_mutation	complex_chromosomal_mutation
1322	inversion_derived_deficiency_plus_aneuploid	inversion_derived_deficiency_plus_aneuploid
1323	h3k4_methylation_site	h3k4_methylation_site
1324	asymmetric_rna_internal_loop	asymmetric_rna_internal_loop
1325	deletion	deletion
1326	h3k79_monomethylation_site	h3k79_monomethylation_site
1327	cyclic_translocation	cyclic_translocation
1328	ars	ars
1329	glutaminyl_trna	glutaminyl_trna
1330	allopolyploid	allopolyploid
1331	replicon	replicon
1332	two_prime_o_methylcytidine	two_prime_o_methylcytidine
1333	regional_centromere	regional_centromere
1334	st_turn_left_handed_type_one	st_turn_left_handed_type_one
1335	paralogous_region	paralogous_region
1336	mature_transcript_region	mature_transcript_region
1337	mrna_with_frameshift	mrna_with_frameshift
1338	reference_genome	reference_genome
1339	unoriented_interchromosomal_transposition	unoriented_interchromosomal_transposition
1340	d_dj_j_cluster	d_dj_j_cluster
1341	maxicircle_gene	maxicircle_gene
1342	st_turn_right_handed_type_two	st_turn_right_handed_type_two
1343	snrna_encoding	snrna_encoding
1344	annotation_directed_improved_draft	annotation_directed_improved_draft
1345	five_prime_d_spacer	five_prime_d_spacer
1346	read	read
1347	arginine_trna_primary_transcript	arg_trna_primary_transcript
1348	oligo_u_tail	oligo_u_tail
1349	recoding_pseudoknot	recoding_pseudoknot
1350	five_methylaminomethyl_two_thiouridine	five_mam_2_thiouridine
1351	monocistronic	monocistronic
1352	3d_polypeptide_structure_variant	threed_polypeptide_structure_variant
1353	transmembrane_polypeptide_region	transmembrane_polypeptide_region
1354	transcript_processing_variant	transcript_processing_variant
1355	vector_replicon	vector_replicon
1356	maternal_uniparental_disomy	maternal_uniparental_disomy
1357	pyrosequenced_read	pyrosequenced_read
1358	splice_site_variant	splice_site_variant
1359	polypeptide_magnesium_ion_contact_site	polypeptide_magnesium_ion_contact_site
1360	polycistronic_transcript	polycistronic_transcript
1361	polya_site	polya_site
1362	chromosomal_variation_attribute	chromosomal_variation_attribute
1363	free_duplication	free_duplication
1364	chromosome_structure_variation	chromosome_structure_variation
1365	modified_rna_base_feature	modified_rna_base_feature
1366	mutated_variant_site	mutated_variant_site
1367	gaga_motif	gaga_motif
1368	centromeric_repeat	centromeric_repeat
1369	rrna_gene	rrna_gene
1370	interchromosomal_mutation	interchromosomal_mutation
1371	prophage	prophage
1372	syntenic	syntenic
1373	engineered_foreign_repetitive_element	engineered_foreign_repetitive_element
1374	translated_nucleotide_match	translated_nucleotide_match
1375	exon_variant	exon_variant
1376	h_aca_box_snorna	h_aca_box_snorna
1377	vault_rna	vault_rna
1378	orphan	orphan
1379	linear_single_stranded_dna_chromosome	linear_single_stranded_dna_chromosome
1380	telomeric_repeat	telomeric_repeat
1381	encodes_greater_than_1_polypeptide	encodes_greater_than_1_polypeptide
1382	atti_site	atti_site
1383	gene_with_start_codon_cug	gene_with_start_codon_cug
1384	silenced_by_histone_deacetylation	silenced_by_histone_deacetylation
1385	reagent	reagent
1386	chromosome_fission	chromosome_fission
1387	ct_gene	ct_gene
1388	capped_primary_transcript	capped_primary_transcript
1389	methylinosine	methylinosine
1390	j_spacer	j_spacer
1391	glutamine	glutamine
1392	modified_guanosine	modified_guanosine
1393	n2_7_dimethylguanosine	n2_7_dimethylguanosine
1394	h3k79_trimethylation_site	h3k79_trimethylation_site
1395	three_prime_d_heptamer	three_prime_d_heptamer
1396	invalidated_cdna_clone	invalidated_cdna_clone
1397	terminator	terminator
1398	stem_loop	stem_loop
1399	five_prime_utr_intron	five_prime_utr_intron
1400	unoriented_intrachromosomal_transposition	unoriented_intrachromosomal_transposition
1401	chromosome_band	chromosome_band
1402	mini_exon_donor_rna	mini_exon_donor_rna
1403	aneuploid	aneuploid
1404	five_methyl_2_thiouridine	five_methyl_2_thiouridine
1405	gene_silenced_by_dna_methylation	gene_silenced_by_dna_methylation
1406	engineered_foreign_transposable_element_gene	engineered_foreign_transposable_element_gene
1407	processed_pseudogene	processed_pseudogene
1408	supercontig	supercontig
1409	trna_encoding	trna_encoding
1410	reciprocal_chromosomal_translocation	reciprocal_chromosomal_translocation
1411	tasirna	tasirna
1412	hoogsteen_base_pair	hoogsteen_base_pair
1413	regional_centromere_inner_repeat_region	regional_centromere_inner_repeat_region
1414	yac_end	yac_end
1415	purine_transition	purine_transition
1416	c_d_box_snorna	c_d_box_snorna
1417	snorna_primary_transcript	snorna_primary_transcript
1418	v_vj_cluster	v_vj_cluster
1419	intronic_regulatory_region	intronic_regulatory_region
1420	u3_ltr_region	u3_ltr_region
1421	attenuator	attenuator
1422	three_prime_noncoding_exon	three_prime_noncoding_exon
1423	u14_snorna_primary_transcript	u14_snorna_primary_transcript
1424	d_gene_recombination_feature	d_gene_recombination_feature
1425	mte	mte
1426	gcvb_rna	gcvb_rna
1427	rst	rst
1428	operator	operator
1429	ring_chromosome	ring_chromosome
1430	ndm2_motif	ndm2_motif
1431	h3k4_dimethylation_site	h3k4_dimethylation_site
1432	selenocysteine_trna_primary_transcript	selenocysteine_trna_primary_transcript
1433	edited_transcript_feature	edited_transcript_feature
1434	stop_codon_redefined_as_pyrrolysine	stop_codon_redefined_as_pyrrolysine
1435	homo_compound_chromosome	homo_compound_chromosome
1436	foreign_gene	foreign_gene
1437	four_demethylwyosine	four_demethylwyosine
1438	guide_rna	guide_rna
1439	three_methylpseudouridine	three_methylpseudouridine
1440	inversion_derived_aneuploid_chromosome	inversion_derived_aneuploid_chromosome
1441	decreased_transcript_stability_variant	decreased_transcript_stability_variant
1442	lincrna_gene	lincrna_gene
1443	specific_recombination_site	specific_recombination_site
1444	inosine	inosine
1445	foreign_transposable_element	foreign_transposable_element
1446	d_gene	d_gene
1447	bipartite_inversion	bipartite_inversion
1448	engineered_plasmid	engineered_plasmid
1449	gene_group_regulatory_region	gene_group_regulatory_region
1450	vd_gene	vd_gene
1451	regulatory_region	regulatory_region
1452	sl11_acceptor_site	sl11_acceptor_site
1453	guide_rna_region	guide_rna_region
1454	modified_base	modified_base
1455	elongated_polypeptide_c_terminal	elongated_polypeptide_c_terminal
1456	three_ten_helix	three_ten_helix
1457	elongated_in_frame_polypeptide_n_terminal_elongation	elongated_in_frame_polypeptide_n_terminal_elongation
1458	sarcin_like_rna_motif	sarcin_like_rna_motif
1459	minus_1_translationally_frameshifted	minus_1_translationally_frameshifted
1460	modified_l_alanine	modified_l_alanine
1461	inversion_cum_translocation	inversion_cum_translocation
1462	tag	tag
1463	uninverted_interchromosomal_transposition	uninvert_inter_transposition
1464	cryptic_gene	cryptic_gene
1465	pericentric	pericentric
1466	transgenic	transgenic
1467	genomic_clone	genomic_clone
1468	chromosome_breakage_sequence	chromosome_breakage_sequence
1469	d_j_cluster	d_j_cluster
1470	beta_turn_type_six_a_one	beta_turn_type_six_a_one
1471	ribosome_entry_site	ribosome_entry_site
1472	left_handed_peptide_helix	left_handed_peptide_helix
1473	dna_aptamer	dna_aptamer
1474	i_motif	i_motif
1475	deficient_intrachromosomal_transposition	d_intrachr_transposition
1476	single_stranded_dna_chromosome	single_stranded_dna_chromosome
1477	methylated_c	methylated_c
1478	clone_end	clone_end
1479	ligation_based_read	ligation_based_read
1480	expressed_sequence_assembly	expressed_sequence_assembly
1481	five_two_prime_o_dimethyluridine	five_two_prime_o_dimethyluridine
1482	histidine_trna_primary_transcript	histidine_trna_primary_transcript
1483	orthologous_region	orthologous_region
1484	valine_trna_primary_transcript	valine_trna_primary_transcript
1485	operon_member	operon_member
1486	missense_codon	missense_codon
1487	bacterial_rnapol_promoter_sigma54	bacterial_rnapol_promoter_sigma54
1488	gene_group	gene_group
1489	small_regulatory_ncrna	small_regulatory_ncrna
1490	intrachromosomal_duplication	intrachromosomal_duplication
1491	non_conservative_amino_acid_substitution	non_conservative_amino_acid_substitution
1492	uaa_stop_codon_signal	uaa_stop_codon_signal
1493	h3k36_methylation_site	h3k36_methylation_site
1494	transcript_variant	transcript_variant
1495	minus_2_frameshift	minus_2_frameshift
1496	organelle_sequence	organelle_sequence
1497	initiator_codon_change	initiator_codon_change
1498	cryptic_prophage	cryptic_prophage
1499	micf_rna	micf_rna
1500	direct_tandem_duplication	direct_tandem_duplication
1501	conserved	conserved
1502	telomerase_rna	telomerase_rna
1503	u6atac_snrna	u6atac_snrna
1504	attb_site	attb_site
1505	gene_array_member	gene_array_member
1506	polyadenylated_mrna	polyadenylated_mrna
1507	symbiosis_island	symbiosis_island
1508	polymorphic_variant	polymorphic_variant
1509	splice_junction	splice_junction
1510	fingerprint_map	fingerprint_map
1511	single_strand_restriction_enzyme_cleavage_site	single_strand_restriction_enzyme_cleavage_site
1512	wyosine	wyosine
1513	uga_stop_codon_signal	uga_stop_codon_signal
1514	minus_24_signal	minus_24_signal
1515	cytoplasmic_polypeptide_region	cytoplasmic_polypeptide_region
1516	h4k_acylation_region	h4k_acylation_region
1517	one_two_prime_o_dimethylguanosine	one_two_prime_o_dimethylguanosine
1518	rh_map	rh_map
1519	silenced_by_dna_modification	silenced_by_dna_modification
1520	inactive_catalytic_site	inactive_catalytic_site
1521	anticodon	anticodon
1522	seven_deazaguanosine	seven_deazaguanosine
1523	asparagine	asparagine
1524	probe	probe
1525	defective_conjugative_transposon	defective_conjugative_transposon
1526	archaeosine	archaeosine
1527	molecular_contact_region	molecular_contact_region
1528	nested_repeat	nested_repeat
1529	membrane_structure	membrane_structure
1530	contig_collection	contig_collection
1531	tetraloop	tetraloop
1532	coding_conserved_region	coding_conserved_region
1533	long_terminal_repeat	long_terminal_repeat
1534	vertebrate_immune_system_gene_recombination_signal_feature	vertebrate_immune_system_gene_recombination_signal_feature
1535	untranslated_region_polycistronic_mrna	untranslated_region_polycistronic_mrna
1536	leucine_trna_primary_transcript	leucine_trna_primary_transcript
1537	high_identity_region	high_identity_region
1538	circular_single_stranded_dna_chromosome	circular_single_stranded_dna_chromosome
1539	nuclear_rim_localization_signal	nuclear_rim_localization_signal
1540	isoleucyl_trna	isoleucyl_trna
1541	insertion_breakpoint	insertion_breakpoint
1542	5_prime_utr_variant	five_prime_utr_variant
1543	transgene	transgene
1544	mrna_region	mrna_region
1545	transcript_attribute	transcript_attribute
1546	serine_threonine_staple_motif	serine_threonine_staple_motif
1547	protein_coding	protein_coding
1548	enhancer_bound_by_factor	enhancer_bound_by_factor
1549	recoded_by_translational_bypass	recoded_by_translational_bypass
1550	operon	operon
1551	monocistronic_transcript	monocistronic_transcript
1552	reciprocal	reciprocal
1553	polyadenylated	polyadenylated
1554	unigene_cluster	unigene_cluster
1555	vertebrate_immunoglobulin_t_cell_receptor_rearranged_gene_cluster	vertebrate_ig_t_cell_receptor_rearranged_gene_cluster
1556	gene_cassette_member	gene_cassette_member
1557	stop_codon_read_through	stop_codon_read_through
1558	gene_with_transcript_with_translational_frameshift	gene_with_transcript_with_translational_frameshift
1559	variant_quality	variant_quality
1560	mnp	mnp
1561	glutamic_acid	glutamic_acid
1562	y_prime_element	y_prime_element
1563	beta_turn	beta_turn
1564	pathogenic_island	pathogenic_island
1565	ust_match	ust_match
1566	transcript_bound_by_protein	transcript_bound_by_protein
1567	n6_methyladenosine	n6_methyladenosine
1568	cyanelle_chromosome	cyanelle_chromosome
1569	orit	orit
1570	maternally_imprinted	maternally_imprinted
1571	chloroplast_chromosome	chloroplast_chromosome
1572	minicircle_gene	minicircle_gene
1573	polypeptide_catalytic_motif	polypeptide_catalytic_motif
1574	rnapol_iii_promoter_type_2	rnapol_iii_promoter_type_2
1575	no_output	no_output
1576	interior_coding_exon	interior_coding_exon
1577	five_taurinomethyl_two_thiouridine	five_taurinomethyl_two_thiouridine
1578	h3k9_trimethylation_site	h3k9_trimethylation_site
1579	transcript_secondary_structure_variant	transcript_secondary_structure_variant
1580	polypeptide	polypeptide
1581	splice_donor_5th_base_variant	splice_donor_5th_base_variant
1582	polymerase_synthesis_read	polymerase_synthesis_read
1583	enhancer_binding_site	enhancer_binding_site
1584	nucleotide_to_protein_binding_site	nucleotide_to_protein_binding_site
1585	beta_turn_left_handed_type_two	beta_turn_left_handed_type_two
1586	invalidated_by_genomic_polya_primed_cdna	invalidated_by_genomic_polya_primed_cdna
1587	gene_with_edited_transcript	gene_with_edited_transcript
1588	dmv1_motif	dmv1_motif
1589	minus_12_signal	minus_12_signal
1590	post_translationally_modified_region	post_translationally_modified_region
1591	proline	proline
1592	flanking_region	flanking_region
1593	two_methylthio_n6_isopentenyladenosine	two_methylthio_n6_isopentenyladenosine
1594	polypyrimidine_tract	polypyrimidine_tract
1595	five_methoxyuridine	five_methoxyuridine
1596	gene_to_gene_feature	gene_to_gene_feature
1597	bac_cloned_genomic_insert	bac_cloned_genomic_insert
1598	j_heptamer	j_heptamer
1599	three_prime_ust	three_prime_ust
1600	n6_2_prime_o_dimethyladenosine	n6_2_prime_o_dimethyladenosine
1601	trans_splice_site	trans_splice_site
1602	de_novo_variant	de_novo_variant
1603	engineered_rescue_region	engineered_rescue_region
1604	nucleomorph_gene	nucleomorph_gene
1605	mrna_attribute	mrna_attribute
1606	five_prime_three_prime_overlap	five_prime_three_prime_overlap
1607	group_i_intron	group_i_intron
1608	d_cluster	d_cluster
1609	open_chromatin_region	open_chromatin_region
1610	genomic_dna	genomic_dna
1611	inside_intron	inside_intron
1612	hammerhead_ribozyme	hammerhead_ribozyme
1613	five_prime_d_heptamer	five_prime_d_heptamer
1614	intronic_splice_enhancer	intronic_splice_enhancer
1615	modified_adenosine	modified_adenosine
1616	five_carboxymethylaminomethyluridine	five_carboxymethylaminomethyluridine
1617	repeat_region	repeat_region
1618	repeat_unit	repeat_unit
1619	double_stranded_dna_chromosome	double_stranded_dna_chromosome
1620	heritable_phenotypic_marker	heritable_phenotypic_marker
1621	template_region	template_region
1622	primary_transcript_region	primary_transcript_region
1623	mitochondrial_dna	mitochondrial_dna
1624	transcript_region	transcript_region
1625	histone_acetylation_site	histone_acetylation_site
1626	ribozyme	ribozyme
1627	matrix_attachment_site	matrix_attachment_site
1628	imprinted	imprinted
1629	polypeptide_sequence_variant	polypeptide_sequence_variant
1630	est	est
1631	rna_motif	rna_motif
1632	polypeptide_variation_site	polypeptide_variation_site
1633	class_i_rna	class_i_rna
1634	oligo	oligo
1635	stop_codon_signal	stop_codon_signal
1636	hypoploid	hypoploid
1637	exemplar_mrna	exemplar_mrna
1638	experimentally_defined_binding_region	experimentally_defined_binding_region
1639	c_to_g_transversion	c_to_g_transversion
1640	active_peptide	active_peptide
1641	mannosyl_queuosine	mannosyl_queuosine
1642	gene_with_stop_codon_redefined_as_pyrrolysine	gene_with_stop_codon_redefined_as_pyrrolysine
1643	queuosine	queuosine
1644	lna_oligo	lna_oligo
1645	independently_known	independently_known
1646	proviral_region	proviral_region
1647	capped	capped
1648	minus_1_frameshift_variant	minus_1_frameshift_variant
1649	direction_attribute	direction_attribute
1650	micronuclear_chromosome	micronuclear_chromosome
1651	pseudogene_by_unequal_crossing_over	pseudogene_by_unequal_crossing_over
1652	one_two_prime_o_dimethyladenosine	one_two_prime_o_dimethyladenosine
1653	dpe_motif	dpe_motif
1654	frame_restoring_variant	frame_restoring_variant
1655	seryl_trna	seryl_trna
1656	structural_variant	structural_variant
1657	regulatory_promoter_element	regulatory_promoter_element
1658	integration_excision_site	integration_excision_site
1659	noncoding_region_of_exon	noncoding_region_of_exon
1660	rnase_mrp_rna	rnase_mrp_rna
1661	nuclear_export_signal	nuclear_export_signal
1662	five_methoxycarbonylmethyluridine	five_methoxycarbonylmethyluridine
1663	exon_of_single_exon_gene	exon_of_single_exon_gene
1664	gene_with_dicistronic_primary_transcript	gene_with_dicistronic_primary_transcript
1665	sequence_secondary_structure	sequence_secondary_structure
1666	bacterial_rnapol_promoter_sigma_70	bacterial_rnapol_promoter_sigma_70
1667	tiling_path	tiling_path
1668	nuclear_sequence	nuclear_sequence
1669	contig	contig
1670	quality_value	quality_value
1671	kozak_sequence	kozak_sequence
1672	population_specific_variant	population_specific_variant
1673	catalytic_residue	catalytic_residue
1674	inversion_site	inversion_site
1675	aspartic_acid	aspartic_acid
1676	dif_site	dif_site
1677	mirna_gene	mirna_gene
1678	valyl_trna	valyl_trna
1679	inverted_tandem_duplication	inverted_tandem_duplication
1680	cis_regulatory_frameshift_element	cis_regulatory_frameshift_element
1681	minisatellite	minisatellite
1682	assembly_component	assembly_component
1683	low_complexity_region	low_complexity_region
1684	morpholino_backbone	morpholino_backbone
1685	designed_sequence	designed_sequence
1686	n6_n6_2_prime_o_trimethyladenosine	n6_n6_2_prime_o_trimethyladenosine
1687	rna_polymerase_promoter	rna_polymerase_promoter
1688	v_gene_recombination_feature	v_gene_recombination_feature
1689	five_carboxymethylaminomethyl_two_thiouridine	five_carboxymethylaminomethyl_two_thiouridine
1690	free_ring_duplication	free_ring_duplication
1691	point_centromere	point_centromere
1692	dicistronic_mrna	dicistronic_mrna
1693	interchromosomal	interchromosomal
1694	uncharacterised_chromosomal_mutation	uncharacterised_chromosomal_mutation
1695	five_prime_cis_splice_site	five_prime_cis_splice_site
1696	octamer_motif	octamer_motif
1697	encodes_overlapping_peptides_different_start	encodes_overlapping_peptides_different_start
1698	ss_rna_viral_sequence	ss_rna_viral_sequence
1699	indel	indel
1700	dicistronic_primary_transcript	dicistronic_primary_transcript
1701	protein_binding_site	protein_binding_site
1702	polycistronic	polycistronic
1703	asparagine_trna_primary_transcript	asparagine_trna_primary_transcript
1704	splice_enhancer	splice_enhancer
1705	aneuploid_chromosome	aneuploid_chromosome
1706	peroxywybutosine	peroxywybutosine
1707	modified_l_aspartic_acid	modified_l_aspartic_acid
1708	engineered_episome	engineered_episome
1709	rnai_reagent	rnai_reagent
1710	rasirna	rasirna
1711	tmrna_region	tmrna_region
1712	increased_transcript_level_variant	increased_transcript_level_variant
1713	bacterial_rnapol_promoter	bacterial_rnapol_promoter
1714	mitochondrial_sequence	mitochondrial_sequence
1715	trinucleotide_repeat_microsatellite_feature	trinuc_repeat_microsat
1716	post_translationally_regulated_by_protein_stability	post_translationally_regulated_by_protein_stability
1717	nc_primary_transcript	nc_primary_transcript
1718	iron_responsive_element	iron_responsive_element
1719	v_d_dj_j_cluster	v_d_dj_j_cluster
1720	forward	forward
1721	proviral_location	proviral_location
1722	histone_binding_site	histone_binding_site
1723	promoter_element	promoter_element
1724	pse_motif	pse_motif
1725	beta_turn_type_eight	beta_turn_type_eight
1726	double	double
1727	cds_supported_by_est_or_cdna_data	cds_supported_by_est_or_cdna_data
1728	double_stranded_rna_chromosome	double_stranded_rna_chromosome
1729	modified_l_glutamic_acid	modified_l_glutamic_acid
1730	polypeptide_nest_motif	polypeptide_nest_motif
1731	translational_frameshift	translational_frameshift
1732	three_prime_terminal_inverted_repeat	three_prime_terminal_inverted_repeat
1733	pseudogenic_trna	pseudogenic_trna
1734	cap	cap
1735	five_prime_coding_exon	five_prime_coding_exon
1736	enzymatic	enzymatic
1737	interior_exon	interior_exon
1738	genetic_marker	genetic_marker
1739	a_to_g_transition	a_to_g_transition
1740	two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine	two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine
1741	isre	isre
1742	maternally_imprinted_gene	maternally_imprinted_gene
1743	circular	circular
1744	h_pseudoknot	h_pseudoknot
1745	intermediate_element	intermediate_element
1746	transcript	transcript
1747	pseudogene	pseudogene
1748	direct_repeat	direct_repeat
1749	bacterial_terminator	bacterial_terminator
1750	diplotype	diplotype
1751	metal_binding_site	metal_binding_site
1752	dj_gene	dj_gene
1753	two_prime_o_methyladenosine	two_prime_o_methyladenosine
1754	splice_region_variant	splice_region_variant
1755	aspe_primer	aspe_primer
1756	restriction_enzyme_binding_site	restriction_enzyme_binding_site
1757	bac	bac
1758	dj_j_cluster	dj_j_cluster
1759	h3k36_dimethylation_site	h3k36_dimethylation_site
1760	trans_splice_donor_site	trans_splice_donor_site
1761	gene_variant	gene_variant
1762	conformational_change_variant	conformational_change_variant
1763	h3k36_monomethylation_site	h3k36_monomethylation_site
1764	nucleic_acid	nucleic_acid
1765	invalidated_by_chimeric_cdna	invalidated_by_chimeric_cdna
1766	histidine	histidine
1767	gene_component_region	gene_component_region
1768	primer_match	primer_match
1769	trna_primary_transcript	trna_primary_transcript
1770	loxp_site	loxp_site
1771	serine	serine
1772	propeptide	propeptide
1773	five_prime_open_reading_frame	five_prime_open_reading_frame
1774	schellmann_loop_six	schellmann_loop_six
1775	shine_dalgarno_sequence	shine_dalgarno_sequence
1776	sp6_rna_polymerase_promoter	sp6_rna_polymerase_promoter
1777	centromere_dna_element_iii	centromere_dna_element_iii
1778	lysine_trna_primary_transcript	lysine_trna_primary_transcript
1779	j_c_cluster	j_c_cluster
1780	assortment_derived_deficiency	assortment_derived_deficiency
1781	mirna_primary_transcript	mirna_primary_transcript
1782	rrna_5s	rrna_5s
1783	leucyl_trna	leucyl_trna
1784	inverted_intrachromosomal_transposition	invert_intra_transposition
1785	enzymatic_rna	enzymatic_rna
1786	germline_variant	germline_variant
1787	negatively_autoregulated	negatively_autoregulated
1788	benign_variant	benign_variant
1789	anchor_region	anchor_region
1790	exon	exon
1791	beta_turn_type_six_a	beta_turn_type_six_a
1792	random_sequence	random_sequence
1793	partially_characterised_chromosomal_mutation	partially_characterised_chromosomal_mutation
1794	rna	rna
1795	core_promoter_element	core_promoter_element
1796	restriction_enzyme_single_strand_overhang	restriction_enzyme_single_strand_overhang
1797	ss_oligo	ss_oligo
1798	histone_methylation_site	histone_methylation_site
1799	inversion_derived_duplication_plus_aneuploid	inversion_derived_duplication_plus_aneuploid
1800	transcript_bound_by_nucleic_acid	transcript_bound_by_nucleic_acid
1801	intein_containing	intein_containing
1802	h_aca_box_snorna_encoding	h_aca_box_snorna_encoding
1803	rrna_cleavage_rna	rrna_cleavage_rna
1804	enhancer_trap_construct	enhancer_trap_construct
1805	gamma_turn_inverse	gamma_turn_inverse
1806	three_prime_d_nonamer	three_prime_d_nonamer
1807	paternal_variant	paternal_variant
1808	level_of_transcript_variant	level_of_transcript_variant
1809	selenocysteinyl_trna	selenocysteinyl_trna
1810	gene_silenced_by_histone_methylation	gene_silenced_by_histone_methylation
1811	u11_snrna	u11_snrna
1812	scrna	scrna
1813	gene_with_stop_codon_redefined_as_selenocysteine	gene_with_stop_codon_redefined_as_selenocysteine
1814	silencer	silencer
1815	sage_tag	sage_tag
1816	mrna_with_minus_1_frameshift	mrna_with_minus_1_frameshift
1817	nuclear_gene	nuclear_gene
1818	cds_supported_by_domain_match_data	cds_supported_by_domain_match_data
1819	internal_shine_dalgarno_sequence	internal_shine_dalgarno_sequence
1820	prolyl_trna	prolyl_trna
1821	lysidine	lysidine
1822	beta_bulge	beta_bulge
1823	post_translationally_regulated_by_protein_modification	post_translationally_regulated_by_protein_modification
1824	splice_donor_variant	splice_donor_variant
1825	ncrna	ncrna
1826	grna_gene	grna_gene
1827	enhancer	enhancer
1828	polymorphic_sequence_variant	polymorphic_sequence_variant
1829	three_prime_clip	three_prime_clip
1830	frameshift_variant	frameshift_variant
1831	insertional	insertional
1832	non_processed_pseudogene	non_processed_pseudogene
\.


--
-- Name: featuregroup_featuregroup_id_seq; Type: SEQUENCE SET; Schema: frange; Owner: kmr44
--

SELECT pg_catalog.setval('frange.featuregroup_featuregroup_id_seq', 1, false);


--
-- Name: acquisition_acquisition_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.acquisition_acquisition_id_seq', 1, false);


--
-- Name: acquisition_relationship_acquisition_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.acquisition_relationship_acquisition_relationship_id_seq', 1, false);


--
-- Name: acquisitionprop_acquisitionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.acquisitionprop_acquisitionprop_id_seq', 1, false);


--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.analysis_analysis_id_seq', 1, false);


--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.analysisfeature_analysisfeature_id_seq', 1, false);


--
-- Name: analysisfeatureprop_analysisfeatureprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.analysisfeatureprop_analysisfeatureprop_id_seq', 1, false);


--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.analysisprop_analysisprop_id_seq', 1, false);


--
-- Name: arraydesign_arraydesign_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.arraydesign_arraydesign_id_seq', 1, false);


--
-- Name: arraydesignprop_arraydesignprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.arraydesignprop_arraydesignprop_id_seq', 1, false);


--
-- Name: assay_assay_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.assay_assay_id_seq', 1, false);


--
-- Name: assay_biomaterial_assay_biomaterial_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.assay_biomaterial_assay_biomaterial_id_seq', 1, false);


--
-- Name: assay_project_assay_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.assay_project_assay_project_id_seq', 1, false);


--
-- Name: assayprop_assayprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.assayprop_assayprop_id_seq', 1, false);


--
-- Name: biomaterial_biomaterial_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.biomaterial_biomaterial_id_seq', 1, false);


--
-- Name: biomaterial_dbxref_biomaterial_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.biomaterial_dbxref_biomaterial_dbxref_id_seq', 1, false);


--
-- Name: biomaterial_relationship_biomaterial_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.biomaterial_relationship_biomaterial_relationship_id_seq', 1, false);


--
-- Name: biomaterial_treatment_biomaterial_treatment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.biomaterial_treatment_biomaterial_treatment_id_seq', 1, false);


--
-- Name: biomaterialprop_biomaterialprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.biomaterialprop_biomaterialprop_id_seq', 1, false);


--
-- Name: cell_line_cell_line_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_cell_line_id_seq', 1, false);


--
-- Name: cell_line_cvterm_cell_line_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_cvterm_cell_line_cvterm_id_seq', 1, false);


--
-- Name: cell_line_cvtermprop_cell_line_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_cvtermprop_cell_line_cvtermprop_id_seq', 1, false);


--
-- Name: cell_line_dbxref_cell_line_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_dbxref_cell_line_dbxref_id_seq', 1, false);


--
-- Name: cell_line_feature_cell_line_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_feature_cell_line_feature_id_seq', 1, false);


--
-- Name: cell_line_library_cell_line_library_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_library_cell_line_library_id_seq', 1, false);


--
-- Name: cell_line_pub_cell_line_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_pub_cell_line_pub_id_seq', 1, false);


--
-- Name: cell_line_relationship_cell_line_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_relationship_cell_line_relationship_id_seq', 1, false);


--
-- Name: cell_line_synonym_cell_line_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_line_synonym_cell_line_synonym_id_seq', 1, false);


--
-- Name: cell_lineprop_cell_lineprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_lineprop_cell_lineprop_id_seq', 1, false);


--
-- Name: cell_lineprop_pub_cell_lineprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cell_lineprop_pub_cell_lineprop_pub_id_seq', 1, false);


--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.chadoprop_chadoprop_id_seq', 1, false);


--
-- Name: channel_channel_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.channel_channel_id_seq', 1, false);


--
-- Name: contact_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.contact_contact_id_seq', 2, true);


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.contact_relationship_contact_relationship_id_seq', 1, false);


--
-- Name: control_control_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.control_control_id_seq', 1, false);


--
-- Name: cv_cv_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cv_cv_id_seq', 11, true);


--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cvprop_cvprop_id_seq', 1, false);


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cvterm_cvterm_id_seq', 51, true);


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cvterm_dbxref_cvterm_dbxref_id_seq', 1, false);


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cvterm_relationship_cvterm_relationship_id_seq', 1, false);


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cvtermpath_cvtermpath_id_seq', 1, false);


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cvtermprop_cvtermprop_id_seq', 1, false);


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.cvtermsynonym_cvtermsynonym_id_seq', 1, false);


--
-- Name: db_db_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.db_db_id_seq', 3, true);


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.dbxref_dbxref_id_seq', 50, true);


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.dbxrefprop_dbxrefprop_id_seq', 1, false);


--
-- Name: eimage_eimage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.eimage_eimage_id_seq', 1, false);


--
-- Name: element_element_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.element_element_id_seq', 1, false);


--
-- Name: element_relationship_element_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.element_relationship_element_relationship_id_seq', 1, false);


--
-- Name: elementresult_elementresult_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.elementresult_elementresult_id_seq', 1, false);


--
-- Name: elementresult_relationship_elementresult_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.elementresult_relationship_elementresult_relationship_id_seq', 1, false);


--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.environment_cvterm_environment_cvterm_id_seq', 1, false);


--
-- Name: environment_environment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.environment_environment_id_seq', 1, false);


--
-- Name: expression_cvterm_expression_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.expression_cvterm_expression_cvterm_id_seq', 1, false);


--
-- Name: expression_cvtermprop_expression_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.expression_cvtermprop_expression_cvtermprop_id_seq', 1, false);


--
-- Name: expression_expression_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.expression_expression_id_seq', 1, false);


--
-- Name: expression_image_expression_image_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.expression_image_expression_image_id_seq', 1, false);


--
-- Name: expression_pub_expression_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.expression_pub_expression_pub_id_seq', 1, false);


--
-- Name: expressionprop_expressionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.expressionprop_expressionprop_id_seq', 1, false);


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq', 1, false);


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_cvterm_feature_cvterm_id_seq', 1, false);


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_cvterm_pub_feature_cvterm_pub_id_seq', 1, false);


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_cvtermprop_feature_cvtermprop_id_seq', 1, false);


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_dbxref_feature_dbxref_id_seq', 1, false);


--
-- Name: feature_expression_feature_expression_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_expression_feature_expression_id_seq', 1, false);


--
-- Name: feature_expressionprop_feature_expressionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_expressionprop_feature_expressionprop_id_seq', 1, false);


--
-- Name: feature_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_feature_id_seq', 1, false);


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_genotype_feature_genotype_id_seq', 1, false);


--
-- Name: feature_phenotype_feature_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_phenotype_feature_phenotype_id_seq', 1, false);


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_pub_feature_pub_id_seq', 1, false);


--
-- Name: feature_pubprop_feature_pubprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_pubprop_feature_pubprop_id_seq', 1, false);


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_relationship_feature_relationship_id_seq', 1, false);


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_relationship_pub_feature_relationship_pub_id_seq', 1, false);


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_relationshipprop_feature_relationshipprop_id_seq', 1, false);


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq', 1, false);


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_synonym_feature_synonym_id_seq', 1, false);


--
-- Name: feature_uniquename_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.feature_uniquename_seq', 1, false);


--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featureloc_featureloc_id_seq', 1, false);


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featureloc_pub_featureloc_pub_id_seq', 1, false);


--
-- Name: featuremap_featuremap_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featuremap_featuremap_id_seq', 1, false);


--
-- Name: featuremap_pub_featuremap_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featuremap_pub_featuremap_pub_id_seq', 1, false);


--
-- Name: featurepos_featuremap_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featurepos_featuremap_id_seq', 1, false);


--
-- Name: featurepos_featurepos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featurepos_featurepos_id_seq', 1, false);


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featureprop_featureprop_id_seq', 1, false);


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featureprop_pub_featureprop_pub_id_seq', 1, false);


--
-- Name: featurerange_featurerange_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.featurerange_featurerange_id_seq', 1, false);


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.genotype_genotype_id_seq', 1, false);


--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.genotypeprop_genotypeprop_id_seq', 1, false);


--
-- Name: library_cvterm_library_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.library_cvterm_library_cvterm_id_seq', 1, false);


--
-- Name: library_dbxref_library_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.library_dbxref_library_dbxref_id_seq', 1, false);


--
-- Name: library_feature_library_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.library_feature_library_feature_id_seq', 1, false);


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.library_library_id_seq', 1, false);


--
-- Name: library_pub_library_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.library_pub_library_pub_id_seq', 1, false);


--
-- Name: library_synonym_library_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.library_synonym_library_synonym_id_seq', 1, false);


--
-- Name: libraryprop_libraryprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.libraryprop_libraryprop_id_seq', 1, false);


--
-- Name: libraryprop_pub_libraryprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.libraryprop_pub_libraryprop_pub_id_seq', 1, false);


--
-- Name: magedocumentation_magedocumentation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.magedocumentation_magedocumentation_id_seq', 1, false);


--
-- Name: mageml_mageml_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.mageml_mageml_id_seq', 1, false);


--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.materialized_view_materialized_view_id_seq', 1, false);


--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_contact_nd_experiment_contact_id_seq', 1, false);


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_dbxref_nd_experiment_dbxref_id_seq', 1, false);


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_genotype_nd_experiment_genotype_id_seq', 1, false);


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_nd_experiment_id_seq', 1, false);


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_phenotype_nd_experiment_phenotype_id_seq', 1, false);


--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_project_nd_experiment_project_id_seq', 1, false);


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_protocol_nd_experiment_protocol_id_seq', 1, false);


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_pub_nd_experiment_pub_id_seq', 1, false);


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq', 1, false);


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_stock_nd_experiment_stock_id_seq', 1, false);


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experiment_stockprop_nd_experiment_stockprop_id_seq', 1, false);


--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_experimentprop_nd_experimentprop_id_seq', 1, false);


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_geolocation_nd_geolocation_id_seq', 1, false);


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_geolocationprop_nd_geolocationprop_id_seq', 1, false);


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_protocol_nd_protocol_id_seq', 1, false);


--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_protocol_reagent_nd_protocol_reagent_id_seq', 1, false);


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_protocolprop_nd_protocolprop_id_seq', 1, false);


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_reagent_nd_reagent_id_seq', 1, false);


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_reagent_relationship_nd_reagent_relationship_id_seq', 1, false);


--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.nd_reagentprop_nd_reagentprop_id_seq', 1, false);


--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.organism_dbxref_organism_dbxref_id_seq', 1, false);


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.organism_organism_id_seq', 1, false);


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.organismprop_organismprop_id_seq', 1, false);


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phendesc_phendesc_id_seq', 1, false);


--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq', 1, false);


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phenotype_comparison_phenotype_comparison_id_seq', 1, false);


--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phenotype_cvterm_phenotype_cvterm_id_seq', 1, false);


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phenotype_phenotype_id_seq', 1, false);


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phenstatement_phenstatement_id_seq', 1, false);


--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phylonode_dbxref_phylonode_dbxref_id_seq', 1, false);


--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phylonode_organism_phylonode_organism_id_seq', 1, false);


--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phylonode_phylonode_id_seq', 1, false);


--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phylonode_pub_phylonode_pub_id_seq', 1, false);


--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phylonode_relationship_phylonode_relationship_id_seq', 1, false);


--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phylonodeprop_phylonodeprop_id_seq', 1, false);


--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phylotree_phylotree_id_seq', 1, false);


--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.phylotree_pub_phylotree_pub_id_seq', 1, false);


--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.project_contact_project_contact_id_seq', 1, false);


--
-- Name: project_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.project_project_id_seq', 1, false);


--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.project_pub_project_pub_id_seq', 1, false);


--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.project_relationship_project_relationship_id_seq', 1, false);


--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.projectprop_projectprop_id_seq', 1, false);


--
-- Name: protocol_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.protocol_protocol_id_seq', 1, false);


--
-- Name: protocolparam_protocolparam_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.protocolparam_protocolparam_id_seq', 1, false);


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.pub_dbxref_pub_dbxref_id_seq', 1, false);


--
-- Name: pub_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.pub_pub_id_seq', 1, true);


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.pub_relationship_pub_relationship_id_seq', 1, false);


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.pubauthor_pubauthor_id_seq', 1, false);


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.pubprop_pubprop_id_seq', 1, false);


--
-- Name: quantification_quantification_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.quantification_quantification_id_seq', 1, false);


--
-- Name: quantification_relationship_quantification_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.quantification_relationship_quantification_relationship_id_seq', 1, false);


--
-- Name: quantificationprop_quantificationprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.quantificationprop_quantificationprop_id_seq', 1, false);


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_cvterm_stock_cvterm_id_seq', 1, false);


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_cvtermprop_stock_cvtermprop_id_seq', 1, false);


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_dbxref_stock_dbxref_id_seq', 1, false);


--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_dbxrefprop_stock_dbxrefprop_id_seq', 1, false);


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_genotype_stock_genotype_id_seq', 1, false);


--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_pub_stock_pub_id_seq', 1, false);


--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_relationship_cvterm_stock_relationship_cvterm_id_seq', 1, false);


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_relationship_pub_stock_relationship_pub_id_seq', 1, false);


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_relationship_stock_relationship_id_seq', 1, false);


--
-- Name: stock_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stock_stock_id_seq', 1, false);


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stockcollection_stock_stockcollection_stock_id_seq', 1, false);


--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stockcollection_stockcollection_id_seq', 1, false);


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stockcollectionprop_stockcollectionprop_id_seq', 1, false);


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stockprop_pub_stockprop_pub_id_seq', 1, false);


--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.stockprop_stockprop_id_seq', 1, false);


--
-- Name: study_assay_study_assay_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.study_assay_study_assay_id_seq', 1, false);


--
-- Name: study_study_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.study_study_id_seq', 1, false);


--
-- Name: studydesign_studydesign_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.studydesign_studydesign_id_seq', 1, false);


--
-- Name: studydesignprop_studydesignprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.studydesignprop_studydesignprop_id_seq', 1, false);


--
-- Name: studyfactor_studyfactor_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.studyfactor_studyfactor_id_seq', 1, false);


--
-- Name: studyfactorvalue_studyfactorvalue_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.studyfactorvalue_studyfactorvalue_id_seq', 1, false);


--
-- Name: studyprop_feature_studyprop_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.studyprop_feature_studyprop_feature_id_seq', 1, false);


--
-- Name: studyprop_studyprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.studyprop_studyprop_id_seq', 1, false);


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.synonym_synonym_id_seq', 1, false);


--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.tableinfo_tableinfo_id_seq', 1, false);


--
-- Name: treatment_treatment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: kmr44
--

SELECT pg_catalog.setval('public.treatment_treatment_id_seq', 1, false);


--
-- Name: sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq; Type: SEQUENCE SET; Schema: so; Owner: kmr44
--

SELECT pg_catalog.setval('so.sequence_cv_lookup_table_sequence_cv_lookup_table_id_seq', 1832, true);


--
-- Name: featuregroup featuregroup_c1; Type: CONSTRAINT; Schema: frange; Owner: kmr44
--

ALTER TABLE ONLY frange.featuregroup
    ADD CONSTRAINT featuregroup_c1 UNIQUE (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand);


--
-- Name: featuregroup featuregroup_pkey; Type: CONSTRAINT; Schema: frange; Owner: kmr44
--

ALTER TABLE ONLY frange.featuregroup
    ADD CONSTRAINT featuregroup_pkey PRIMARY KEY (featuregroup_id);


--
-- Name: gencode_codon_aa gencode_codon_unique; Type: CONSTRAINT; Schema: genetic_code; Owner: kmr44
--

ALTER TABLE ONLY genetic_code.gencode_codon_aa
    ADD CONSTRAINT gencode_codon_unique UNIQUE (gencode_id, codon);


--
-- Name: gencode gencode_pkey; Type: CONSTRAINT; Schema: genetic_code; Owner: kmr44
--

ALTER TABLE ONLY genetic_code.gencode
    ADD CONSTRAINT gencode_pkey PRIMARY KEY (gencode_id);


--
-- Name: gencode_startcodon gencode_startcodon_unique; Type: CONSTRAINT; Schema: genetic_code; Owner: kmr44
--

ALTER TABLE ONLY genetic_code.gencode_startcodon
    ADD CONSTRAINT gencode_startcodon_unique UNIQUE (gencode_id, codon);


--
-- Name: acquisition acquisition_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition
    ADD CONSTRAINT acquisition_c1 UNIQUE (name);


--
-- Name: acquisition acquisition_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition
    ADD CONSTRAINT acquisition_pkey PRIMARY KEY (acquisition_id);


--
-- Name: acquisition_relationship acquisition_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: acquisition_relationship acquisition_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_pkey PRIMARY KEY (acquisition_relationship_id);


--
-- Name: acquisitionprop acquisitionprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisitionprop
    ADD CONSTRAINT acquisitionprop_c1 UNIQUE (acquisition_id, type_id, rank);


--
-- Name: acquisitionprop acquisitionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisitionprop
    ADD CONSTRAINT acquisitionprop_pkey PRIMARY KEY (acquisitionprop_id);


--
-- Name: analysis analysis_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysis
    ADD CONSTRAINT analysis_c1 UNIQUE (program, programversion, sourcename);


--
-- Name: analysis analysis_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysis
    ADD CONSTRAINT analysis_pkey PRIMARY KEY (analysis_id);


--
-- Name: analysisfeature analysisfeature_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeature
    ADD CONSTRAINT analysisfeature_c1 UNIQUE (feature_id, analysis_id);


--
-- Name: analysisfeatureprop analysisfeature_id_type_id_rank; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeatureprop
    ADD CONSTRAINT analysisfeature_id_type_id_rank UNIQUE (analysisfeature_id, type_id, rank);


--
-- Name: analysisfeature analysisfeature_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeature
    ADD CONSTRAINT analysisfeature_pkey PRIMARY KEY (analysisfeature_id);


--
-- Name: analysisfeatureprop analysisfeatureprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeatureprop
    ADD CONSTRAINT analysisfeatureprop_pkey PRIMARY KEY (analysisfeatureprop_id);


--
-- Name: analysisprop analysisprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisprop
    ADD CONSTRAINT analysisprop_c1 UNIQUE (analysis_id, type_id, rank);


--
-- Name: analysisprop analysisprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisprop
    ADD CONSTRAINT analysisprop_pkey PRIMARY KEY (analysisprop_id);


--
-- Name: arraydesign arraydesign_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesign
    ADD CONSTRAINT arraydesign_c1 UNIQUE (name);


--
-- Name: arraydesign arraydesign_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesign
    ADD CONSTRAINT arraydesign_pkey PRIMARY KEY (arraydesign_id);


--
-- Name: arraydesignprop arraydesignprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesignprop
    ADD CONSTRAINT arraydesignprop_c1 UNIQUE (arraydesign_id, type_id, rank);


--
-- Name: arraydesignprop arraydesignprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesignprop
    ADD CONSTRAINT arraydesignprop_pkey PRIMARY KEY (arraydesignprop_id);


--
-- Name: assay_biomaterial assay_biomaterial_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_c1 UNIQUE (assay_id, biomaterial_id, channel_id, rank);


--
-- Name: assay_biomaterial assay_biomaterial_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_pkey PRIMARY KEY (assay_biomaterial_id);


--
-- Name: assay assay_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay
    ADD CONSTRAINT assay_c1 UNIQUE (name);


--
-- Name: assay assay_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay
    ADD CONSTRAINT assay_pkey PRIMARY KEY (assay_id);


--
-- Name: assay_project assay_project_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_project
    ADD CONSTRAINT assay_project_c1 UNIQUE (assay_id, project_id);


--
-- Name: assay_project assay_project_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_project
    ADD CONSTRAINT assay_project_pkey PRIMARY KEY (assay_project_id);


--
-- Name: assayprop assayprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assayprop
    ADD CONSTRAINT assayprop_c1 UNIQUE (assay_id, type_id, rank);


--
-- Name: assayprop assayprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assayprop
    ADD CONSTRAINT assayprop_pkey PRIMARY KEY (assayprop_id);


--
-- Name: biomaterial biomaterial_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial
    ADD CONSTRAINT biomaterial_c1 UNIQUE (name);


--
-- Name: biomaterial_dbxref biomaterial_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_c1 UNIQUE (biomaterial_id, dbxref_id);


--
-- Name: biomaterial_dbxref biomaterial_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_pkey PRIMARY KEY (biomaterial_dbxref_id);


--
-- Name: biomaterial biomaterial_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial
    ADD CONSTRAINT biomaterial_pkey PRIMARY KEY (biomaterial_id);


--
-- Name: biomaterial_relationship biomaterial_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: biomaterial_relationship biomaterial_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_pkey PRIMARY KEY (biomaterial_relationship_id);


--
-- Name: biomaterial_treatment biomaterial_treatment_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_c1 UNIQUE (biomaterial_id, treatment_id);


--
-- Name: biomaterial_treatment biomaterial_treatment_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_pkey PRIMARY KEY (biomaterial_treatment_id);


--
-- Name: biomaterialprop biomaterialprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterialprop
    ADD CONSTRAINT biomaterialprop_c1 UNIQUE (biomaterial_id, type_id, rank);


--
-- Name: biomaterialprop biomaterialprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterialprop
    ADD CONSTRAINT biomaterialprop_pkey PRIMARY KEY (biomaterialprop_id);


--
-- Name: cell_line cell_line_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line
    ADD CONSTRAINT cell_line_c1 UNIQUE (uniquename, organism_id);


--
-- Name: cell_line_cvterm cell_line_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_c1 UNIQUE (cell_line_id, cvterm_id, pub_id, rank);


--
-- Name: cell_line_cvterm cell_line_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_pkey PRIMARY KEY (cell_line_cvterm_id);


--
-- Name: cell_line_cvtermprop cell_line_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvtermprop
    ADD CONSTRAINT cell_line_cvtermprop_c1 UNIQUE (cell_line_cvterm_id, type_id, rank);


--
-- Name: cell_line_cvtermprop cell_line_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvtermprop
    ADD CONSTRAINT cell_line_cvtermprop_pkey PRIMARY KEY (cell_line_cvtermprop_id);


--
-- Name: cell_line_dbxref cell_line_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_dbxref
    ADD CONSTRAINT cell_line_dbxref_c1 UNIQUE (cell_line_id, dbxref_id);


--
-- Name: cell_line_dbxref cell_line_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_dbxref
    ADD CONSTRAINT cell_line_dbxref_pkey PRIMARY KEY (cell_line_dbxref_id);


--
-- Name: cell_line_feature cell_line_feature_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_feature
    ADD CONSTRAINT cell_line_feature_c1 UNIQUE (cell_line_id, feature_id, pub_id);


--
-- Name: cell_line_feature cell_line_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_feature
    ADD CONSTRAINT cell_line_feature_pkey PRIMARY KEY (cell_line_feature_id);


--
-- Name: cell_line_library cell_line_library_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_library
    ADD CONSTRAINT cell_line_library_c1 UNIQUE (cell_line_id, library_id, pub_id);


--
-- Name: cell_line_library cell_line_library_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_library
    ADD CONSTRAINT cell_line_library_pkey PRIMARY KEY (cell_line_library_id);


--
-- Name: cell_line cell_line_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line
    ADD CONSTRAINT cell_line_pkey PRIMARY KEY (cell_line_id);


--
-- Name: cell_line_pub cell_line_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_pub
    ADD CONSTRAINT cell_line_pub_c1 UNIQUE (cell_line_id, pub_id);


--
-- Name: cell_line_pub cell_line_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_pub
    ADD CONSTRAINT cell_line_pub_pkey PRIMARY KEY (cell_line_pub_id);


--
-- Name: cell_line_relationship cell_line_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: cell_line_relationship cell_line_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_pkey PRIMARY KEY (cell_line_relationship_id);


--
-- Name: cell_line_synonym cell_line_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_c1 UNIQUE (synonym_id, cell_line_id, pub_id);


--
-- Name: cell_line_synonym cell_line_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_pkey PRIMARY KEY (cell_line_synonym_id);


--
-- Name: cell_lineprop cell_lineprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop
    ADD CONSTRAINT cell_lineprop_c1 UNIQUE (cell_line_id, type_id, rank);


--
-- Name: cell_lineprop cell_lineprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop
    ADD CONSTRAINT cell_lineprop_pkey PRIMARY KEY (cell_lineprop_id);


--
-- Name: cell_lineprop_pub cell_lineprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop_pub
    ADD CONSTRAINT cell_lineprop_pub_c1 UNIQUE (cell_lineprop_id, pub_id);


--
-- Name: cell_lineprop_pub cell_lineprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop_pub
    ADD CONSTRAINT cell_lineprop_pub_pkey PRIMARY KEY (cell_lineprop_pub_id);


--
-- Name: chadoprop chadoprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.chadoprop
    ADD CONSTRAINT chadoprop_c1 UNIQUE (type_id, rank);


--
-- Name: chadoprop chadoprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.chadoprop
    ADD CONSTRAINT chadoprop_pkey PRIMARY KEY (chadoprop_id);


--
-- Name: channel channel_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.channel
    ADD CONSTRAINT channel_c1 UNIQUE (name);


--
-- Name: channel channel_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.channel
    ADD CONSTRAINT channel_pkey PRIMARY KEY (channel_id);


--
-- Name: contact contact_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_c1 UNIQUE (name);


--
-- Name: contact contact_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_pkey PRIMARY KEY (contact_id);


--
-- Name: contact_relationship contact_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: contact_relationship contact_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_pkey PRIMARY KEY (contact_relationship_id);


--
-- Name: control control_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.control
    ADD CONSTRAINT control_pkey PRIMARY KEY (control_id);


--
-- Name: cv cv_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cv
    ADD CONSTRAINT cv_c1 UNIQUE (name);


--
-- Name: cv cv_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cv
    ADD CONSTRAINT cv_pkey PRIMARY KEY (cv_id);


--
-- Name: cvprop cvprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvprop
    ADD CONSTRAINT cvprop_c1 UNIQUE (cv_id, type_id, rank);


--
-- Name: cvprop cvprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvprop
    ADD CONSTRAINT cvprop_pkey PRIMARY KEY (cvprop_id);


--
-- Name: cvterm cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_c1 UNIQUE (name, cv_id, is_obsolete);


--
-- Name: cvterm cvterm_c2; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_c2 UNIQUE (dbxref_id);


--
-- Name: cvterm_dbxref cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_c1 UNIQUE (cvterm_id, dbxref_id);


--
-- Name: cvterm_dbxref cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_pkey PRIMARY KEY (cvterm_dbxref_id);


--
-- Name: cvterm cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_pkey PRIMARY KEY (cvterm_id);


--
-- Name: cvterm_relationship cvterm_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: cvterm_relationship cvterm_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_pkey PRIMARY KEY (cvterm_relationship_id);


--
-- Name: cvtermpath cvtermpath_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_c1 UNIQUE (subject_id, object_id, type_id, pathdistance);


--
-- Name: cvtermpath cvtermpath_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_pkey PRIMARY KEY (cvtermpath_id);


--
-- Name: cvtermprop cvtermprop_cvterm_id_type_id_value_rank_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_type_id_value_rank_key UNIQUE (cvterm_id, type_id, value, rank);


--
-- Name: cvtermprop cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermprop
    ADD CONSTRAINT cvtermprop_pkey PRIMARY KEY (cvtermprop_id);


--
-- Name: cvtermsynonym cvtermsynonym_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_c1 UNIQUE (cvterm_id, synonym);


--
-- Name: cvtermsynonym cvtermsynonym_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_pkey PRIMARY KEY (cvtermsynonym_id);


--
-- Name: db db_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.db
    ADD CONSTRAINT db_c1 UNIQUE (name);


--
-- Name: db db_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.db
    ADD CONSTRAINT db_pkey PRIMARY KEY (db_id);


--
-- Name: dbxref dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxref
    ADD CONSTRAINT dbxref_c1 UNIQUE (db_id, accession, version);


--
-- Name: dbxref dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxref
    ADD CONSTRAINT dbxref_pkey PRIMARY KEY (dbxref_id);


--
-- Name: dbxrefprop dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxrefprop
    ADD CONSTRAINT dbxrefprop_c1 UNIQUE (dbxref_id, type_id, rank);


--
-- Name: dbxrefprop dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxrefprop
    ADD CONSTRAINT dbxrefprop_pkey PRIMARY KEY (dbxrefprop_id);


--
-- Name: eimage eimage_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.eimage
    ADD CONSTRAINT eimage_pkey PRIMARY KEY (eimage_id);


--
-- Name: element element_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element
    ADD CONSTRAINT element_c1 UNIQUE (feature_id, arraydesign_id);


--
-- Name: element element_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element
    ADD CONSTRAINT element_pkey PRIMARY KEY (element_id);


--
-- Name: element_relationship element_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element_relationship
    ADD CONSTRAINT element_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: element_relationship element_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element_relationship
    ADD CONSTRAINT element_relationship_pkey PRIMARY KEY (element_relationship_id);


--
-- Name: elementresult elementresult_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult
    ADD CONSTRAINT elementresult_c1 UNIQUE (element_id, quantification_id);


--
-- Name: elementresult elementresult_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult
    ADD CONSTRAINT elementresult_pkey PRIMARY KEY (elementresult_id);


--
-- Name: elementresult_relationship elementresult_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: elementresult_relationship elementresult_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_pkey PRIMARY KEY (elementresult_relationship_id);


--
-- Name: environment environment_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.environment
    ADD CONSTRAINT environment_c1 UNIQUE (uniquename);


--
-- Name: environment_cvterm environment_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.environment_cvterm
    ADD CONSTRAINT environment_cvterm_c1 UNIQUE (environment_id, cvterm_id);


--
-- Name: environment_cvterm environment_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.environment_cvterm
    ADD CONSTRAINT environment_cvterm_pkey PRIMARY KEY (environment_cvterm_id);


--
-- Name: environment environment_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.environment
    ADD CONSTRAINT environment_pkey PRIMARY KEY (environment_id);


--
-- Name: expression expression_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression
    ADD CONSTRAINT expression_c1 UNIQUE (uniquename);


--
-- Name: expression_cvterm expression_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvterm
    ADD CONSTRAINT expression_cvterm_c1 UNIQUE (expression_id, cvterm_id, cvterm_type_id);


--
-- Name: expression_cvterm expression_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvterm
    ADD CONSTRAINT expression_cvterm_pkey PRIMARY KEY (expression_cvterm_id);


--
-- Name: expression_cvtermprop expression_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvtermprop
    ADD CONSTRAINT expression_cvtermprop_c1 UNIQUE (expression_cvterm_id, type_id, rank);


--
-- Name: expression_cvtermprop expression_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvtermprop
    ADD CONSTRAINT expression_cvtermprop_pkey PRIMARY KEY (expression_cvtermprop_id);


--
-- Name: expression_image expression_image_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_image
    ADD CONSTRAINT expression_image_c1 UNIQUE (expression_id, eimage_id);


--
-- Name: expression_image expression_image_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_image
    ADD CONSTRAINT expression_image_pkey PRIMARY KEY (expression_image_id);


--
-- Name: expression expression_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression
    ADD CONSTRAINT expression_pkey PRIMARY KEY (expression_id);


--
-- Name: expression_pub expression_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_pub
    ADD CONSTRAINT expression_pub_c1 UNIQUE (expression_id, pub_id);


--
-- Name: expression_pub expression_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_pub
    ADD CONSTRAINT expression_pub_pkey PRIMARY KEY (expression_pub_id);


--
-- Name: expressionprop expressionprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expressionprop
    ADD CONSTRAINT expressionprop_c1 UNIQUE (expression_id, type_id, rank);


--
-- Name: expressionprop expressionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expressionprop
    ADD CONSTRAINT expressionprop_pkey PRIMARY KEY (expressionprop_id);


--
-- Name: feature feature_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: feature_cvterm feature_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_c1 UNIQUE (feature_id, cvterm_id, pub_id, rank);


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_c1 UNIQUE (feature_cvterm_id, dbxref_id);


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_pkey PRIMARY KEY (feature_cvterm_dbxref_id);


--
-- Name: feature_cvterm feature_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_pkey PRIMARY KEY (feature_cvterm_id);


--
-- Name: feature_cvterm_pub feature_cvterm_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_c1 UNIQUE (feature_cvterm_id, pub_id);


--
-- Name: feature_cvterm_pub feature_cvterm_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pkey PRIMARY KEY (feature_cvterm_pub_id);


--
-- Name: feature_cvtermprop feature_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_c1 UNIQUE (feature_cvterm_id, type_id, rank);


--
-- Name: feature_cvtermprop feature_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_pkey PRIMARY KEY (feature_cvtermprop_id);


--
-- Name: feature_dbxref feature_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_dbxref
    ADD CONSTRAINT feature_dbxref_c1 UNIQUE (feature_id, dbxref_id);


--
-- Name: feature_dbxref feature_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_dbxref
    ADD CONSTRAINT feature_dbxref_pkey PRIMARY KEY (feature_dbxref_id);


--
-- Name: feature_expression feature_expression_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expression
    ADD CONSTRAINT feature_expression_c1 UNIQUE (expression_id, feature_id, pub_id);


--
-- Name: feature_expression feature_expression_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expression
    ADD CONSTRAINT feature_expression_pkey PRIMARY KEY (feature_expression_id);


--
-- Name: feature_expressionprop feature_expressionprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expressionprop
    ADD CONSTRAINT feature_expressionprop_c1 UNIQUE (feature_expression_id, type_id, rank);


--
-- Name: feature_expressionprop feature_expressionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expressionprop
    ADD CONSTRAINT feature_expressionprop_pkey PRIMARY KEY (feature_expressionprop_id);


--
-- Name: feature_genotype feature_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_c1 UNIQUE (feature_id, genotype_id, cvterm_id, chromosome_id, rank, cgroup);


--
-- Name: feature_genotype feature_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_pkey PRIMARY KEY (feature_genotype_id);


--
-- Name: feature_phenotype feature_phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_phenotype
    ADD CONSTRAINT feature_phenotype_c1 UNIQUE (feature_id, phenotype_id);


--
-- Name: feature_phenotype feature_phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_phenotype
    ADD CONSTRAINT feature_phenotype_pkey PRIMARY KEY (feature_phenotype_id);


--
-- Name: feature feature_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_pkey PRIMARY KEY (feature_id);


--
-- Name: feature_pub feature_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pub
    ADD CONSTRAINT feature_pub_c1 UNIQUE (feature_id, pub_id);


--
-- Name: feature_pub feature_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pub
    ADD CONSTRAINT feature_pub_pkey PRIMARY KEY (feature_pub_id);


--
-- Name: feature_pubprop feature_pubprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pubprop
    ADD CONSTRAINT feature_pubprop_c1 UNIQUE (feature_pub_id, type_id, rank);


--
-- Name: feature_pubprop feature_pubprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pubprop
    ADD CONSTRAINT feature_pubprop_pkey PRIMARY KEY (feature_pubprop_id);


--
-- Name: feature_relationship feature_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: feature_relationship feature_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_pkey PRIMARY KEY (feature_relationship_id);


--
-- Name: feature_relationship_pub feature_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_c1 UNIQUE (feature_relationship_id, pub_id);


--
-- Name: feature_relationship_pub feature_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pkey PRIMARY KEY (feature_relationship_pub_id);


--
-- Name: feature_relationshipprop feature_relationshipprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_c1 UNIQUE (feature_relationship_id, type_id, rank);


--
-- Name: feature_relationshipprop feature_relationshipprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_pkey PRIMARY KEY (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_c1 UNIQUE (feature_relationshipprop_id, pub_id);


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pkey PRIMARY KEY (feature_relationshipprop_pub_id);


--
-- Name: feature_synonym feature_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_c1 UNIQUE (synonym_id, feature_id, pub_id);


--
-- Name: feature_synonym feature_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_pkey PRIMARY KEY (feature_synonym_id);


--
-- Name: featureloc featureloc_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc
    ADD CONSTRAINT featureloc_c1 UNIQUE (feature_id, locgroup, rank);


--
-- Name: featureloc featureloc_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc
    ADD CONSTRAINT featureloc_pkey PRIMARY KEY (featureloc_id);


--
-- Name: featureloc_pub featureloc_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc_pub
    ADD CONSTRAINT featureloc_pub_c1 UNIQUE (featureloc_id, pub_id);


--
-- Name: featureloc_pub featureloc_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc_pub
    ADD CONSTRAINT featureloc_pub_pkey PRIMARY KEY (featureloc_pub_id);


--
-- Name: featuremap featuremap_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featuremap
    ADD CONSTRAINT featuremap_c1 UNIQUE (name);


--
-- Name: featuremap featuremap_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featuremap
    ADD CONSTRAINT featuremap_pkey PRIMARY KEY (featuremap_id);


--
-- Name: featuremap_pub featuremap_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featuremap_pub
    ADD CONSTRAINT featuremap_pub_pkey PRIMARY KEY (featuremap_pub_id);


--
-- Name: featurepos featurepos_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurepos
    ADD CONSTRAINT featurepos_pkey PRIMARY KEY (featurepos_id);


--
-- Name: featureprop featureprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop
    ADD CONSTRAINT featureprop_c1 UNIQUE (feature_id, type_id, rank);


--
-- Name: featureprop featureprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop
    ADD CONSTRAINT featureprop_pkey PRIMARY KEY (featureprop_id);


--
-- Name: featureprop_pub featureprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop_pub
    ADD CONSTRAINT featureprop_pub_c1 UNIQUE (featureprop_id, pub_id);


--
-- Name: featureprop_pub featureprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop_pub
    ADD CONSTRAINT featureprop_pub_pkey PRIMARY KEY (featureprop_pub_id);


--
-- Name: featurerange featurerange_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurerange
    ADD CONSTRAINT featurerange_pkey PRIMARY KEY (featurerange_id);


--
-- Name: genotype genotype_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotype
    ADD CONSTRAINT genotype_c1 UNIQUE (uniquename);


--
-- Name: genotype genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotype
    ADD CONSTRAINT genotype_pkey PRIMARY KEY (genotype_id);


--
-- Name: genotypeprop genotypeprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotypeprop
    ADD CONSTRAINT genotypeprop_c1 UNIQUE (genotype_id, type_id, rank);


--
-- Name: genotypeprop genotypeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotypeprop
    ADD CONSTRAINT genotypeprop_pkey PRIMARY KEY (genotypeprop_id);


--
-- Name: library library_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library
    ADD CONSTRAINT library_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: library_cvterm library_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_cvterm
    ADD CONSTRAINT library_cvterm_c1 UNIQUE (library_id, cvterm_id, pub_id);


--
-- Name: library_cvterm library_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_cvterm
    ADD CONSTRAINT library_cvterm_pkey PRIMARY KEY (library_cvterm_id);


--
-- Name: library_dbxref library_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_dbxref
    ADD CONSTRAINT library_dbxref_c1 UNIQUE (library_id, dbxref_id);


--
-- Name: library_dbxref library_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_dbxref
    ADD CONSTRAINT library_dbxref_pkey PRIMARY KEY (library_dbxref_id);


--
-- Name: library_feature library_feature_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_feature
    ADD CONSTRAINT library_feature_c1 UNIQUE (library_id, feature_id);


--
-- Name: library_feature library_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_feature
    ADD CONSTRAINT library_feature_pkey PRIMARY KEY (library_feature_id);


--
-- Name: library library_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: library_pub library_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_pub
    ADD CONSTRAINT library_pub_c1 UNIQUE (library_id, pub_id);


--
-- Name: library_pub library_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_pub
    ADD CONSTRAINT library_pub_pkey PRIMARY KEY (library_pub_id);


--
-- Name: library_synonym library_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_synonym
    ADD CONSTRAINT library_synonym_c1 UNIQUE (synonym_id, library_id, pub_id);


--
-- Name: library_synonym library_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_synonym
    ADD CONSTRAINT library_synonym_pkey PRIMARY KEY (library_synonym_id);


--
-- Name: libraryprop libraryprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop
    ADD CONSTRAINT libraryprop_c1 UNIQUE (library_id, type_id, rank);


--
-- Name: libraryprop libraryprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop
    ADD CONSTRAINT libraryprop_pkey PRIMARY KEY (libraryprop_id);


--
-- Name: libraryprop_pub libraryprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop_pub
    ADD CONSTRAINT libraryprop_pub_c1 UNIQUE (libraryprop_id, pub_id);


--
-- Name: libraryprop_pub libraryprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop_pub
    ADD CONSTRAINT libraryprop_pub_pkey PRIMARY KEY (libraryprop_pub_id);


--
-- Name: magedocumentation magedocumentation_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.magedocumentation
    ADD CONSTRAINT magedocumentation_pkey PRIMARY KEY (magedocumentation_id);


--
-- Name: mageml mageml_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.mageml
    ADD CONSTRAINT mageml_pkey PRIMARY KEY (mageml_id);


--
-- Name: materialized_view materialized_view_name_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.materialized_view
    ADD CONSTRAINT materialized_view_name_key UNIQUE (name);


--
-- Name: nd_experiment_contact nd_experiment_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_pkey PRIMARY KEY (nd_experiment_contact_id);


--
-- Name: nd_experiment_dbxref nd_experiment_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_pkey PRIMARY KEY (nd_experiment_dbxref_id);


--
-- Name: nd_experiment_genotype nd_experiment_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_c1 UNIQUE (nd_experiment_id, genotype_id);


--
-- Name: nd_experiment_genotype nd_experiment_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_pkey PRIMARY KEY (nd_experiment_genotype_id);


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_c1 UNIQUE (nd_experiment_id, phenotype_id);


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_pkey PRIMARY KEY (nd_experiment_phenotype_id);


--
-- Name: nd_experiment nd_experiment_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment
    ADD CONSTRAINT nd_experiment_pkey PRIMARY KEY (nd_experiment_id);


--
-- Name: nd_experiment_project nd_experiment_project_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_pkey PRIMARY KEY (nd_experiment_project_id);


--
-- Name: nd_experiment_protocol nd_experiment_protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_pkey PRIMARY KEY (nd_experiment_protocol_id);


--
-- Name: nd_experiment_pub nd_experiment_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_c1 UNIQUE (nd_experiment_id, pub_id);


--
-- Name: nd_experiment_pub nd_experiment_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_pkey PRIMARY KEY (nd_experiment_pub_id);


--
-- Name: nd_experiment_stock_dbxref nd_experiment_stock_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_pkey PRIMARY KEY (nd_experiment_stock_dbxref_id);


--
-- Name: nd_experiment_stock nd_experiment_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_pkey PRIMARY KEY (nd_experiment_stock_id);


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_c1 UNIQUE (nd_experiment_stock_id, type_id, rank);


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_pkey PRIMARY KEY (nd_experiment_stockprop_id);


--
-- Name: nd_experimentprop nd_experimentprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_c1 UNIQUE (nd_experiment_id, type_id, rank);


--
-- Name: nd_experimentprop nd_experimentprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_pkey PRIMARY KEY (nd_experimentprop_id);


--
-- Name: nd_geolocation nd_geolocation_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_geolocation
    ADD CONSTRAINT nd_geolocation_pkey PRIMARY KEY (nd_geolocation_id);


--
-- Name: nd_geolocationprop nd_geolocationprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_c1 UNIQUE (nd_geolocation_id, type_id, rank);


--
-- Name: nd_geolocationprop nd_geolocationprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_pkey PRIMARY KEY (nd_geolocationprop_id);


--
-- Name: nd_protocol nd_protocol_name_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol
    ADD CONSTRAINT nd_protocol_name_key UNIQUE (name);


--
-- Name: nd_protocol nd_protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol
    ADD CONSTRAINT nd_protocol_pkey PRIMARY KEY (nd_protocol_id);


--
-- Name: nd_protocol_reagent nd_protocol_reagent_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_pkey PRIMARY KEY (nd_protocol_reagent_id);


--
-- Name: nd_protocolprop nd_protocolprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_c1 UNIQUE (nd_protocol_id, type_id, rank);


--
-- Name: nd_protocolprop nd_protocolprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_pkey PRIMARY KEY (nd_protocolprop_id);


--
-- Name: nd_reagent nd_reagent_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagent
    ADD CONSTRAINT nd_reagent_pkey PRIMARY KEY (nd_reagent_id);


--
-- Name: nd_reagent_relationship nd_reagent_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_pkey PRIMARY KEY (nd_reagent_relationship_id);


--
-- Name: nd_reagentprop nd_reagentprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_c1 UNIQUE (nd_reagent_id, type_id, rank);


--
-- Name: nd_reagentprop nd_reagentprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_pkey PRIMARY KEY (nd_reagentprop_id);


--
-- Name: organism organism_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organism
    ADD CONSTRAINT organism_c1 UNIQUE (genus, species);


--
-- Name: organism_dbxref organism_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organism_dbxref
    ADD CONSTRAINT organism_dbxref_c1 UNIQUE (organism_id, dbxref_id);


--
-- Name: organism_dbxref organism_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organism_dbxref
    ADD CONSTRAINT organism_dbxref_pkey PRIMARY KEY (organism_dbxref_id);


--
-- Name: organism organism_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: organismprop organismprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organismprop
    ADD CONSTRAINT organismprop_c1 UNIQUE (organism_id, type_id, rank);


--
-- Name: organismprop organismprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organismprop
    ADD CONSTRAINT organismprop_pkey PRIMARY KEY (organismprop_id);


--
-- Name: phendesc phendesc_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_c1 UNIQUE (genotype_id, environment_id, type_id, pub_id);


--
-- Name: phendesc phendesc_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_pkey PRIMARY KEY (phendesc_id);


--
-- Name: phenotype phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_c1 UNIQUE (uniquename);


--
-- Name: phenotype_comparison phenotype_comparison_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_c1 UNIQUE (genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, pub_id);


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_c1 UNIQUE (phenotype_comparison_id, cvterm_id);


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_pkey PRIMARY KEY (phenotype_comparison_cvterm_id);


--
-- Name: phenotype_comparison phenotype_comparison_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pkey PRIMARY KEY (phenotype_comparison_id);


--
-- Name: phenotype_cvterm phenotype_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_c1 UNIQUE (phenotype_id, cvterm_id, rank);


--
-- Name: phenotype_cvterm phenotype_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_pkey PRIMARY KEY (phenotype_cvterm_id);


--
-- Name: phenotype phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_pkey PRIMARY KEY (phenotype_id);


--
-- Name: phenstatement phenstatement_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_c1 UNIQUE (genotype_id, phenotype_id, environment_id, type_id, pub_id);


--
-- Name: phenstatement phenstatement_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_pkey PRIMARY KEY (phenstatement_id);


--
-- Name: phylonode_dbxref phylonode_dbxref_phylonode_id_dbxref_id_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_phylonode_id_dbxref_id_key UNIQUE (phylonode_id, dbxref_id);


--
-- Name: phylonode_dbxref phylonode_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_pkey PRIMARY KEY (phylonode_dbxref_id);


--
-- Name: phylonode_organism phylonode_organism_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_organism
    ADD CONSTRAINT phylonode_organism_phylonode_id_key UNIQUE (phylonode_id);


--
-- Name: phylonode_organism phylonode_organism_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_organism
    ADD CONSTRAINT phylonode_organism_pkey PRIMARY KEY (phylonode_organism_id);


--
-- Name: phylonode phylonode_phylotree_id_left_idx_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_phylotree_id_left_idx_key UNIQUE (phylotree_id, left_idx);


--
-- Name: phylonode phylonode_phylotree_id_right_idx_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_phylotree_id_right_idx_key UNIQUE (phylotree_id, right_idx);


--
-- Name: phylonode phylonode_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_pkey PRIMARY KEY (phylonode_id);


--
-- Name: phylonode_pub phylonode_pub_phylonode_id_pub_id_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_pub
    ADD CONSTRAINT phylonode_pub_phylonode_id_pub_id_key UNIQUE (phylonode_id, pub_id);


--
-- Name: phylonode_pub phylonode_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_pub
    ADD CONSTRAINT phylonode_pub_pkey PRIMARY KEY (phylonode_pub_id);


--
-- Name: phylonode_relationship phylonode_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_pkey PRIMARY KEY (phylonode_relationship_id);


--
-- Name: phylonode_relationship phylonode_relationship_subject_id_object_id_type_id_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_subject_id_object_id_type_id_key UNIQUE (subject_id, object_id, type_id);


--
-- Name: phylonodeprop phylonodeprop_phylonode_id_type_id_value_rank_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonodeprop
    ADD CONSTRAINT phylonodeprop_phylonode_id_type_id_value_rank_key UNIQUE (phylonode_id, type_id, value, rank);


--
-- Name: phylonodeprop phylonodeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonodeprop
    ADD CONSTRAINT phylonodeprop_pkey PRIMARY KEY (phylonodeprop_id);


--
-- Name: phylotree phylotree_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree
    ADD CONSTRAINT phylotree_pkey PRIMARY KEY (phylotree_id);


--
-- Name: phylotree_pub phylotree_pub_phylotree_id_pub_id_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree_pub
    ADD CONSTRAINT phylotree_pub_phylotree_id_pub_id_key UNIQUE (phylotree_id, pub_id);


--
-- Name: phylotree_pub phylotree_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree_pub
    ADD CONSTRAINT phylotree_pub_pkey PRIMARY KEY (phylotree_pub_id);


--
-- Name: project project_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project
    ADD CONSTRAINT project_c1 UNIQUE (name);


--
-- Name: project_contact project_contact_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_contact
    ADD CONSTRAINT project_contact_c1 UNIQUE (project_id, contact_id);


--
-- Name: project_contact project_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_contact
    ADD CONSTRAINT project_contact_pkey PRIMARY KEY (project_contact_id);


--
-- Name: project project_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project
    ADD CONSTRAINT project_pkey PRIMARY KEY (project_id);


--
-- Name: project_pub project_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_pub
    ADD CONSTRAINT project_pub_c1 UNIQUE (project_id, pub_id);


--
-- Name: project_pub project_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_pub
    ADD CONSTRAINT project_pub_pkey PRIMARY KEY (project_pub_id);


--
-- Name: project_relationship project_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_c1 UNIQUE (subject_project_id, object_project_id, type_id);


--
-- Name: project_relationship project_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_pkey PRIMARY KEY (project_relationship_id);


--
-- Name: projectprop projectprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.projectprop
    ADD CONSTRAINT projectprop_c1 UNIQUE (project_id, type_id, rank);


--
-- Name: projectprop projectprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.projectprop
    ADD CONSTRAINT projectprop_pkey PRIMARY KEY (projectprop_id);


--
-- Name: protocol protocol_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocol
    ADD CONSTRAINT protocol_c1 UNIQUE (name);


--
-- Name: protocol protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocol
    ADD CONSTRAINT protocol_pkey PRIMARY KEY (protocol_id);


--
-- Name: protocolparam protocolparam_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocolparam
    ADD CONSTRAINT protocolparam_pkey PRIMARY KEY (protocolparam_id);


--
-- Name: pub pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub
    ADD CONSTRAINT pub_c1 UNIQUE (uniquename);


--
-- Name: pub_dbxref pub_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_dbxref
    ADD CONSTRAINT pub_dbxref_c1 UNIQUE (pub_id, dbxref_id);


--
-- Name: pub_dbxref pub_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_dbxref
    ADD CONSTRAINT pub_dbxref_pkey PRIMARY KEY (pub_dbxref_id);


--
-- Name: pub pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub
    ADD CONSTRAINT pub_pkey PRIMARY KEY (pub_id);


--
-- Name: pub_relationship pub_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: pub_relationship pub_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_pkey PRIMARY KEY (pub_relationship_id);


--
-- Name: pubauthor pubauthor_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubauthor
    ADD CONSTRAINT pubauthor_c1 UNIQUE (pub_id, rank);


--
-- Name: pubauthor pubauthor_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubauthor
    ADD CONSTRAINT pubauthor_pkey PRIMARY KEY (pubauthor_id);


--
-- Name: pubprop pubprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubprop
    ADD CONSTRAINT pubprop_c1 UNIQUE (pub_id, type_id, rank);


--
-- Name: pubprop pubprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubprop
    ADD CONSTRAINT pubprop_pkey PRIMARY KEY (pubprop_id);


--
-- Name: quantification quantification_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification
    ADD CONSTRAINT quantification_c1 UNIQUE (name, analysis_id);


--
-- Name: quantification quantification_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification
    ADD CONSTRAINT quantification_pkey PRIMARY KEY (quantification_id);


--
-- Name: quantification_relationship quantification_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification_relationship
    ADD CONSTRAINT quantification_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: quantification_relationship quantification_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification_relationship
    ADD CONSTRAINT quantification_relationship_pkey PRIMARY KEY (quantification_relationship_id);


--
-- Name: quantificationprop quantificationprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantificationprop
    ADD CONSTRAINT quantificationprop_c1 UNIQUE (quantification_id, type_id, rank);


--
-- Name: quantificationprop quantificationprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantificationprop
    ADD CONSTRAINT quantificationprop_pkey PRIMARY KEY (quantificationprop_id);


--
-- Name: stock stock_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: stock_cvterm stock_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_c1 UNIQUE (stock_id, cvterm_id, pub_id, rank);


--
-- Name: stock_cvterm stock_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_pkey PRIMARY KEY (stock_cvterm_id);


--
-- Name: stock_cvtermprop stock_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_c1 UNIQUE (stock_cvterm_id, type_id, rank);


--
-- Name: stock_cvtermprop stock_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_pkey PRIMARY KEY (stock_cvtermprop_id);


--
-- Name: stock_dbxref stock_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxref
    ADD CONSTRAINT stock_dbxref_c1 UNIQUE (stock_id, dbxref_id);


--
-- Name: stock_dbxref stock_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxref
    ADD CONSTRAINT stock_dbxref_pkey PRIMARY KEY (stock_dbxref_id);


--
-- Name: stock_dbxrefprop stock_dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_c1 UNIQUE (stock_dbxref_id, type_id, rank);


--
-- Name: stock_dbxrefprop stock_dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_pkey PRIMARY KEY (stock_dbxrefprop_id);


--
-- Name: stock_genotype stock_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_genotype
    ADD CONSTRAINT stock_genotype_c1 UNIQUE (stock_id, genotype_id);


--
-- Name: stock_genotype stock_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_genotype
    ADD CONSTRAINT stock_genotype_pkey PRIMARY KEY (stock_genotype_id);


--
-- Name: stock stock_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_pkey PRIMARY KEY (stock_id);


--
-- Name: stock_pub stock_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_pub
    ADD CONSTRAINT stock_pub_c1 UNIQUE (stock_id, pub_id);


--
-- Name: stock_pub stock_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_pub
    ADD CONSTRAINT stock_pub_pkey PRIMARY KEY (stock_pub_id);


--
-- Name: stock_relationship stock_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_pkey PRIMARY KEY (stock_relationship_cvterm_id);


--
-- Name: stock_relationship stock_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_pkey PRIMARY KEY (stock_relationship_id);


--
-- Name: stock_relationship_pub stock_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_c1 UNIQUE (stock_relationship_id, pub_id);


--
-- Name: stock_relationship_pub stock_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_pkey PRIMARY KEY (stock_relationship_pub_id);


--
-- Name: stockcollection stockcollection_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection
    ADD CONSTRAINT stockcollection_c1 UNIQUE (uniquename, type_id);


--
-- Name: stockcollection stockcollection_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection
    ADD CONSTRAINT stockcollection_pkey PRIMARY KEY (stockcollection_id);


--
-- Name: stockcollection_stock stockcollection_stock_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_c1 UNIQUE (stockcollection_id, stock_id);


--
-- Name: stockcollection_stock stockcollection_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_pkey PRIMARY KEY (stockcollection_stock_id);


--
-- Name: stockcollectionprop stockcollectionprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_c1 UNIQUE (stockcollection_id, type_id, rank);


--
-- Name: stockcollectionprop stockcollectionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_pkey PRIMARY KEY (stockcollectionprop_id);


--
-- Name: stockprop stockprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop
    ADD CONSTRAINT stockprop_c1 UNIQUE (stock_id, type_id, rank);


--
-- Name: stockprop stockprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop
    ADD CONSTRAINT stockprop_pkey PRIMARY KEY (stockprop_id);


--
-- Name: stockprop_pub stockprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop_pub
    ADD CONSTRAINT stockprop_pub_c1 UNIQUE (stockprop_id, pub_id);


--
-- Name: stockprop_pub stockprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop_pub
    ADD CONSTRAINT stockprop_pub_pkey PRIMARY KEY (stockprop_pub_id);


--
-- Name: study_assay study_assay_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study_assay
    ADD CONSTRAINT study_assay_c1 UNIQUE (study_id, assay_id);


--
-- Name: study_assay study_assay_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study_assay
    ADD CONSTRAINT study_assay_pkey PRIMARY KEY (study_assay_id);


--
-- Name: study study_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_c1 UNIQUE (name);


--
-- Name: study study_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_pkey PRIMARY KEY (study_id);


--
-- Name: studydesign studydesign_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studydesign
    ADD CONSTRAINT studydesign_pkey PRIMARY KEY (studydesign_id);


--
-- Name: studydesignprop studydesignprop_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studydesignprop
    ADD CONSTRAINT studydesignprop_c1 UNIQUE (studydesign_id, type_id, rank);


--
-- Name: studydesignprop studydesignprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studydesignprop
    ADD CONSTRAINT studydesignprop_pkey PRIMARY KEY (studydesignprop_id);


--
-- Name: studyfactor studyfactor_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyfactor
    ADD CONSTRAINT studyfactor_pkey PRIMARY KEY (studyfactor_id);


--
-- Name: studyfactorvalue studyfactorvalue_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_pkey PRIMARY KEY (studyfactorvalue_id);


--
-- Name: studyprop_feature studyprop_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop_feature
    ADD CONSTRAINT studyprop_feature_pkey PRIMARY KEY (studyprop_feature_id);


--
-- Name: studyprop_feature studyprop_feature_studyprop_id_feature_id_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop_feature
    ADD CONSTRAINT studyprop_feature_studyprop_id_feature_id_key UNIQUE (studyprop_id, feature_id);


--
-- Name: studyprop studyprop_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop
    ADD CONSTRAINT studyprop_pkey PRIMARY KEY (studyprop_id);


--
-- Name: studyprop studyprop_study_id_type_id_rank_key; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop
    ADD CONSTRAINT studyprop_study_id_type_id_rank_key UNIQUE (study_id, type_id, rank);


--
-- Name: synonym synonym_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.synonym
    ADD CONSTRAINT synonym_c1 UNIQUE (name, type_id);


--
-- Name: synonym synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.synonym
    ADD CONSTRAINT synonym_pkey PRIMARY KEY (synonym_id);


--
-- Name: tableinfo tableinfo_c1; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.tableinfo
    ADD CONSTRAINT tableinfo_c1 UNIQUE (name);


--
-- Name: tableinfo tableinfo_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.tableinfo
    ADD CONSTRAINT tableinfo_pkey PRIMARY KEY (tableinfo_id);


--
-- Name: treatment treatment_pkey; Type: CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.treatment
    ADD CONSTRAINT treatment_pkey PRIMARY KEY (treatment_id);


--
-- Name: sequence_cv_lookup_table sequence_cv_lookup_table_pkey; Type: CONSTRAINT; Schema: so; Owner: kmr44
--

ALTER TABLE ONLY so.sequence_cv_lookup_table
    ADD CONSTRAINT sequence_cv_lookup_table_pkey PRIMARY KEY (sequence_cv_lookup_table_id);


--
-- Name: featuregroup_idx1; Type: INDEX; Schema: frange; Owner: kmr44
--

CREATE INDEX featuregroup_idx1 ON frange.featuregroup USING btree (subject_id);


--
-- Name: featuregroup_idx2; Type: INDEX; Schema: frange; Owner: kmr44
--

CREATE INDEX featuregroup_idx2 ON frange.featuregroup USING btree (object_id);


--
-- Name: featuregroup_idx3; Type: INDEX; Schema: frange; Owner: kmr44
--

CREATE INDEX featuregroup_idx3 ON frange.featuregroup USING btree (group_id);


--
-- Name: featuregroup_idx4; Type: INDEX; Schema: frange; Owner: kmr44
--

CREATE INDEX featuregroup_idx4 ON frange.featuregroup USING btree (srcfeature_id);


--
-- Name: featuregroup_idx5; Type: INDEX; Schema: frange; Owner: kmr44
--

CREATE INDEX featuregroup_idx5 ON frange.featuregroup USING btree (strand);


--
-- Name: featuregroup_idx6; Type: INDEX; Schema: frange; Owner: kmr44
--

CREATE INDEX featuregroup_idx6 ON frange.featuregroup USING btree (is_root);


--
-- Name: gencode_codon_aa_i1; Type: INDEX; Schema: genetic_code; Owner: kmr44
--

CREATE INDEX gencode_codon_aa_i1 ON genetic_code.gencode_codon_aa USING btree (gencode_id, codon, aa);


--
-- Name: acquisition_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX acquisition_idx1 ON public.acquisition USING btree (assay_id);


--
-- Name: acquisition_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX acquisition_idx2 ON public.acquisition USING btree (protocol_id);


--
-- Name: acquisition_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX acquisition_idx3 ON public.acquisition USING btree (channel_id);


--
-- Name: acquisition_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX acquisition_relationship_idx1 ON public.acquisition_relationship USING btree (subject_id);


--
-- Name: acquisition_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX acquisition_relationship_idx2 ON public.acquisition_relationship USING btree (type_id);


--
-- Name: acquisition_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX acquisition_relationship_idx3 ON public.acquisition_relationship USING btree (object_id);


--
-- Name: acquisitionprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX acquisitionprop_idx1 ON public.acquisitionprop USING btree (acquisition_id);


--
-- Name: acquisitionprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX acquisitionprop_idx2 ON public.acquisitionprop USING btree (type_id);


--
-- Name: analysisfeature_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX analysisfeature_idx1 ON public.analysisfeature USING btree (feature_id);


--
-- Name: analysisfeature_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX analysisfeature_idx2 ON public.analysisfeature USING btree (analysis_id);


--
-- Name: analysisprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX analysisprop_idx1 ON public.analysisprop USING btree (analysis_id);


--
-- Name: analysisprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX analysisprop_idx2 ON public.analysisprop USING btree (type_id);


--
-- Name: arraydesign_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX arraydesign_idx1 ON public.arraydesign USING btree (manufacturer_id);


--
-- Name: arraydesign_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX arraydesign_idx2 ON public.arraydesign USING btree (platformtype_id);


--
-- Name: arraydesign_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX arraydesign_idx3 ON public.arraydesign USING btree (substratetype_id);


--
-- Name: arraydesign_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX arraydesign_idx4 ON public.arraydesign USING btree (protocol_id);


--
-- Name: arraydesign_idx5; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX arraydesign_idx5 ON public.arraydesign USING btree (dbxref_id);


--
-- Name: arraydesignprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX arraydesignprop_idx1 ON public.arraydesignprop USING btree (arraydesign_id);


--
-- Name: arraydesignprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX arraydesignprop_idx2 ON public.arraydesignprop USING btree (type_id);


--
-- Name: assay_biomaterial_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_biomaterial_idx1 ON public.assay_biomaterial USING btree (assay_id);


--
-- Name: assay_biomaterial_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_biomaterial_idx2 ON public.assay_biomaterial USING btree (biomaterial_id);


--
-- Name: assay_biomaterial_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_biomaterial_idx3 ON public.assay_biomaterial USING btree (channel_id);


--
-- Name: assay_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_idx1 ON public.assay USING btree (arraydesign_id);


--
-- Name: assay_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_idx2 ON public.assay USING btree (protocol_id);


--
-- Name: assay_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_idx3 ON public.assay USING btree (operator_id);


--
-- Name: assay_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_idx4 ON public.assay USING btree (dbxref_id);


--
-- Name: assay_project_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_project_idx1 ON public.assay_project USING btree (assay_id);


--
-- Name: assay_project_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assay_project_idx2 ON public.assay_project USING btree (project_id);


--
-- Name: assayprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assayprop_idx1 ON public.assayprop USING btree (assay_id);


--
-- Name: assayprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX assayprop_idx2 ON public.assayprop USING btree (type_id);


--
-- Name: biomaterial_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_dbxref_idx1 ON public.biomaterial_dbxref USING btree (biomaterial_id);


--
-- Name: biomaterial_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_dbxref_idx2 ON public.biomaterial_dbxref USING btree (dbxref_id);


--
-- Name: biomaterial_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_idx1 ON public.biomaterial USING btree (taxon_id);


--
-- Name: biomaterial_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_idx2 ON public.biomaterial USING btree (biosourceprovider_id);


--
-- Name: biomaterial_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_idx3 ON public.biomaterial USING btree (dbxref_id);


--
-- Name: biomaterial_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_relationship_idx1 ON public.biomaterial_relationship USING btree (subject_id);


--
-- Name: biomaterial_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_relationship_idx2 ON public.biomaterial_relationship USING btree (object_id);


--
-- Name: biomaterial_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_relationship_idx3 ON public.biomaterial_relationship USING btree (type_id);


--
-- Name: biomaterial_treatment_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_treatment_idx1 ON public.biomaterial_treatment USING btree (biomaterial_id);


--
-- Name: biomaterial_treatment_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_treatment_idx2 ON public.biomaterial_treatment USING btree (treatment_id);


--
-- Name: biomaterial_treatment_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterial_treatment_idx3 ON public.biomaterial_treatment USING btree (unittype_id);


--
-- Name: biomaterialprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterialprop_idx1 ON public.biomaterialprop USING btree (biomaterial_id);


--
-- Name: biomaterialprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX biomaterialprop_idx2 ON public.biomaterialprop USING btree (type_id);


--
-- Name: contact_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX contact_relationship_idx1 ON public.contact_relationship USING btree (type_id);


--
-- Name: contact_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX contact_relationship_idx2 ON public.contact_relationship USING btree (subject_id);


--
-- Name: contact_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX contact_relationship_idx3 ON public.contact_relationship USING btree (object_id);


--
-- Name: control_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX control_idx1 ON public.control USING btree (type_id);


--
-- Name: control_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX control_idx2 ON public.control USING btree (assay_id);


--
-- Name: control_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX control_idx3 ON public.control USING btree (tableinfo_id);


--
-- Name: control_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX control_idx4 ON public.control USING btree (row_id);


--
-- Name: INDEX cvterm_c1; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON INDEX public.cvterm_c1 IS 'A name can mean different things in
different contexts; for example "chromosome" in SO and GO. A name
should be unique within an ontology or cv. A name may exist twice in a
cv, in both obsolete and non-obsolete forms - these will be for
different cvterms with different OBO identifiers; so GO documentation
for more details on obsoletion. Note that occasionally multiple
obsolete terms with the same name will exist in the same cv. If this
is a possibility for the ontology under consideration (e.g. GO) then the
ID should be appended to the name to ensure uniqueness.';


--
-- Name: INDEX cvterm_c2; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON INDEX public.cvterm_c2 IS 'The OBO identifier is globally unique.';


--
-- Name: cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvterm_dbxref_idx1 ON public.cvterm_dbxref USING btree (cvterm_id);


--
-- Name: cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvterm_dbxref_idx2 ON public.cvterm_dbxref USING btree (dbxref_id);


--
-- Name: cvterm_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvterm_idx1 ON public.cvterm USING btree (cv_id);


--
-- Name: cvterm_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvterm_idx2 ON public.cvterm USING btree (name);


--
-- Name: cvterm_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvterm_idx3 ON public.cvterm USING btree (dbxref_id);


--
-- Name: cvterm_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvterm_relationship_idx1 ON public.cvterm_relationship USING btree (type_id);


--
-- Name: cvterm_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvterm_relationship_idx2 ON public.cvterm_relationship USING btree (subject_id);


--
-- Name: cvterm_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvterm_relationship_idx3 ON public.cvterm_relationship USING btree (object_id);


--
-- Name: cvtermpath_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvtermpath_idx1 ON public.cvtermpath USING btree (type_id);


--
-- Name: cvtermpath_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvtermpath_idx2 ON public.cvtermpath USING btree (subject_id);


--
-- Name: cvtermpath_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvtermpath_idx3 ON public.cvtermpath USING btree (object_id);


--
-- Name: cvtermpath_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvtermpath_idx4 ON public.cvtermpath USING btree (cv_id);


--
-- Name: cvtermprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvtermprop_idx1 ON public.cvtermprop USING btree (cvterm_id);


--
-- Name: cvtermprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvtermprop_idx2 ON public.cvtermprop USING btree (type_id);


--
-- Name: cvtermsynonym_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX cvtermsynonym_idx1 ON public.cvtermsynonym USING btree (cvterm_id);


--
-- Name: dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX dbxref_idx1 ON public.dbxref USING btree (db_id);


--
-- Name: dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX dbxref_idx2 ON public.dbxref USING btree (accession);


--
-- Name: dbxref_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX dbxref_idx3 ON public.dbxref USING btree (version);


--
-- Name: dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX dbxrefprop_idx1 ON public.dbxrefprop USING btree (dbxref_id);


--
-- Name: dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX dbxrefprop_idx2 ON public.dbxrefprop USING btree (type_id);


--
-- Name: element_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX element_idx1 ON public.element USING btree (feature_id);


--
-- Name: element_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX element_idx2 ON public.element USING btree (arraydesign_id);


--
-- Name: element_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX element_idx3 ON public.element USING btree (type_id);


--
-- Name: element_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX element_idx4 ON public.element USING btree (dbxref_id);


--
-- Name: element_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX element_relationship_idx1 ON public.element_relationship USING btree (subject_id);


--
-- Name: element_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX element_relationship_idx2 ON public.element_relationship USING btree (type_id);


--
-- Name: element_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX element_relationship_idx3 ON public.element_relationship USING btree (object_id);


--
-- Name: element_relationship_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX element_relationship_idx4 ON public.element_relationship USING btree (value);


--
-- Name: elementresult_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX elementresult_idx1 ON public.elementresult USING btree (element_id);


--
-- Name: elementresult_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX elementresult_idx2 ON public.elementresult USING btree (quantification_id);


--
-- Name: elementresult_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX elementresult_idx3 ON public.elementresult USING btree (signal);


--
-- Name: elementresult_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX elementresult_relationship_idx1 ON public.elementresult_relationship USING btree (subject_id);


--
-- Name: elementresult_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX elementresult_relationship_idx2 ON public.elementresult_relationship USING btree (type_id);


--
-- Name: elementresult_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX elementresult_relationship_idx3 ON public.elementresult_relationship USING btree (object_id);


--
-- Name: elementresult_relationship_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX elementresult_relationship_idx4 ON public.elementresult_relationship USING btree (value);


--
-- Name: environment_cvterm_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX environment_cvterm_idx1 ON public.environment_cvterm USING btree (environment_id);


--
-- Name: environment_cvterm_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX environment_cvterm_idx2 ON public.environment_cvterm USING btree (cvterm_id);


--
-- Name: environment_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX environment_idx1 ON public.environment USING btree (uniquename);


--
-- Name: expression_cvterm_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_cvterm_idx1 ON public.expression_cvterm USING btree (expression_id);


--
-- Name: expression_cvterm_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_cvterm_idx2 ON public.expression_cvterm USING btree (cvterm_id);


--
-- Name: expression_cvterm_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_cvterm_idx3 ON public.expression_cvterm USING btree (cvterm_type_id);


--
-- Name: expression_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_cvtermprop_idx1 ON public.expression_cvtermprop USING btree (expression_cvterm_id);


--
-- Name: expression_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_cvtermprop_idx2 ON public.expression_cvtermprop USING btree (type_id);


--
-- Name: expression_image_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_image_idx1 ON public.expression_image USING btree (expression_id);


--
-- Name: expression_image_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_image_idx2 ON public.expression_image USING btree (eimage_id);


--
-- Name: expression_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_pub_idx1 ON public.expression_pub USING btree (expression_id);


--
-- Name: expression_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expression_pub_idx2 ON public.expression_pub USING btree (pub_id);


--
-- Name: expressionprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expressionprop_idx1 ON public.expressionprop USING btree (expression_id);


--
-- Name: expressionprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX expressionprop_idx2 ON public.expressionprop USING btree (type_id);


--
-- Name: feature_cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvterm_dbxref_idx1 ON public.feature_cvterm_dbxref USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvterm_dbxref_idx2 ON public.feature_cvterm_dbxref USING btree (dbxref_id);


--
-- Name: feature_cvterm_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvterm_idx1 ON public.feature_cvterm USING btree (feature_id);


--
-- Name: feature_cvterm_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvterm_idx2 ON public.feature_cvterm USING btree (cvterm_id);


--
-- Name: feature_cvterm_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvterm_idx3 ON public.feature_cvterm USING btree (pub_id);


--
-- Name: feature_cvterm_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvterm_pub_idx1 ON public.feature_cvterm_pub USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvterm_pub_idx2 ON public.feature_cvterm_pub USING btree (pub_id);


--
-- Name: feature_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvtermprop_idx1 ON public.feature_cvtermprop USING btree (feature_cvterm_id);


--
-- Name: feature_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_cvtermprop_idx2 ON public.feature_cvtermprop USING btree (type_id);


--
-- Name: feature_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_dbxref_idx1 ON public.feature_dbxref USING btree (feature_id);


--
-- Name: feature_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_dbxref_idx2 ON public.feature_dbxref USING btree (dbxref_id);


--
-- Name: feature_expression_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_expression_idx1 ON public.feature_expression USING btree (expression_id);


--
-- Name: feature_expression_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_expression_idx2 ON public.feature_expression USING btree (feature_id);


--
-- Name: feature_expression_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_expression_idx3 ON public.feature_expression USING btree (pub_id);


--
-- Name: feature_expressionprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_expressionprop_idx1 ON public.feature_expressionprop USING btree (feature_expression_id);


--
-- Name: feature_expressionprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_expressionprop_idx2 ON public.feature_expressionprop USING btree (type_id);


--
-- Name: feature_genotype_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_genotype_idx1 ON public.feature_genotype USING btree (feature_id);


--
-- Name: feature_genotype_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_genotype_idx2 ON public.feature_genotype USING btree (genotype_id);


--
-- Name: feature_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_idx1 ON public.feature USING btree (dbxref_id);


--
-- Name: feature_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_idx2 ON public.feature USING btree (organism_id);


--
-- Name: feature_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_idx3 ON public.feature USING btree (type_id);


--
-- Name: feature_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_idx4 ON public.feature USING btree (uniquename);


--
-- Name: feature_idx5; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_idx5 ON public.feature USING btree (lower((name)::text));


--
-- Name: feature_name_ind1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_name_ind1 ON public.feature USING btree (name);


--
-- Name: feature_phenotype_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_phenotype_idx1 ON public.feature_phenotype USING btree (feature_id);


--
-- Name: feature_phenotype_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_phenotype_idx2 ON public.feature_phenotype USING btree (phenotype_id);


--
-- Name: feature_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_pub_idx1 ON public.feature_pub USING btree (feature_id);


--
-- Name: feature_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_pub_idx2 ON public.feature_pub USING btree (pub_id);


--
-- Name: feature_pubprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_pubprop_idx1 ON public.feature_pubprop USING btree (feature_pub_id);


--
-- Name: feature_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationship_idx1 ON public.feature_relationship USING btree (subject_id);


--
-- Name: feature_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationship_idx2 ON public.feature_relationship USING btree (object_id);


--
-- Name: feature_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationship_idx3 ON public.feature_relationship USING btree (type_id);


--
-- Name: feature_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationship_pub_idx1 ON public.feature_relationship_pub USING btree (feature_relationship_id);


--
-- Name: feature_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationship_pub_idx2 ON public.feature_relationship_pub USING btree (pub_id);


--
-- Name: feature_relationshipprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationshipprop_idx1 ON public.feature_relationshipprop USING btree (feature_relationship_id);


--
-- Name: feature_relationshipprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationshipprop_idx2 ON public.feature_relationshipprop USING btree (type_id);


--
-- Name: feature_relationshipprop_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationshipprop_pub_idx1 ON public.feature_relationshipprop_pub USING btree (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_relationshipprop_pub_idx2 ON public.feature_relationshipprop_pub USING btree (pub_id);


--
-- Name: feature_synonym_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_synonym_idx1 ON public.feature_synonym USING btree (synonym_id);


--
-- Name: feature_synonym_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_synonym_idx2 ON public.feature_synonym USING btree (feature_id);


--
-- Name: feature_synonym_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX feature_synonym_idx3 ON public.feature_synonym USING btree (pub_id);


--
-- Name: featureloc_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureloc_idx1 ON public.featureloc USING btree (feature_id);


--
-- Name: featureloc_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureloc_idx2 ON public.featureloc USING btree (srcfeature_id);


--
-- Name: featureloc_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureloc_idx3 ON public.featureloc USING btree (srcfeature_id, fmin, fmax);

CREATE INDEX pombase_featureloc_range_idx ON public.featureloc USING gist(srcfeature_id, strand, int4range(fmin+1, fmax));

--
-- Name: featureloc_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureloc_pub_idx1 ON public.featureloc_pub USING btree (featureloc_id);


--
-- Name: featureloc_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureloc_pub_idx2 ON public.featureloc_pub USING btree (pub_id);


--
-- Name: featuremap_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featuremap_pub_idx1 ON public.featuremap_pub USING btree (featuremap_id);


--
-- Name: featuremap_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featuremap_pub_idx2 ON public.featuremap_pub USING btree (pub_id);


--
-- Name: featurepos_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurepos_idx1 ON public.featurepos USING btree (featuremap_id);


--
-- Name: featurepos_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurepos_idx2 ON public.featurepos USING btree (feature_id);


--
-- Name: featurepos_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurepos_idx3 ON public.featurepos USING btree (map_feature_id);


--
-- Name: INDEX featureprop_c1; Type: COMMENT; Schema: public; Owner: kmr44
--

COMMENT ON INDEX public.featureprop_c1 IS 'For any one feature, multivalued
property-value pairs must be differentiated by rank.';


--
-- Name: featureprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureprop_idx1 ON public.featureprop USING btree (feature_id);


--
-- Name: featureprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureprop_idx2 ON public.featureprop USING btree (type_id);


--
-- Name: featureprop_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureprop_pub_idx1 ON public.featureprop_pub USING btree (featureprop_id);


--
-- Name: featureprop_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featureprop_pub_idx2 ON public.featureprop_pub USING btree (pub_id);


--
-- Name: featurerange_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurerange_idx1 ON public.featurerange USING btree (featuremap_id);


--
-- Name: featurerange_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurerange_idx2 ON public.featurerange USING btree (feature_id);


--
-- Name: featurerange_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurerange_idx3 ON public.featurerange USING btree (leftstartf_id);


--
-- Name: featurerange_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurerange_idx4 ON public.featurerange USING btree (leftendf_id);


--
-- Name: featurerange_idx5; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurerange_idx5 ON public.featurerange USING btree (rightstartf_id);


--
-- Name: featurerange_idx6; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX featurerange_idx6 ON public.featurerange USING btree (rightendf_id);


--
-- Name: genotype_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX genotype_idx1 ON public.genotype USING btree (uniquename);


--
-- Name: genotype_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX genotype_idx2 ON public.genotype USING btree (name);


--
-- Name: genotypeprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX genotypeprop_idx1 ON public.genotypeprop USING btree (genotype_id);


--
-- Name: genotypeprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX genotypeprop_idx2 ON public.genotypeprop USING btree (type_id);


--
-- Name: library_cvterm_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_cvterm_idx1 ON public.library_cvterm USING btree (library_id);


--
-- Name: library_cvterm_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_cvterm_idx2 ON public.library_cvterm USING btree (cvterm_id);


--
-- Name: library_cvterm_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_cvterm_idx3 ON public.library_cvterm USING btree (pub_id);


--
-- Name: library_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_dbxref_idx1 ON public.library_dbxref USING btree (library_id);


--
-- Name: library_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_dbxref_idx2 ON public.library_dbxref USING btree (dbxref_id);


--
-- Name: library_feature_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_feature_idx1 ON public.library_feature USING btree (library_id);


--
-- Name: library_feature_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_feature_idx2 ON public.library_feature USING btree (feature_id);


--
-- Name: library_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_idx1 ON public.library USING btree (organism_id);


--
-- Name: library_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_idx2 ON public.library USING btree (type_id);


--
-- Name: library_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_idx3 ON public.library USING btree (uniquename);


--
-- Name: library_name_ind1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_name_ind1 ON public.library USING btree (name);


--
-- Name: library_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_pub_idx1 ON public.library_pub USING btree (library_id);


--
-- Name: library_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_pub_idx2 ON public.library_pub USING btree (pub_id);


--
-- Name: library_synonym_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_synonym_idx1 ON public.library_synonym USING btree (synonym_id);


--
-- Name: library_synonym_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_synonym_idx2 ON public.library_synonym USING btree (library_id);


--
-- Name: library_synonym_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX library_synonym_idx3 ON public.library_synonym USING btree (pub_id);


--
-- Name: libraryprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX libraryprop_idx1 ON public.libraryprop USING btree (library_id);


--
-- Name: libraryprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX libraryprop_idx2 ON public.libraryprop USING btree (type_id);


--
-- Name: libraryprop_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX libraryprop_pub_idx1 ON public.libraryprop_pub USING btree (libraryprop_id);


--
-- Name: libraryprop_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX libraryprop_pub_idx2 ON public.libraryprop_pub USING btree (pub_id);


--
-- Name: magedocumentation_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX magedocumentation_idx1 ON public.magedocumentation USING btree (mageml_id);


--
-- Name: magedocumentation_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX magedocumentation_idx2 ON public.magedocumentation USING btree (tableinfo_id);


--
-- Name: magedocumentation_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX magedocumentation_idx3 ON public.magedocumentation USING btree (row_id);


--
-- Name: nd_experiment_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX nd_experiment_pub_idx1 ON public.nd_experiment_pub USING btree (nd_experiment_id);


--
-- Name: nd_experiment_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX nd_experiment_pub_idx2 ON public.nd_experiment_pub USING btree (pub_id);


--
-- Name: organism_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX organism_dbxref_idx1 ON public.organism_dbxref USING btree (organism_id);


--
-- Name: organism_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX organism_dbxref_idx2 ON public.organism_dbxref USING btree (dbxref_id);


--
-- Name: organismprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX organismprop_idx1 ON public.organismprop USING btree (organism_id);


--
-- Name: organismprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX organismprop_idx2 ON public.organismprop USING btree (type_id);


--
-- Name: phendesc_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phendesc_idx1 ON public.phendesc USING btree (genotype_id);


--
-- Name: phendesc_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phendesc_idx2 ON public.phendesc USING btree (environment_id);


--
-- Name: phendesc_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phendesc_idx3 ON public.phendesc USING btree (pub_id);


--
-- Name: phenotype_comparison_cvterm_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_comparison_cvterm_idx1 ON public.phenotype_comparison_cvterm USING btree (phenotype_comparison_id);


--
-- Name: phenotype_comparison_cvterm_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_comparison_cvterm_idx2 ON public.phenotype_comparison_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_comparison_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_comparison_idx1 ON public.phenotype_comparison USING btree (genotype1_id);


--
-- Name: phenotype_comparison_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_comparison_idx2 ON public.phenotype_comparison USING btree (genotype2_id);


--
-- Name: phenotype_comparison_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_comparison_idx4 ON public.phenotype_comparison USING btree (pub_id);


--
-- Name: phenotype_cvterm_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_cvterm_idx1 ON public.phenotype_cvterm USING btree (phenotype_id);


--
-- Name: phenotype_cvterm_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_cvterm_idx2 ON public.phenotype_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_idx1 ON public.phenotype USING btree (cvalue_id);


--
-- Name: phenotype_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_idx2 ON public.phenotype USING btree (observable_id);


--
-- Name: phenotype_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenotype_idx3 ON public.phenotype USING btree (attr_id);


--
-- Name: phenstatement_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenstatement_idx1 ON public.phenstatement USING btree (genotype_id);


--
-- Name: phenstatement_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phenstatement_idx2 ON public.phenstatement USING btree (phenotype_id);


--
-- Name: phylonode_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_dbxref_idx1 ON public.phylonode_dbxref USING btree (phylonode_id);


--
-- Name: phylonode_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_dbxref_idx2 ON public.phylonode_dbxref USING btree (dbxref_id);


--
-- Name: phylonode_organism_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_organism_idx1 ON public.phylonode_organism USING btree (phylonode_id);


--
-- Name: phylonode_organism_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_organism_idx2 ON public.phylonode_organism USING btree (organism_id);


--
-- Name: phylonode_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_pub_idx1 ON public.phylonode_pub USING btree (phylonode_id);


--
-- Name: phylonode_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_pub_idx2 ON public.phylonode_pub USING btree (pub_id);


--
-- Name: phylonode_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_relationship_idx1 ON public.phylonode_relationship USING btree (subject_id);


--
-- Name: phylonode_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_relationship_idx2 ON public.phylonode_relationship USING btree (object_id);


--
-- Name: phylonode_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonode_relationship_idx3 ON public.phylonode_relationship USING btree (type_id);


--
-- Name: phylonodeprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonodeprop_idx1 ON public.phylonodeprop USING btree (phylonode_id);


--
-- Name: phylonodeprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylonodeprop_idx2 ON public.phylonodeprop USING btree (type_id);


--
-- Name: phylotree_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylotree_idx1 ON public.phylotree USING btree (phylotree_id);


--
-- Name: phylotree_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylotree_pub_idx1 ON public.phylotree_pub USING btree (phylotree_id);


--
-- Name: phylotree_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX phylotree_pub_idx2 ON public.phylotree_pub USING btree (pub_id);


--
-- Name: project_contact_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX project_contact_idx1 ON public.project_contact USING btree (project_id);


--
-- Name: project_contact_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX project_contact_idx2 ON public.project_contact USING btree (contact_id);


--
-- Name: project_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX project_pub_idx1 ON public.project_pub USING btree (project_id);


--
-- Name: project_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX project_pub_idx2 ON public.project_pub USING btree (pub_id);


--
-- Name: protocol_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX protocol_idx1 ON public.protocol USING btree (type_id);


--
-- Name: protocol_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX protocol_idx2 ON public.protocol USING btree (pub_id);


--
-- Name: protocol_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX protocol_idx3 ON public.protocol USING btree (dbxref_id);


--
-- Name: protocolparam_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX protocolparam_idx1 ON public.protocolparam USING btree (protocol_id);


--
-- Name: protocolparam_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX protocolparam_idx2 ON public.protocolparam USING btree (datatype_id);


--
-- Name: protocolparam_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX protocolparam_idx3 ON public.protocolparam USING btree (unittype_id);


--
-- Name: pub_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pub_dbxref_idx1 ON public.pub_dbxref USING btree (pub_id);


--
-- Name: pub_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pub_dbxref_idx2 ON public.pub_dbxref USING btree (dbxref_id);


--
-- Name: pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pub_idx1 ON public.pub USING btree (type_id);


--
-- Name: pub_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pub_relationship_idx1 ON public.pub_relationship USING btree (subject_id);


--
-- Name: pub_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pub_relationship_idx2 ON public.pub_relationship USING btree (object_id);


--
-- Name: pub_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pub_relationship_idx3 ON public.pub_relationship USING btree (type_id);


--
-- Name: pubauthor_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pubauthor_idx2 ON public.pubauthor USING btree (pub_id);


--
-- Name: pubprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pubprop_idx1 ON public.pubprop USING btree (pub_id);


--
-- Name: pubprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX pubprop_idx2 ON public.pubprop USING btree (type_id);


--
-- Name: quantification_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantification_idx1 ON public.quantification USING btree (acquisition_id);


--
-- Name: quantification_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantification_idx2 ON public.quantification USING btree (operator_id);


--
-- Name: quantification_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantification_idx3 ON public.quantification USING btree (protocol_id);


--
-- Name: quantification_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantification_idx4 ON public.quantification USING btree (analysis_id);


--
-- Name: quantification_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantification_relationship_idx1 ON public.quantification_relationship USING btree (subject_id);


--
-- Name: quantification_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantification_relationship_idx2 ON public.quantification_relationship USING btree (type_id);


--
-- Name: quantification_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantification_relationship_idx3 ON public.quantification_relationship USING btree (object_id);


--
-- Name: quantificationprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantificationprop_idx1 ON public.quantificationprop USING btree (quantification_id);


--
-- Name: quantificationprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX quantificationprop_idx2 ON public.quantificationprop USING btree (type_id);


--
-- Name: stock_cvterm_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_cvterm_idx1 ON public.stock_cvterm USING btree (stock_id);


--
-- Name: stock_cvterm_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_cvterm_idx2 ON public.stock_cvterm USING btree (cvterm_id);


--
-- Name: stock_cvterm_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_cvterm_idx3 ON public.stock_cvterm USING btree (pub_id);


--
-- Name: stock_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_cvtermprop_idx1 ON public.stock_cvtermprop USING btree (stock_cvterm_id);


--
-- Name: stock_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_cvtermprop_idx2 ON public.stock_cvtermprop USING btree (type_id);


--
-- Name: stock_dbxref_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_dbxref_idx1 ON public.stock_dbxref USING btree (stock_id);


--
-- Name: stock_dbxref_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_dbxref_idx2 ON public.stock_dbxref USING btree (dbxref_id);


--
-- Name: stock_dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_dbxrefprop_idx1 ON public.stock_dbxrefprop USING btree (stock_dbxref_id);


--
-- Name: stock_dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_dbxrefprop_idx2 ON public.stock_dbxrefprop USING btree (type_id);


--
-- Name: stock_genotype_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_genotype_idx1 ON public.stock_genotype USING btree (stock_id);


--
-- Name: stock_genotype_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_genotype_idx2 ON public.stock_genotype USING btree (genotype_id);


--
-- Name: stock_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_idx1 ON public.stock USING btree (dbxref_id);


--
-- Name: stock_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_idx2 ON public.stock USING btree (organism_id);


--
-- Name: stock_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_idx3 ON public.stock USING btree (type_id);


--
-- Name: stock_idx4; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_idx4 ON public.stock USING btree (uniquename);


--
-- Name: stock_name_ind1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_name_ind1 ON public.stock USING btree (name);


--
-- Name: stock_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_pub_idx1 ON public.stock_pub USING btree (stock_id);


--
-- Name: stock_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_pub_idx2 ON public.stock_pub USING btree (pub_id);


--
-- Name: stock_relationship_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_relationship_idx1 ON public.stock_relationship USING btree (subject_id);


--
-- Name: stock_relationship_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_relationship_idx2 ON public.stock_relationship USING btree (object_id);


--
-- Name: stock_relationship_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_relationship_idx3 ON public.stock_relationship USING btree (type_id);


--
-- Name: stock_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_relationship_pub_idx1 ON public.stock_relationship_pub USING btree (stock_relationship_id);


--
-- Name: stock_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stock_relationship_pub_idx2 ON public.stock_relationship_pub USING btree (pub_id);


--
-- Name: stockcollection_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockcollection_idx1 ON public.stockcollection USING btree (contact_id);


--
-- Name: stockcollection_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockcollection_idx2 ON public.stockcollection USING btree (type_id);


--
-- Name: stockcollection_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockcollection_idx3 ON public.stockcollection USING btree (uniquename);


--
-- Name: stockcollection_name_ind1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockcollection_name_ind1 ON public.stockcollection USING btree (name);


--
-- Name: stockcollection_stock_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockcollection_stock_idx1 ON public.stockcollection_stock USING btree (stockcollection_id);


--
-- Name: stockcollection_stock_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockcollection_stock_idx2 ON public.stockcollection_stock USING btree (stock_id);


--
-- Name: stockcollectionprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockcollectionprop_idx1 ON public.stockcollectionprop USING btree (stockcollection_id);


--
-- Name: stockcollectionprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockcollectionprop_idx2 ON public.stockcollectionprop USING btree (type_id);


--
-- Name: stockprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockprop_idx1 ON public.stockprop USING btree (stock_id);


--
-- Name: stockprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockprop_idx2 ON public.stockprop USING btree (type_id);


--
-- Name: stockprop_pub_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockprop_pub_idx1 ON public.stockprop_pub USING btree (stockprop_id);


--
-- Name: stockprop_pub_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX stockprop_pub_idx2 ON public.stockprop_pub USING btree (pub_id);


--
-- Name: study_assay_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX study_assay_idx1 ON public.study_assay USING btree (study_id);


--
-- Name: study_assay_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX study_assay_idx2 ON public.study_assay USING btree (assay_id);


--
-- Name: study_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX study_idx1 ON public.study USING btree (contact_id);


--
-- Name: study_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX study_idx2 ON public.study USING btree (pub_id);


--
-- Name: study_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX study_idx3 ON public.study USING btree (dbxref_id);


--
-- Name: studydesign_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studydesign_idx1 ON public.studydesign USING btree (study_id);


--
-- Name: studydesignprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studydesignprop_idx1 ON public.studydesignprop USING btree (studydesign_id);


--
-- Name: studydesignprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studydesignprop_idx2 ON public.studydesignprop USING btree (type_id);


--
-- Name: studyfactor_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studyfactor_idx1 ON public.studyfactor USING btree (studydesign_id);


--
-- Name: studyfactor_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studyfactor_idx2 ON public.studyfactor USING btree (type_id);


--
-- Name: studyfactorvalue_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studyfactorvalue_idx1 ON public.studyfactorvalue USING btree (studyfactor_id);


--
-- Name: studyfactorvalue_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studyfactorvalue_idx2 ON public.studyfactorvalue USING btree (assay_id);


--
-- Name: studyprop_feature_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studyprop_feature_idx1 ON public.studyprop_feature USING btree (studyprop_id);


--
-- Name: studyprop_feature_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studyprop_feature_idx2 ON public.studyprop_feature USING btree (feature_id);


--
-- Name: studyprop_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studyprop_idx1 ON public.studyprop USING btree (study_id);


--
-- Name: studyprop_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX studyprop_idx2 ON public.studyprop USING btree (type_id);


--
-- Name: synonym_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX synonym_idx1 ON public.synonym USING btree (type_id);


--
-- Name: synonym_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX synonym_idx2 ON public.synonym USING btree (lower((synonym_sgml)::text));


--
-- Name: treatment_idx1; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX treatment_idx1 ON public.treatment USING btree (biomaterial_id);


--
-- Name: treatment_idx2; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX treatment_idx2 ON public.treatment USING btree (type_id);


--
-- Name: treatment_idx3; Type: INDEX; Schema: public; Owner: kmr44
--

CREATE INDEX treatment_idx3 ON public.treatment USING btree (protocol_id);


--
-- Name: sequence_cv_lookup_table_idx; Type: INDEX; Schema: so; Owner: kmr44
--

CREATE INDEX sequence_cv_lookup_table_idx ON so.sequence_cv_lookup_table USING btree (original_cvterm_name);


--
-- Name: featuregroup featuregroup_group_id_fkey; Type: FK CONSTRAINT; Schema: frange; Owner: kmr44
--

ALTER TABLE ONLY frange.featuregroup
    ADD CONSTRAINT featuregroup_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuregroup featuregroup_object_id_fkey; Type: FK CONSTRAINT; Schema: frange; Owner: kmr44
--

ALTER TABLE ONLY frange.featuregroup
    ADD CONSTRAINT featuregroup_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuregroup featuregroup_srcfeature_id_fkey; Type: FK CONSTRAINT; Schema: frange; Owner: kmr44
--

ALTER TABLE ONLY frange.featuregroup
    ADD CONSTRAINT featuregroup_srcfeature_id_fkey FOREIGN KEY (srcfeature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuregroup featuregroup_subject_id_fkey; Type: FK CONSTRAINT; Schema: frange; Owner: kmr44
--

ALTER TABLE ONLY frange.featuregroup
    ADD CONSTRAINT featuregroup_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: gencode_codon_aa gencode_codon_aa_gencode_id_fkey; Type: FK CONSTRAINT; Schema: genetic_code; Owner: kmr44
--

ALTER TABLE ONLY genetic_code.gencode_codon_aa
    ADD CONSTRAINT gencode_codon_aa_gencode_id_fkey FOREIGN KEY (gencode_id) REFERENCES genetic_code.gencode(gencode_id);


--
-- Name: gencode_startcodon gencode_startcodon_gencode_id_fkey; Type: FK CONSTRAINT; Schema: genetic_code; Owner: kmr44
--

ALTER TABLE ONLY genetic_code.gencode_startcodon
    ADD CONSTRAINT gencode_startcodon_gencode_id_fkey FOREIGN KEY (gencode_id) REFERENCES genetic_code.gencode(gencode_id);


--
-- Name: acquisition acquisition_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition
    ADD CONSTRAINT acquisition_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition acquisition_channel_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition
    ADD CONSTRAINT acquisition_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES public.channel(channel_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition acquisition_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition
    ADD CONSTRAINT acquisition_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES public.protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship acquisition_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship acquisition_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship acquisition_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisitionprop acquisitionprop_acquisition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisitionprop
    ADD CONSTRAINT acquisitionprop_acquisition_id_fkey FOREIGN KEY (acquisition_id) REFERENCES public.acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisitionprop acquisitionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.acquisitionprop
    ADD CONSTRAINT acquisitionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeature analysisfeature_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeature
    ADD CONSTRAINT analysisfeature_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES public.analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeature analysisfeature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeature
    ADD CONSTRAINT analysisfeature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeatureprop analysisfeatureprop_analysisfeature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeatureprop
    ADD CONSTRAINT analysisfeatureprop_analysisfeature_id_fkey FOREIGN KEY (analysisfeature_id) REFERENCES public.analysisfeature(analysisfeature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeatureprop analysisfeatureprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisfeatureprop
    ADD CONSTRAINT analysisfeatureprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop analysisprop_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisprop
    ADD CONSTRAINT analysisprop_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES public.analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop analysisprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.analysisprop
    ADD CONSTRAINT analysisprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign arraydesign_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesign
    ADD CONSTRAINT arraydesign_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign arraydesign_manufacturer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesign
    ADD CONSTRAINT arraydesign_manufacturer_id_fkey FOREIGN KEY (manufacturer_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign arraydesign_platformtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesign
    ADD CONSTRAINT arraydesign_platformtype_id_fkey FOREIGN KEY (platformtype_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign arraydesign_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesign
    ADD CONSTRAINT arraydesign_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES public.protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign arraydesign_substratetype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesign
    ADD CONSTRAINT arraydesign_substratetype_id_fkey FOREIGN KEY (substratetype_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesignprop arraydesignprop_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesignprop
    ADD CONSTRAINT arraydesignprop_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES public.arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesignprop arraydesignprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.arraydesignprop
    ADD CONSTRAINT arraydesignprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay assay_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay
    ADD CONSTRAINT assay_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES public.arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial assay_biomaterial_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial assay_biomaterial_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES public.biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial assay_biomaterial_channel_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES public.channel(channel_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay assay_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay
    ADD CONSTRAINT assay_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay assay_operator_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay
    ADD CONSTRAINT assay_operator_id_fkey FOREIGN KEY (operator_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_project assay_project_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_project
    ADD CONSTRAINT assay_project_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.assay(assay_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_project assay_project_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay_project
    ADD CONSTRAINT assay_project_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay assay_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assay
    ADD CONSTRAINT assay_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES public.protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assayprop assayprop_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assayprop
    ADD CONSTRAINT assayprop_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assayprop assayprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.assayprop
    ADD CONSTRAINT assayprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial biomaterial_biosourceprovider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial
    ADD CONSTRAINT biomaterial_biosourceprovider_id_fkey FOREIGN KEY (biosourceprovider_id) REFERENCES public.contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_dbxref biomaterial_dbxref_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES public.biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_dbxref biomaterial_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial biomaterial_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial
    ADD CONSTRAINT biomaterial_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship biomaterial_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.biomaterial(biomaterial_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship biomaterial_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.biomaterial(biomaterial_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship biomaterial_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial biomaterial_taxon_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial
    ADD CONSTRAINT biomaterial_taxon_id_fkey FOREIGN KEY (taxon_id) REFERENCES public.organism(organism_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment biomaterial_treatment_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES public.biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment biomaterial_treatment_treatment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_treatment_id_fkey FOREIGN KEY (treatment_id) REFERENCES public.treatment(treatment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment biomaterial_treatment_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterialprop biomaterialprop_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterialprop
    ADD CONSTRAINT biomaterialprop_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES public.biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterialprop biomaterialprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.biomaterialprop
    ADD CONSTRAINT biomaterialprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvterm cell_line_cvterm_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvterm cell_line_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvterm cell_line_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvterm
    ADD CONSTRAINT cell_line_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvtermprop cell_line_cvtermprop_cell_line_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvtermprop
    ADD CONSTRAINT cell_line_cvtermprop_cell_line_cvterm_id_fkey FOREIGN KEY (cell_line_cvterm_id) REFERENCES public.cell_line_cvterm(cell_line_cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_cvtermprop cell_line_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_cvtermprop
    ADD CONSTRAINT cell_line_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_dbxref cell_line_dbxref_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_dbxref
    ADD CONSTRAINT cell_line_dbxref_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_dbxref cell_line_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_dbxref
    ADD CONSTRAINT cell_line_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_feature cell_line_feature_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_feature
    ADD CONSTRAINT cell_line_feature_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_feature cell_line_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_feature
    ADD CONSTRAINT cell_line_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_feature cell_line_feature_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_feature
    ADD CONSTRAINT cell_line_feature_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_library cell_line_library_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_library
    ADD CONSTRAINT cell_line_library_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_library cell_line_library_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_library
    ADD CONSTRAINT cell_line_library_library_id_fkey FOREIGN KEY (library_id) REFERENCES public.library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_library cell_line_library_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_library
    ADD CONSTRAINT cell_line_library_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line cell_line_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line
    ADD CONSTRAINT cell_line_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_pub cell_line_pub_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_pub
    ADD CONSTRAINT cell_line_pub_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_pub cell_line_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_pub
    ADD CONSTRAINT cell_line_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_relationship cell_line_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_relationship cell_line_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_relationship cell_line_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_relationship
    ADD CONSTRAINT cell_line_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_synonym cell_line_synonym_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_synonym cell_line_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_line_synonym cell_line_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_line_synonym
    ADD CONSTRAINT cell_line_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES public.synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_lineprop cell_lineprop_cell_line_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop
    ADD CONSTRAINT cell_lineprop_cell_line_id_fkey FOREIGN KEY (cell_line_id) REFERENCES public.cell_line(cell_line_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_lineprop_pub cell_lineprop_pub_cell_lineprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop_pub
    ADD CONSTRAINT cell_lineprop_pub_cell_lineprop_id_fkey FOREIGN KEY (cell_lineprop_id) REFERENCES public.cell_lineprop(cell_lineprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_lineprop_pub cell_lineprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop_pub
    ADD CONSTRAINT cell_lineprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cell_lineprop cell_lineprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cell_lineprop
    ADD CONSTRAINT cell_lineprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: chadoprop chadoprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.chadoprop
    ADD CONSTRAINT chadoprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship contact_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship contact_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship contact_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact_relationship
    ADD CONSTRAINT contact_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact contact_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.contact
    ADD CONSTRAINT contact_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: control control_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.control
    ADD CONSTRAINT control_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: control control_tableinfo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.control
    ADD CONSTRAINT control_tableinfo_id_fkey FOREIGN KEY (tableinfo_id) REFERENCES public.tableinfo(tableinfo_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: control control_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.control
    ADD CONSTRAINT control_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvprop cvprop_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvprop
    ADD CONSTRAINT cvprop_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvprop cvprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvprop
    ADD CONSTRAINT cvprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm cvterm_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref cvterm_dbxref_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm cvterm_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm
    ADD CONSTRAINT cvterm_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship cvterm_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship cvterm_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship cvterm_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath cvtermpath_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath cvtermpath_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath cvtermpath_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath cvtermpath_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermpath
    ADD CONSTRAINT cvtermpath_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermprop cvtermprop_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermprop cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermprop
    ADD CONSTRAINT cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermsynonym cvtermsynonym_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermsynonym cvtermsynonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxref dbxref_db_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxref
    ADD CONSTRAINT dbxref_db_id_fkey FOREIGN KEY (db_id) REFERENCES public.db(db_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop dbxrefprop_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxrefprop
    ADD CONSTRAINT dbxrefprop_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.dbxrefprop
    ADD CONSTRAINT dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element element_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element
    ADD CONSTRAINT element_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES public.arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element element_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element
    ADD CONSTRAINT element_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element element_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element
    ADD CONSTRAINT element_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship element_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element_relationship
    ADD CONSTRAINT element_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.element(element_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship element_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element_relationship
    ADD CONSTRAINT element_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.element(element_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship element_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element_relationship
    ADD CONSTRAINT element_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element element_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.element
    ADD CONSTRAINT element_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult elementresult_element_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult
    ADD CONSTRAINT elementresult_element_id_fkey FOREIGN KEY (element_id) REFERENCES public.element(element_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult elementresult_quantification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult
    ADD CONSTRAINT elementresult_quantification_id_fkey FOREIGN KEY (quantification_id) REFERENCES public.quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship elementresult_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.elementresult(elementresult_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship elementresult_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.elementresult(elementresult_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship elementresult_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: environment_cvterm environment_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.environment_cvterm
    ADD CONSTRAINT environment_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: environment_cvterm environment_cvterm_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.environment_cvterm
    ADD CONSTRAINT environment_cvterm_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: expression_cvterm expression_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvterm
    ADD CONSTRAINT expression_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvterm expression_cvterm_cvterm_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvterm
    ADD CONSTRAINT expression_cvterm_cvterm_type_id_fkey FOREIGN KEY (cvterm_type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvterm expression_cvterm_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvterm
    ADD CONSTRAINT expression_cvterm_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES public.expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvtermprop expression_cvtermprop_expression_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvtermprop
    ADD CONSTRAINT expression_cvtermprop_expression_cvterm_id_fkey FOREIGN KEY (expression_cvterm_id) REFERENCES public.expression_cvterm(expression_cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvtermprop expression_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_cvtermprop
    ADD CONSTRAINT expression_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_image expression_image_eimage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_image
    ADD CONSTRAINT expression_image_eimage_id_fkey FOREIGN KEY (eimage_id) REFERENCES public.eimage(eimage_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_image expression_image_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_image
    ADD CONSTRAINT expression_image_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES public.expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_pub expression_pub_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_pub
    ADD CONSTRAINT expression_pub_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES public.expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_pub expression_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expression_pub
    ADD CONSTRAINT expression_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expressionprop expressionprop_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expressionprop
    ADD CONSTRAINT expressionprop_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES public.expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expressionprop expressionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.expressionprop
    ADD CONSTRAINT expressionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm feature_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref feature_cvterm_dbxref_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES public.feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm feature_cvterm_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub feature_cvterm_pub_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES public.feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm feature_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm
    ADD CONSTRAINT feature_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub feature_cvterm_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvtermprop feature_cvtermprop_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES public.feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvtermprop feature_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref feature_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_dbxref
    ADD CONSTRAINT feature_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref feature_dbxref_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_dbxref
    ADD CONSTRAINT feature_dbxref_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature feature_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expression feature_expression_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expression
    ADD CONSTRAINT feature_expression_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES public.expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expression feature_expression_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expression
    ADD CONSTRAINT feature_expression_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expression feature_expression_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expression
    ADD CONSTRAINT feature_expression_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expressionprop feature_expressionprop_feature_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expressionprop
    ADD CONSTRAINT feature_expressionprop_feature_expression_id_fkey FOREIGN KEY (feature_expression_id) REFERENCES public.feature_expression(feature_expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expressionprop feature_expressionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_expressionprop
    ADD CONSTRAINT feature_expressionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_genotype feature_genotype_chromosome_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_chromosome_id_fkey FOREIGN KEY (chromosome_id) REFERENCES public.feature(feature_id) ON DELETE SET NULL;


--
-- Name: feature_genotype feature_genotype_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_genotype feature_genotype_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE;


--
-- Name: feature_genotype feature_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_genotype
    ADD CONSTRAINT feature_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: feature feature_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_phenotype feature_phenotype_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_phenotype
    ADD CONSTRAINT feature_phenotype_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE;


--
-- Name: feature_phenotype feature_phenotype_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_phenotype
    ADD CONSTRAINT feature_phenotype_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: feature_pub feature_pub_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pub
    ADD CONSTRAINT feature_pub_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pub feature_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pub
    ADD CONSTRAINT feature_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pubprop feature_pubprop_feature_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pubprop
    ADD CONSTRAINT feature_pubprop_feature_pub_id_fkey FOREIGN KEY (feature_pub_id) REFERENCES public.feature_pub(feature_pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pubprop feature_pubprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_pubprop
    ADD CONSTRAINT feature_pubprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship feature_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub feature_relationship_pub_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES public.feature_relationship(feature_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub feature_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship feature_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship feature_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationship
    ADD CONSTRAINT feature_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop feature_relationshipprop_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES public.feature_relationship(feature_relationship_id) ON DELETE CASCADE;


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_feature_relationshipprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_feature_relationshipprop_id_fkey FOREIGN KEY (feature_relationshipprop_id) REFERENCES public.feature_relationshipprop(feature_relationshipprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_pub feature_relationshipprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop feature_relationshipprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym feature_synonym_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym feature_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym feature_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature_synonym
    ADD CONSTRAINT feature_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES public.synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature feature_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc featureloc_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc
    ADD CONSTRAINT featureloc_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_pub featureloc_pub_featureloc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc_pub
    ADD CONSTRAINT featureloc_pub_featureloc_id_fkey FOREIGN KEY (featureloc_id) REFERENCES public.featureloc(featureloc_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_pub featureloc_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc_pub
    ADD CONSTRAINT featureloc_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc featureloc_srcfeature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureloc
    ADD CONSTRAINT featureloc_srcfeature_id_fkey FOREIGN KEY (srcfeature_id) REFERENCES public.feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap_pub featuremap_pub_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featuremap_pub
    ADD CONSTRAINT featuremap_pub_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES public.featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap_pub featuremap_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featuremap_pub
    ADD CONSTRAINT featuremap_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap featuremap_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featuremap
    ADD CONSTRAINT featuremap_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos featurepos_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurepos
    ADD CONSTRAINT featurepos_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos featurepos_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurepos
    ADD CONSTRAINT featurepos_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES public.featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos featurepos_map_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurepos
    ADD CONSTRAINT featurepos_map_feature_id_fkey FOREIGN KEY (map_feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop featureprop_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop
    ADD CONSTRAINT featureprop_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub featureprop_pub_featureprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop_pub
    ADD CONSTRAINT featureprop_pub_featureprop_id_fkey FOREIGN KEY (featureprop_id) REFERENCES public.featureprop(featureprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub featureprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop_pub
    ADD CONSTRAINT featureprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop featureprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featureprop
    ADD CONSTRAINT featureprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange featurerange_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurerange
    ADD CONSTRAINT featurerange_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange featurerange_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurerange
    ADD CONSTRAINT featurerange_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES public.featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange featurerange_leftendf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurerange
    ADD CONSTRAINT featurerange_leftendf_id_fkey FOREIGN KEY (leftendf_id) REFERENCES public.feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange featurerange_leftstartf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurerange
    ADD CONSTRAINT featurerange_leftstartf_id_fkey FOREIGN KEY (leftstartf_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange featurerange_rightendf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurerange
    ADD CONSTRAINT featurerange_rightendf_id_fkey FOREIGN KEY (rightendf_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange featurerange_rightstartf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.featurerange
    ADD CONSTRAINT featurerange_rightstartf_id_fkey FOREIGN KEY (rightstartf_id) REFERENCES public.feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: genotype genotype_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotype
    ADD CONSTRAINT genotype_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: genotypeprop genotypeprop_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotypeprop
    ADD CONSTRAINT genotypeprop_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: genotypeprop genotypeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.genotypeprop
    ADD CONSTRAINT genotypeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_cvterm library_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_cvterm
    ADD CONSTRAINT library_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: library_cvterm library_cvterm_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_cvterm
    ADD CONSTRAINT library_cvterm_library_id_fkey FOREIGN KEY (library_id) REFERENCES public.library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_cvterm library_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_cvterm
    ADD CONSTRAINT library_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: library_dbxref library_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_dbxref
    ADD CONSTRAINT library_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_dbxref library_dbxref_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_dbxref
    ADD CONSTRAINT library_dbxref_library_id_fkey FOREIGN KEY (library_id) REFERENCES public.library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_feature library_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_feature
    ADD CONSTRAINT library_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_feature library_feature_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_feature
    ADD CONSTRAINT library_feature_library_id_fkey FOREIGN KEY (library_id) REFERENCES public.library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library library_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library
    ADD CONSTRAINT library_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: library_pub library_pub_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_pub
    ADD CONSTRAINT library_pub_library_id_fkey FOREIGN KEY (library_id) REFERENCES public.library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_pub library_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_pub
    ADD CONSTRAINT library_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym library_synonym_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_synonym
    ADD CONSTRAINT library_synonym_library_id_fkey FOREIGN KEY (library_id) REFERENCES public.library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym library_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_synonym
    ADD CONSTRAINT library_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym library_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library_synonym
    ADD CONSTRAINT library_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES public.synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library library_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.library
    ADD CONSTRAINT library_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: libraryprop libraryprop_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop
    ADD CONSTRAINT libraryprop_library_id_fkey FOREIGN KEY (library_id) REFERENCES public.library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: libraryprop_pub libraryprop_pub_libraryprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop_pub
    ADD CONSTRAINT libraryprop_pub_libraryprop_id_fkey FOREIGN KEY (libraryprop_id) REFERENCES public.libraryprop(libraryprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: libraryprop_pub libraryprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop_pub
    ADD CONSTRAINT libraryprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: libraryprop libraryprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.libraryprop
    ADD CONSTRAINT libraryprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: magedocumentation magedocumentation_mageml_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.magedocumentation
    ADD CONSTRAINT magedocumentation_mageml_id_fkey FOREIGN KEY (mageml_id) REFERENCES public.mageml(mageml_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: magedocumentation magedocumentation_tableinfo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.magedocumentation
    ADD CONSTRAINT magedocumentation_tableinfo_id_fkey FOREIGN KEY (tableinfo_id) REFERENCES public.tableinfo(tableinfo_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_contact nd_experiment_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_contact nd_experiment_contact_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_dbxref nd_experiment_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_dbxref nd_experiment_dbxref_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_genotype nd_experiment_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_genotype nd_experiment_genotype_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment nd_experiment_nd_geolocation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment
    ADD CONSTRAINT nd_experiment_nd_geolocation_id_fkey FOREIGN KEY (nd_geolocation_id) REFERENCES public.nd_geolocation(nd_geolocation_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_phenotype nd_experiment_phenotype_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_project nd_experiment_project_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_project nd_experiment_project_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_protocol nd_experiment_protocol_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_protocol nd_experiment_protocol_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES public.nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_pub nd_experiment_pub_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_pub nd_experiment_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_dbxref nd_experiment_stock_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_dbxref nd_experiment_stock_dbxref_nd_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_nd_experiment_stock_id_fkey FOREIGN KEY (nd_experiment_stock_id) REFERENCES public.nd_experiment_stock(nd_experiment_stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock nd_experiment_stock_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock nd_experiment_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock nd_experiment_stock_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_nd_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_nd_experiment_stock_id_fkey FOREIGN KEY (nd_experiment_stock_id) REFERENCES public.nd_experiment_stock(nd_experiment_stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stockprop nd_experiment_stockprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment nd_experiment_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experiment
    ADD CONSTRAINT nd_experiment_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experimentprop nd_experimentprop_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experimentprop nd_experimentprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_geolocationprop nd_geolocationprop_nd_geolocation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_nd_geolocation_id_fkey FOREIGN KEY (nd_geolocation_id) REFERENCES public.nd_geolocation(nd_geolocation_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_geolocationprop nd_geolocationprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent nd_protocol_reagent_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES public.nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent nd_protocol_reagent_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_reagent_id_fkey FOREIGN KEY (reagent_id) REFERENCES public.nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent nd_protocol_reagent_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol nd_protocol_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocol
    ADD CONSTRAINT nd_protocol_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocolprop nd_protocolprop_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES public.nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocolprop nd_protocolprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship nd_reagent_relationship_object_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_object_reagent_id_fkey FOREIGN KEY (object_reagent_id) REFERENCES public.nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship nd_reagent_relationship_subject_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_subject_reagent_id_fkey FOREIGN KEY (subject_reagent_id) REFERENCES public.nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship nd_reagent_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent nd_reagent_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagent
    ADD CONSTRAINT nd_reagent_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagentprop nd_reagentprop_nd_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_nd_reagent_id_fkey FOREIGN KEY (nd_reagent_id) REFERENCES public.nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagentprop nd_reagentprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref organism_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organism_dbxref
    ADD CONSTRAINT organism_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref organism_dbxref_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organism_dbxref
    ADD CONSTRAINT organism_dbxref_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop organismprop_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organismprop
    ADD CONSTRAINT organismprop_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop organismprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.organismprop
    ADD CONSTRAINT organismprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phendesc phendesc_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: phendesc phendesc_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phendesc phendesc_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phendesc phendesc_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phendesc
    ADD CONSTRAINT phendesc_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype phenotype_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype phenotype_attr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_attr_id_fkey FOREIGN KEY (attr_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_phenotype_comparison_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_phenotype_comparison_id_fkey FOREIGN KEY (phenotype_comparison_id) REFERENCES public.phenotype_comparison(phenotype_comparison_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_cvterm phenotype_comparison_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_environment1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment1_id_fkey FOREIGN KEY (environment1_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_environment2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment2_id_fkey FOREIGN KEY (environment2_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_genotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype1_id_fkey FOREIGN KEY (genotype1_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_genotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype2_id_fkey FOREIGN KEY (genotype2_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_phenotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype1_id_fkey FOREIGN KEY (phenotype1_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_phenotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype2_id_fkey FOREIGN KEY (phenotype2_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison phenotype_comparison_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype phenotype_cvalue_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_cvalue_id_fkey FOREIGN KEY (cvalue_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_cvterm phenotype_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_cvterm phenotype_cvterm_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype phenotype_observable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenotype
    ADD CONSTRAINT phenotype_observable_id_fkey FOREIGN KEY (observable_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES public.environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenstatement phenstatement_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phenstatement
    ADD CONSTRAINT phenstatement_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonode_dbxref phylonode_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: phylonode_dbxref phylonode_dbxref_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode phylonode_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE;


--
-- Name: phylonode_organism phylonode_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_organism
    ADD CONSTRAINT phylonode_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE;


--
-- Name: phylonode_organism phylonode_organism_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_organism
    ADD CONSTRAINT phylonode_organism_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode phylonode_parent_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_parent_phylonode_id_fkey FOREIGN KEY (parent_phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode phylonode_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES public.phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylonode_pub phylonode_pub_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_pub
    ADD CONSTRAINT phylonode_pub_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_pub phylonode_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_pub
    ADD CONSTRAINT phylonode_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship phylonode_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship phylonode_relationship_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES public.phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship phylonode_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship phylonode_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonode phylonode_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonode
    ADD CONSTRAINT phylonode_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonodeprop phylonodeprop_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonodeprop
    ADD CONSTRAINT phylonodeprop_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES public.phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonodeprop phylonodeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylonodeprop
    ADD CONSTRAINT phylonodeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylotree phylotree_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree
    ADD CONSTRAINT phylotree_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES public.analysis(analysis_id) ON DELETE CASCADE;


--
-- Name: phylotree phylotree_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree
    ADD CONSTRAINT phylotree_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: phylotree_pub phylotree_pub_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree_pub
    ADD CONSTRAINT phylotree_pub_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES public.phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylotree_pub phylotree_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree_pub
    ADD CONSTRAINT phylotree_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE;


--
-- Name: phylotree phylotree_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.phylotree
    ADD CONSTRAINT phylotree_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: project_contact project_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_contact
    ADD CONSTRAINT project_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_contact project_contact_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_contact
    ADD CONSTRAINT project_contact_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_pub project_pub_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_pub
    ADD CONSTRAINT project_pub_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_pub project_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_pub
    ADD CONSTRAINT project_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_relationship project_relationship_object_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_object_project_id_fkey FOREIGN KEY (object_project_id) REFERENCES public.project(project_id) ON DELETE CASCADE;


--
-- Name: project_relationship project_relationship_subject_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_subject_project_id_fkey FOREIGN KEY (subject_project_id) REFERENCES public.project(project_id) ON DELETE CASCADE;


--
-- Name: project_relationship project_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.project_relationship
    ADD CONSTRAINT project_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE RESTRICT;


--
-- Name: projectprop projectprop_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.projectprop
    ADD CONSTRAINT projectprop_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.project(project_id) ON DELETE CASCADE;


--
-- Name: projectprop projectprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.projectprop
    ADD CONSTRAINT projectprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: protocol protocol_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocol
    ADD CONSTRAINT protocol_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocol protocol_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocol
    ADD CONSTRAINT protocol_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocol protocol_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocol
    ADD CONSTRAINT protocol_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam protocolparam_datatype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocolparam
    ADD CONSTRAINT protocolparam_datatype_id_fkey FOREIGN KEY (datatype_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam protocolparam_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocolparam
    ADD CONSTRAINT protocolparam_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES public.protocol(protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam protocolparam_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.protocolparam
    ADD CONSTRAINT protocolparam_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_dbxref pub_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_dbxref
    ADD CONSTRAINT pub_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_dbxref pub_dbxref_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_dbxref
    ADD CONSTRAINT pub_dbxref_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship pub_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship pub_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship pub_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub_relationship
    ADD CONSTRAINT pub_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub pub_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pub
    ADD CONSTRAINT pub_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubauthor pubauthor_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubauthor
    ADD CONSTRAINT pubauthor_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop pubprop_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubprop
    ADD CONSTRAINT pubprop_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop pubprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.pubprop
    ADD CONSTRAINT pubprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification quantification_acquisition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification
    ADD CONSTRAINT quantification_acquisition_id_fkey FOREIGN KEY (acquisition_id) REFERENCES public.acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification quantification_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification
    ADD CONSTRAINT quantification_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES public.analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification quantification_operator_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification
    ADD CONSTRAINT quantification_operator_id_fkey FOREIGN KEY (operator_id) REFERENCES public.contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification quantification_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification
    ADD CONSTRAINT quantification_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES public.protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship quantification_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification_relationship
    ADD CONSTRAINT quantification_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship quantification_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification_relationship
    ADD CONSTRAINT quantification_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship quantification_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantification_relationship
    ADD CONSTRAINT quantification_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantificationprop quantificationprop_quantification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantificationprop
    ADD CONSTRAINT quantificationprop_quantification_id_fkey FOREIGN KEY (quantification_id) REFERENCES public.quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantificationprop quantificationprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.quantificationprop
    ADD CONSTRAINT quantificationprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm stock_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm stock_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm stock_cvterm_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvterm
    ADD CONSTRAINT stock_cvterm_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvtermprop stock_cvtermprop_stock_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_stock_cvterm_id_fkey FOREIGN KEY (stock_cvterm_id) REFERENCES public.stock_cvterm(stock_cvterm_id) ON DELETE CASCADE;


--
-- Name: stock_cvtermprop stock_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref stock_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxref
    ADD CONSTRAINT stock_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock stock_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref stock_dbxref_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxref
    ADD CONSTRAINT stock_dbxref_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxrefprop stock_dbxrefprop_stock_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_stock_dbxref_id_fkey FOREIGN KEY (stock_dbxref_id) REFERENCES public.stock_dbxref(stock_dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxrefprop stock_dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_genotype stock_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_genotype
    ADD CONSTRAINT stock_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES public.genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: stock_genotype stock_genotype_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_genotype
    ADD CONSTRAINT stock_genotype_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE;


--
-- Name: stock stock_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_pub stock_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_pub
    ADD CONSTRAINT stock_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_pub stock_pub_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_pub
    ADD CONSTRAINT stock_pub_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id) ON DELETE RESTRICT;


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE RESTRICT;


--
-- Name: stock_relationship_cvterm stock_relationship_cvterm_stock_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_stock_relationship_id_fkey FOREIGN KEY (stock_relationship_id) REFERENCES public.stock_relationship(stock_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship stock_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_pub stock_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_pub stock_relationship_pub_stock_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_stock_relationship_id_fkey FOREIGN KEY (stock_relationship_id) REFERENCES public.stock_relationship(stock_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship stock_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship stock_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock_relationship
    ADD CONSTRAINT stock_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock stock_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection stockcollection_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection
    ADD CONSTRAINT stockcollection_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES public.contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_stock stockcollection_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_stock stockcollection_stock_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES public.stockcollection(stockcollection_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection stockcollection_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollection
    ADD CONSTRAINT stockcollection_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: stockcollectionprop stockcollectionprop_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES public.stockcollection(stockcollection_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollectionprop stockcollectionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: stockprop_pub stockprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop_pub
    ADD CONSTRAINT stockprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop_pub stockprop_pub_stockprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop_pub
    ADD CONSTRAINT stockprop_pub_stockprop_id_fkey FOREIGN KEY (stockprop_id) REFERENCES public.stockprop(stockprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop stockprop_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop
    ADD CONSTRAINT stockprop_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop stockprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.stockprop
    ADD CONSTRAINT stockprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_assay study_assay_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study_assay
    ADD CONSTRAINT study_assay_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_assay study_assay_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study_assay
    ADD CONSTRAINT study_assay_study_id_fkey FOREIGN KEY (study_id) REFERENCES public.study(study_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study study_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES public.contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study study_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study study_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesign studydesign_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studydesign
    ADD CONSTRAINT studydesign_study_id_fkey FOREIGN KEY (study_id) REFERENCES public.study(study_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesignprop studydesignprop_studydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studydesignprop
    ADD CONSTRAINT studydesignprop_studydesign_id_fkey FOREIGN KEY (studydesign_id) REFERENCES public.studydesign(studydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesignprop studydesignprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studydesignprop
    ADD CONSTRAINT studydesignprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactor studyfactor_studydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyfactor
    ADD CONSTRAINT studyfactor_studydesign_id_fkey FOREIGN KEY (studydesign_id) REFERENCES public.studydesign(studydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactor studyfactor_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyfactor
    ADD CONSTRAINT studyfactor_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactorvalue studyfactorvalue_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES public.assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactorvalue studyfactorvalue_studyfactor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_studyfactor_id_fkey FOREIGN KEY (studyfactor_id) REFERENCES public.studyfactor(studyfactor_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyprop_feature studyprop_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop_feature
    ADD CONSTRAINT studyprop_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE;


--
-- Name: studyprop_feature studyprop_feature_studyprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop_feature
    ADD CONSTRAINT studyprop_feature_studyprop_id_fkey FOREIGN KEY (studyprop_id) REFERENCES public.studyprop(studyprop_id) ON DELETE CASCADE;


--
-- Name: studyprop_feature studyprop_feature_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop_feature
    ADD CONSTRAINT studyprop_feature_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: studyprop studyprop_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop
    ADD CONSTRAINT studyprop_study_id_fkey FOREIGN KEY (study_id) REFERENCES public.study(study_id) ON DELETE CASCADE;


--
-- Name: studyprop studyprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.studyprop
    ADD CONSTRAINT studyprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: synonym synonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.synonym
    ADD CONSTRAINT synonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment treatment_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.treatment
    ADD CONSTRAINT treatment_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES public.biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment treatment_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.treatment
    ADD CONSTRAINT treatment_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES public.protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment treatment_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: kmr44
--

ALTER TABLE ONLY public.treatment
    ADD CONSTRAINT treatment_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: TABLE cell_line; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line TO PUBLIC;


--
-- Name: TABLE cell_line_cvterm; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line_cvterm TO PUBLIC;


--
-- Name: TABLE cell_line_cvtermprop; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line_cvtermprop TO PUBLIC;


--
-- Name: TABLE cell_line_dbxref; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line_dbxref TO PUBLIC;


--
-- Name: TABLE cell_line_feature; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line_feature TO PUBLIC;


--
-- Name: TABLE cell_line_library; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line_library TO PUBLIC;


--
-- Name: TABLE cell_line_pub; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line_pub TO PUBLIC;


--
-- Name: TABLE cell_line_relationship; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line_relationship TO PUBLIC;


--
-- Name: TABLE cell_line_synonym; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_line_synonym TO PUBLIC;


--
-- Name: TABLE cell_lineprop; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_lineprop TO PUBLIC;


--
-- Name: TABLE cell_lineprop_pub; Type: ACL; Schema: public; Owner: kmr44
--

GRANT ALL ON TABLE public.cell_lineprop_pub TO PUBLIC;


--
-- PostgreSQL database dump complete
--

